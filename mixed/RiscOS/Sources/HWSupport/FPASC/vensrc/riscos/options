; >riscos.options
;
; Copyright (c) 1993 Acorn Computers Ltd., Cambridge, England.
;
; Assembler source for FPA support code and emulator
; ==================================================
; Assembly time option variables
;

;
; cope with Hdr:Proc
;
                GBLL    False
False           SETL    {FALSE}

;
; Cannot include Hdr:System since it breaks the core, so
; add definitions here
;
XMessageTrans_OpenFile          *       &61501
XMessageTrans_CloseFile         *       &61504
XMessageTrans_ErrorLookup       *       &61506

;
; Include header files
;
                GET     ListOpts
                GET     Macros
                GET     Services
                GET     ModHand
                GET     EnvNumbers
                GET     $VeneerDir.FPEMacros$FileExt
                GET     VersionASM
                GET     PublicWS
                GET     OSRSI6

                GET     hdr:CPU.PVOps
PVirt           SETA    PVSys

    [   Arm600
;
; selected highlights from Hdr2:ARM6Macros
;

ARM_CC_Mask     *       &FC000003

; New positions of I and F bits in 32-bit PSR

I32_bit *       1 :SHL: 7
F32_bit *       1 :SHL: 6
IF32_26Shift *  26-6

; Processor mode numbers

USR26_mode      *       2_00000
FIQ26_mode      *       2_00001
IRQ26_mode      *       2_00010
SVC26_mode      *       2_00011
USR32_mode      *       2_10000
FIQ32_mode      *       2_10001
IRQ32_mode      *       2_10010
SVC32_mode      *       2_10011
ABT32_mode      *       2_10111
UND32_mode      *       2_11011
SYS32_mode      *       2_11111

; New register names
r13_irq         RN      13

r13_svc         RN      13

r13_abort       RN      13
r14_abort       RN      14
lr_abort        RN      14

r13_undef       RN      13
r14_undef       RN      14
lr_undef        RN      14

; SetMode newmode, reg1, regoldpsr
;
; Sets processor mode to constant value newmode
; using register reg1 as a temporary.
; If regoldpsr is specified, then this register
; on exit holds the old PSR before the mode change
; reg1 on exit always holds the new PSR after the mode change

        MACRO
        SetMode $newmode, $reg1, $regoldpsr
      [ "$regoldpsr"=""
        pvMRS   $reg1, CPSR
        BIC     $reg1, $reg1, #&1F
        ORR     $reg1, $reg1, #$newmode
        pvMSR   CPSR_c, $reg1
      |
        pvMRS   $regoldpsr, CPSR
        BIC     $reg1, $regoldpsr, #&1F
        ORR     $reg1, $reg1, #$newmode
        pvMSR   CPSR_c, $reg1
      ]
        MEND

;
; a couple of useful files to GET
;
        GET     SWIs
        GET     Hdr:RISCOS

    |

;
; SWIs defined in Hdr2:RISCOS for Arm600 builds, but in
; Hdr:System (i.e. a non-included file) for other builds
;
XOS_Byte                        *       &20006
XOS_Module                      *       &2001e
OS_GenerateError                *       &2b
XOS_ChangeEnvironment           *       &20040

    ]


;
; Definition from Hdr:NewErrors
;
ErrorBase_FloatingPoint         *       &80000200

;
; Definition from Hdr:PublicWS
;
SVCSTK                          *       &01C02000


;
; Debug control
;
                GBLA    debug
debug                   SETA    0

        [       debug > 0

                GET     HostFS
                GET     Debug

Host_Debug      SETL    False
Debug_MaybeIRQ  SETL    False

        ]

;
; first deal with variables that need to be declared and set
;
                GBLL            FPASCWanted

                GBLL            FPEWanted

    [ Flavour = "Both"
FPASCWanted             SETL    {TRUE}
FPEWanted               SETL    {TRUE}
    ]

    [ Flavour = "SoftOnly"
FPASCWanted             SETL    {FALSE}
FPEWanted               SETL    {TRUE}
    ]

    [ Flavour = "HardOnly"
FPASCWanted             SETL    {TRUE}
FPEWanted               SETL    {FALSE}
    ]

                GBLL            ARM2Safe
ARM2Safe                SETL    :LNOT: Arm600

                GBLS            UndefHandlerConvention
UndefHandlerConvention  SETS    "StandAlone"

                GBLL            MultipleContexts
MultipleContexts        SETL    {TRUE}

    [ :LNOT: :DEF: EnableInterrupts
                GBLL            EnableInterrupts
EnableInterrupts        SETL    {TRUE}
    ]

    [ :LNOT: :DEF: Use64bitMultiply
                GBLL            Use64bitMultiply
Use64bitMultiply        SETL    {FALSE}
    ]

    [ :LNOT: :DEF: UseCLZ
                GBLL            UseCLZ
UseCLZ                  SETL    {FALSE}
    ]

                GBLL            SASTMhatbroken
SASTMhatbroken          SETL    {TRUE}

                GBLL            UseAbortStack
UseAbortStack           SETL    {FALSE}

                GBLA            FPSRInitValue
FPSRInitValue           SETA    &70000

                GBLS            FPRegInitValue
FPRegInitValue          SETS    "Zero"

                GBLA            ExpectsCoreVersion
ExpectsCoreVersion      SETA    1

                GBLL            FixUFLonMove
FixUFLonMove            SETL    {TRUE}

;
; now deal with variables that the veneers are only expected to modify
;
TrapsCanReturn          SETL    {FALSE}
FPE4WordsPerReg         SETL    {TRUE}
DoIntegerPowers         SETL    {TRUE}
ZeroToTheZero           SETS    "One"
FPEChecksNextInstr      SETL    {TRUE}
NoTranscendentals       SETL    {FALSE}
NoPacked                SETL    {FALSE}
DynamicRounding         SETL    {FALSE}


; FPEAnchorType can either be 'Low', 'High' or 'Local'
; 'Low' is for builds with zero page present
; 'High' is for builds with zero page relocated to &FFFF0000
; 'Local' is for RAM builds with unknown zero page location. Instead of storing our workspace pointer in zero page we'll store it inside the module.
; Anything else is interpreted as an address for zero page.

 IF FPEAnchorType = "Low"
FPEAnchor         * Legacy_FPEAnchor
 ELIF FPEAnchorType = "High"
FPEAnchor         * &ffff0000 + Legacy_FPEAnchor
 ELIF FPEAnchorType = "Local"
 ELSE
FPEAnchor         * $FPEAnchorType + Legacy_FPEAnchor
 ENDIF

        END

;
; EOF riscos.options
;
