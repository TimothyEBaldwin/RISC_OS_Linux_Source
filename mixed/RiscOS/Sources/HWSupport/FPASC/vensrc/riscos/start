; >riscos.start
;
; Copyright (c) 1993 Acorn Computers Ltd., Cambridge, England.
;
; Assembler source for FPA support code and emulator
; ==================================================
; RISCOS veneer code assembled before the core routines
;

;
; character constants
;
NULL            *       &00
TAB             *       &09
LF              *       &0a
CR              *       &0d

;
; base of module SWI chunk
;
FPESWIBase      *       &40480

;
; **********************************************************************
;
; Module Header
;
        AREA    |!!!Module$Header|, CODE, READONLY

        ENTRY

Module_BaseAddr

        ASSERT  (. - Module_BaseAddr) = 0

        DCD     0                               ; Start code (there isn't any)
        DCD     FPEInit - Module_BaseAddr       ; Initialisation code
        DCD     FPEFinal - Module_BaseAddr      ; Finalisation code
        DCD     FPEServ - Module_BaseAddr       ; Service Call handler
        DCD     FPETitle - Module_BaseAddr      ; Title string
        DCD     FPEHelp - Module_BaseAddr       ; Help string
        DCD     0                               ; *commands (there aren't any)
        DCD     FPESWIBase                      ; SWI chunk base number
        DCD     FPESWI - Module_BaseAddr        ; SWI handler code
        DCD     FPESTable - Module_BaseAddr     ; SWI decoding table
        DCD     0                               ; SWI decoding code
        DCD     0                               ; Message file
 [ Arm600 :LAND: {CONFIG}=32
        DCD     FPEFlags - Module_BaseAddr
 ]

;
; Header is complete, dump miscellaneous strings and tables
;

;
; Title string is shared with start of SWI decoding table
;
FPETitle
FPESTable
        DCB     "FPEmulator", 0
        DCB     "Version", 0
        DCB     "DeactivateContext", 0
        DCB     "ActivateContext", 0
        DCB     "ChangeContext", 0
        DCB     "ContextLength", 0
        DCB     "InitContext", 0
        DCB     "ExceptionDump", 0
        DCB     "Abort", 0
        DCB     "LoadContext", 0
        DCB     "SaveContext", 0
        DCB     0
        ALIGN

BadSWIToken
        DCD     &1E6
        DCB     "BadSWI", 0
        ALIGN

 [ Arm600 :LAND: {CONFIG}=32
FPEFlags
        DCD     1                               ; 32-bit compatible
 ]

 [ FPEAnchorType = "Local"
FPEAnchor
        DCD     0
 ]

;
; Despite what the current issue of the PRMs claims, ALL versions of
; the FPEmulator, whether hardware only, hardware/software, or
; software only, must have a version number greater than 4.00.  This
; allows software to easily test whether the additions to the floating
; point instruction set introduced with the FPA are available on a
; particular machine (by using RMEnsure FPEmulator 4.00).
;
        ASSERT  Module_Version >= 400

        PVOpsImports

;
; **********************************************************************
;
; FPESWI - R10 to R12 may be corrupted
;
; The core routines called here will expect to be called in SVC32 mode
; if we're using the 32-bit core (ie if {CONFIG} = 32)
;
FPESWI          ROUT
        CMP     r11, #(EndOfSWIJumpTable - SWIJumpTable) / 4
        ADDLO   pc, pc, r11, LSL #2
        B       UnknownSWIError
SWIJumpTable
        B       FPESWI_Version
        B       FPESWI_DeactivateContext
        B       FPESWI_ActivateContext
        [ MultipleContexts
        B       FPESWI_ChangeContext
        B       FPESWI_ContextLength
        B       FPESWI_InitContext
        |
        B       UnknownSWIError
        B       UnknownSWIError
        B       UnknownSWIError
        ]
        B       FPESWI_ExceptionDump
        B       FPESWI_Abort
        B       FPESWI_LoadContext
        B       FPESWI_SaveContext
EndOfSWIJumpTable

UnknownSWIError
        STMFD   sp!,{r0-r2,r4,lr}
        ADR     r0, BadSWIToken
        MOV     r1, #0
        MOV     r2, #0
        ADR     r4, FPETitle
        SWI     XMessageTrans_ErrorLookup
        LDMFD   sp!,{r0-r2,r4,pc}

FPESWI_Version
        LDR     r0, =Module_Version
      [ Arm600
        pvMRS   r11, CPSR
        TST     r11, #2_11100
        MOVNE   pc, lr                  ; 32-bit return
      ]
        MOVS    pc, lr

        ASSERT  Rwp = r10

FPESWI_DeactivateContext
      [ MultipleContexts
        LDR     Rwp, [r12]
        ADR     r11, DefaultContext
      |
        LDR     r11, [r12]
      ]

        MOV     r12, lr
        BL      core_deactivatecontext
        TEQ     r0, r11
        MOVEQ   r0, #-1                 ; check for default context
 [ Arm600
        pvMRS   r11, CPSR
        TST     r11, #2_11100
        MOVNE   pc, r12                 ; 32-bit return
 ]
        MOVS    pc, r12                 ; 26-bit return

FPESWI_ActivateContext
        CMP     r0, #-1                 ; handle "default context"
        LDREQ   r10, [r12]
      [ MultipleContexts
        ADREQ   r10, DefaultContext
      ]
        MOVNE   r10, r0                 ; r10 -> context
        MOV     r12, lr
        BL      core_activatecontext
 [ Arm600
        pvMRS   r11, CPSR
        TST     r11, #2_11100
        MOVNE   pc, r12                 ; 32-bit return
 ]
        MOVS    pc, r12                 ; 26-bit return

    [ MultipleContexts
FPESWI_ChangeContext
        CMP     r0, #-1
        LDR     r11, [r12]
        ADDEQ   r10, r11, #:INDEX:DefaultContext
        MOVNE   r10, r0

        MOV     r12, lr
        BL      core_changecontext

        ADD     lr, r11, #:INDEX:DefaultContext
        TEQ     r0, lr
        MOVEQ   r0, #-1
 [ Arm600
        pvMRS   r11, CPSR
        TST     r11, #2_11100
        MOVNE   pc, r12                 ; 32-bit return
 ]
        MOVS    pc, r12                 ; 26-bit return

FPESWI_ContextLength
        MOV     r0, #ContextLength
 [ Arm600
        pvMRS   r11, CPSR
        TST     r11, #2_11100
        MOVNE   pc, lr                  ; 32-bit return
 ]
        MOVS    pc, lr                  ; 26-bit return

FPESWI_InitContext
        CMP     r0, #-1
      [ MultipleContexts
        LDREQ   Rwp, [r12]
        ADREQ   r0, DefaultContext
      |
        LDREQ   r0, [r12]
      ]

        MOV     r12, lr
        MOV     r10, r0
        BL      core_initcontext
      [ Arm600
        pvMRS   r11, CPSR
        TST     r11, #2_11100
        MOVNE   pc, r12                 ; 32-bit return
      ]
        MOVS    pc, r12                 ; 26-bit return

    ]

FPESWI_Abort
        STMFD   sp!, {r1-r7,lr}
        LDR     r12, [r12]
        MOV     r10, r0
        CMP     r10, #-1
      [ MultipleContexts
        ADDEQ   r10, r12, #:INDEX:DefaultContext
      |
        MOVEQ   r10, r12
      ]
        CMP     r10, #-2
        LDREQ   r10, [r12, #:INDEX:CurrentContext]
        MOV     r0, r1
        MOV     r1, r2
        BL      core_abort
        LDR     r1, [sp, #4]
      [ {CONFIG}=26
        BIC     r1, r1, #PSR_mask
      ]
        ADRL    r2, FP_UndefHandlers_Start
        ADRL    r3, FP_UndefHandlers_End-4
        CMP     r1, r2
        CMPHS   r3, r1
        MOVLO   r0, #0
        ADDS    r0, r0, #0              ; clear V
        LDMFD   sp!, {r1-r7,pc}

FPESWI_SaveContext
        STMFD   sp!, {r1,lr}
        LDR     r12, [r12]
        MOV     r10, r0
        CMP     r10, #-1
      [ MultipleContexts
        ADDEQ   r10, r12, #:INDEX:DefaultContext
      |
        MOVEQ   r10, r12
      ]
        CMP     r10, #-2
        LDREQ   r10, [r12, #:INDEX:CurrentContext]
        MOV     r0, r1
        MOV     r1, r2
        BL      core_savecontext
        CMP     r0, #0                  ; clear V
        LDMFD   sp!, {r1,pc}

FPESWI_LoadContext
        STMFD   sp!, {r0,lr}
        LDR     r12, [r12]
        MOV     r10, r0
        CMP     r10, #-1
      [ MultipleContexts
        ADDEQ   r10, r12, #:INDEX:DefaultContext
      |
        MOVEQ   r10, r12
      ]
        CMP     r10, #-2
        LDREQ   r10, [r12, #:INDEX:CurrentContext]
        MOV     r0, r1
        BL      core_loadcontext
        ADDS    r0, r0, #0              ; clear V
        LDMFD   sp!, {r0,pc}

FPESWI_ExceptionDump
        LDR     Rwp, [r12]
        ADR     r0, FPExceptionDump
        MOV     pc, lr

;
; **********************************************************************
;
; FPEInit - Initialisation Code
;
FPEInit         ROUT
        STMFD   sp!, {r10, lr}

;
; check whether workspace already allocated
;
        LDR     r2, [r12]
        TEQ     r2, #0
        BNE     %F5

;
; no workspace allocated - claim some
;
        MOV     r0, #ModHandReason_Claim
        LDR     r3, =WorkspaceLength
        SWI     XOS_Module

;
; return error if SWI failed
;
        LDMVSFD sp!, {r10, pc}

;
; workspace claim succeeded: zero it and save it in private word
;
        STR     r2, [r12]
5       MOV     r10, r2

;
; workspace pointer claimed if necessary, save it away in our
; private piece of page 0, ready for retrieval during traps.
;
    [ FPEAnchorType = "Local"
        STR     r10, FPEAnchor
    |
        LDR     r0, =FPEAnchor
        STR     r10, [r0]
    ]
        MOV     r0, #0

        STR     r0, OldVector
        STR     r0, CoreVector

    [ Arm600
        MOV     r0, #6
        MOV     r1, #0
        MOV     r2, #OSRSI6_SVCSTK
        SWI     XOS_ReadSysInfo
        LDRVS   r2, =SVCSTK
    |
        LDR     r2, =SVCSTK
    ]
        STR     r2, SVCStack

;
; Open the messages file
;
        BL      open_message_file

    [ Arm600
        MRS     r0, CPSR
        AND     r0, r0, #2_11100
        STRB    r0, SysIs32bit
    |
        STRB    r0, SysIs32bit
    ]

;
; create our handler (LDR PC,CoreVector - in RAM)
;
        LDR     r0, LDRPCInstr
        STR     r0, UIHandler
    [ Arm600
        MOV     r0, #1
        ADR     r1, UIHandler
        ADR     r2, UIHandler
        SWI     XOS_SynchroniseCodeAreas
    ]

;
; and install it (it will just pass on until the core
; wants it).
;
    [ Arm600
        pvMRS   r3, CPSR                ; interrupts off until
        ORR     r0, r3, #I32_bit        ; our handler is valid
        pvMSR   CPSR_c, r0

        MOV     r0, #1
        ORR     r0, r0, #&100
        ADR     r1, UIHandler
        SWI     XOS_ClaimProcessorVector
        STR     r1, CoreVector
        STR     r1, OldVector
     [ {CONFIG}=26
        ADRL    r1, UI_veneer
        STR     r1, VeneerVector
        ADRL    r1, PassAlong_veneer
        STR     r1, VeneerOutVector
        ADR     r1, VeneerOutVector
     |
        ADR     r1, OldVector
     ]

        pvMSR   CPSR_c, r3              ; interrupts back on
    |
;
; load the current undefined instruction vector, and ascertain
; what flavour it is (i.e. B    <addr> or LDR pc, <addr>)
;
        MOV     r0, #Undef_vector
        LDR     r0, [r0]

        STR     r0, OldUIInstr

        MOV     r1, r0, LSR #24
        CMP     r1, #&ea                ; 0xea?????? -> B <addr>
        BEQ     %F10

;
; vector is not B <addr>, assume it must be LDR pc, <addr> - get
; offset from bottom 12 bits of instruction
;
        MOV     r1, r0, LSL #20
        MOV     r1, r1, LSR #20

;
; now adjust for a PC relative load from vector address
;
        ADD     r1, r1, #12
      [ debug > 1
        DREG    r1, "Current vector is LDR pc, "
      ]
;
; Pre-RO 3.5, a PC relative load generally indicates that it's loading the
; current undefined instruction environment handler. We must remember the
; address which is being loaded from, so that if the environment handler
; changes in future we'll pass along to the right place
;

        STR     r1, LDRPassalongDest

;
; However PC relative loads cause problems when we want to temporarily
; disable our vector. We could write the original instruction back to
; Undef_vector, but that would clobber any handler which anyone else has
; installed. So instead we'll construct a small section of passalong
; code in our workspace and use that whenever our vector is disabled.
;
        Push    "r0-r5"
        ADR     r5, LDRPassalongCode
        ASSERT  ?LDRPassalong = 20
        LDMIA   r5, {r0-r4}
        ADR     r5, LDRPassalong
        STMIA   r5, {r0-r4}
        STR     r5, CoreVector
        STR     r5, OldVector
        Pull    "r0-r5"

        ; Use current r1 value for core_initws


      [ debug > 9
        ;
        ; set r0 for debugs down below
        ;
        MOV     r0, #0
      ]
        B       %F15

;
; undefined instruction vector is of the form B <addr> - get offset
; from bottom 24 bits of instruction
;
10

;
; convert from word to byte offset, then adjust for vector address
; and instruction pipelining
;
        MOV     r0, r0, ASL #8
        MOV     r0, r0, ASR #6
        ADD     r1, r0, #Undef_vector + 8
        BIC     r1, r1, #&FC000003

     [  debug > 1
        DREG    r1, "Current vector is B "
     ]
        STR     r1, CoreVector
        STR     r1, OldVector
        
        ADR     r1, OldVector

15
;
; fill in our vector (as a branch)
;
        ADR     r0, UIHandler
        SUB     r0, r0, #Undef_vector + 8
        MOV     r0, r0, LSL #6
        MOV     r0, r0, LSR #8
        ORR     r0, r0, #&EA000000
        MOV     r14, #Undef_vector
        STR     r0, [r14]
    ] ; Arm600

;
; at this point r1 contains the address to be loaded into NextHandler,
; which is exactly what core_initws is expecting - load other registers
; and make the call
;
    [   debug > 5
        DREG    r1, "Calling core_initws with r1 = ", cc
        DREG    r10, ", r10 = "
    ]

        BL      core_initws

    [ Flavour = "HardOnly"
     [  debug > 1
        DREG    r0, "SysId from core_initws = 0x"
     ]

;
; if the module only supports FPA based systems, then the absence
; of an FPA is a handicap that is best not to try to overcome
;
        CMP     r0, #SysID_FPA
        BEQ     %F20

;
; load message token. NOTE:  this is a new message, that does not
; appear in the default resources file in the RISC OS 3 ROMs, so
; it needs a default message to supply to MsgTrans.
;
        ADR     r0, NoHWMesg
        MOV     r1, #0                          ; no %0 substitution
        BL      copy_error_one

;
; return *without* restoring PSR (need to return V set)
;
        LDMFD   sp!, {r10, pc}

NoHWMesg
        DCD     ErrorBase_FloatingPoint + 6
        DCB     "NoHW:Initialisation failed: FPA not present", 0
        ALIGN
    ]

20
;
; if using multiple-context version of core, initialise our default
; context
;
    [   MultipleContexts
        ADR     r10, DefaultContext
        BL      core_initcontext
    ]
;
; Either way, start up the context
;
        BL      core_activatecontext
;
; Store the initial context into the exception save dump.
;
    [   MultipleContexts
        AdrWS   r10
    ]
        ADR     r0, FPExceptionDump
        MOV     r1, pc
    [   MultipleContexts
        LDR     r10, CurrentContext
    ]
        BL      core_savecontext

;
; that's all folks
;
        CMP     r0, #0                  ; clear V
        LDMFD   sp!, {r10, pc}

LDRPCInstr
        LDR     pc, {PC}+4

 [ :LNOT: Arm600
LDRPassalongCode
        STR     r14, [r13,#-8]!
        LDR     r14, LDRPassalongCode+(LDRPassalongDest-LDRPassalong)
        LDR     r14, [r14]
        STR     r14, [r13,#4]
        LDMFD   r13!,{r14-r15}
        ASSERT  .-LDRPassalongCode = ?LDRPassalong
 ]

;
; **********************************************************************
;
; FPEFinal - Finalisation code
;
; all we need to do is call core_shutdown
;
FPEFinal        ROUT
        STMFD   sp!,{r0-r7,r10,lr}
        AdrWS   r10
        BL      core_shutdown
  [ Arm600
        MOV     r0, #1
        LDR     r1, OldVector
        ADR     r2, UIHandler
        SWI     XOS_ClaimProcessorVector
        BLVC    close_message_file
  |
        MOV     r0, #Undef_vector
        LDR     r1, OldUIInstr
        STR     r1, [r0]
        BL      close_message_file
  ]
        STRVS   r0, [sp]
        LDMFD   sp!,{r0-r7,r10,pc}

;
; **********************************************************************
;
; FPEServ - Service Call Handler
;
; this routine needs to check for Service_PreReset, and Service_Reset.
; on a Service_PreReset it should mimic the finalisation code (i.e.
; branch to core_shutdown); on a ServiceReset it should re-initialise the
; system if a soft-reset has just occured.
;

;mjs Updated to support Ursula format, with service table
;

        ASSERT Service_Reset < Service_PreReset
FPEServTab
        DCD     0                            ;flags word
        DCD     FPEServUrs - Module_BaseAddr ;offset to handler (skipping pre-rejection code)
        DCD     Service_Reset                ;service 1
        DCD     Service_PreReset             ;service 2
        DCD     0                            ;terminator
        DCD     FPEServTab - Module_BaseAddr ;anchor for table (precedes magic instruction)
FPEServ         ROUT
        MOV     r0, r0                       ;magic instruction to identify Ursula format
        TEQ     r1, #Service_PreReset
        TEQNE   r1, #Service_Reset
        MOVNE   pc, lr
FPEServUrs
        TEQ     r1, #Service_PreReset
    [   {CONFIG}=32
        BEQ     FPEFinal
    |
        BEQ     core_shutdown
    ]

;
; Service_Reset: read last reset type, ignore if not soft-reset
;
        STMFD   sp!, {r0-r3, lr}
        MOV     r0, #253
        MOV     r1, #0
        MOV     r2, #255

        SWI     XOS_Byte

        CMP     r1, #0
        LDMNEFD sp!, {r0-r3, pc}

;
; there has just been a soft-reset, get workspace pointer in r12
; and call initialisation routine
;
        BL      FPEInit

;
; finished
;
        LDMFD   sp!, {r0-r3, pc}

;
; **********************************************************************
;

        END

;
; EOF riscos.start
;
