; >riscos.end
;
; Copyright (c) 1993 Acorn Computers Ltd., Cambridge, England.
;
; Assembler source for FPA support code and emulator
; ==================================================
; RISCOS veneer code assembled after the core routines
;

;
; **********************************************************************
;
; declare help string from module header here as $CoreVersion has been
; declared and initialised by now.
;
FPEHelp
        DCB     "FPEmulator", TAB, "$Module_MajorVersion ($Module_Date) ($CoreVersion)",NULL
        ALIGN

;
; **********************************************************************
;
; veneer_newhandlers - install routine on undefined instruction vector
;
; On entry: r1 = new undefined instruction handler
; On exit:  All registers preserved
;
veneer_newhandlers      ROUT
        STR     lr, [sp, #-4]!
        AdrWS   lr

        STR     r1, [lr, #:INDEX: CoreVector]
  [ Arm600 :LAND: {CONFIG}=26
        ADR     r1, UI_veneer
        STR     r1, [lr, #:INDEX: VeneerVector] ; put our veneer in chain
        LDR     r1, [lr, #:INDEX: CoreVector]   ; restore R1
  ]

        LDR     pc, [sp], #4

;
; **********************************************************************
;
; veneer_restorehandlers - replace original undefined instruction vector
;
; On entry: (nothing)
; On exit:  All registers preserved
;
veneer_restorehandlers  ROUT
        STMFD   sp!, {r10, lr}
        AdrWS   r10

        LDR     lr, OldVector
  [ Arm600 :LAND: {CONFIG}=26
        STR     lr, VeneerVector                ; remove veneer
  |
        STR     lr, CoreVector
  ]

        LDMFD   sp!, {r10, pc}

;
; **********************************************************************
;
; veneer_coredisabled - cope with undefined instructions following a
;                       core_disabled call.  this should never happen
;                       under RISC OS, but be prepared in any case.
;
; On entry: r12 = pointer to stack frame containing user registers
; On exit:  all user registers reloaded and faulting instruction restarted
;
veneer_coredisabled     ROUT

;
; recover user registers from stack
;
   [ {CONFIG}=32
        LDR     r0, [r12, #-8]
        pvMSR   SPSR_cxsf, r0
   ]
        MOV     sp, r12
        LDMFD   sp, {r0-r14}^
        NOP                              ; NOP after banked reg. access

;
; move stack pointer past user registers and restart instruction
;
        ADD     sp, sp, #15 * 4
        LDMFD   sp!, {pc}^

;
; **********************************************************************
;
; exception trap handlers: all the different flavours of exception trap
; are grouped according to exception type and then raise OS_GenerateError
; with an internationalised error message according to the type.
;

;
; Invalid operation
;
veneer_invalidop        ROUT
veneer_invalidop1_single
veneer_invalidop2_single
veneer_invalidop1_double
veneer_invalidop2_double
veneer_invalidop1_extended
veneer_invalidop2_extended
veneer_invalidop1_integer
veneer_invalidop2_integer
veneer_invalidop1_packed
veneer_invalidop2_packed
veneer_invalidop1_xpacked
veneer_invalidop2_xpacked
veneer_invalidop1_ldfp
veneer_invalidop1_ldfpx
        ADR     r0, ivo_error
        B       handle_exception

veneer_zerodivide       ROUT
veneer_zerodivide1_single
veneer_zerodivide2_single
veneer_zerodivide1_double
veneer_zerodivide2_double
veneer_zerodivide1_extended
veneer_zerodivide2_extended
        ADR     r0, dvz_error
        B       handle_exception

veneer_overflow         ROUT
veneer_overflow_single
veneer_overflow_double
veneer_overflow_extended
        ADR     r0, ofl_error
        B       handle_exception

veneer_underflow        ROUT
veneer_underflow_single
veneer_underflow_double
veneer_underflow_extended
        ADR     r0, ufl_error
        B       handle_exception

veneer_inexact          ROUT
veneer_inexact_single
veneer_inexact_double
veneer_inexact_extended
veneer_inexact_integer
veneer_inexact_packed
veneer_inexact_xpacked
        ADR     r0, inx_error
        B       handle_exception

inx_error
        DCD     ErrorBase_FloatingPoint + 4
        DCB     "Inexact", NULL
        ALIGN

ufl_error
        DCD     ErrorBase_FloatingPoint + 3
        DCB     "UFlow", NULL
        ALIGN

dvz_error
        DCD     ErrorBase_FloatingPoint + 2
        DCB     "DivZero", NULL
        ALIGN

ofl_error
        DCD     ErrorBase_FloatingPoint + 1
        DCB     "OFlow", NULL
        ALIGN

ivo_error
        DCD     ErrorBase_FloatingPoint + 0
        DCB     "InvalOp", NULL
        ALIGN

;
; **********************************************************************
;
; handle_exception - common routine for dealing with floating point
;                    exceptions.  note that this routine raises
;                    OS_GenerateError, and does not return
;
; On entry: r0 points to error block with message tag
;           r12 points to stack frame containg user-mode register dump
; On exit:  (There is no exit)
;
handle_exception        ROUT

        MOV     r11, r0
        AdrWS   r10
  [ {CONFIG}=32
        pvMSR   CPSR_c, #I32_bit+SVC32_mode ; into SVC mode for SWI
  ]
        MOV     r0, #ExceptionDumpArea  ; lets be nice and put the
        MOV     r1, #0                  ; integer registers into the
        MOV     r2, #0                  ; exception dump
        MOV     r3, #0
        SWI     XOS_ChangeEnvironment
  [ {CONFIG}=32
        pvMSR   CPSR_c, #I32_bit+UND32_mode
  ]
        BVS     no_integer_exception_dump
        MOV     r0, r12
        LDMIA   r0!, {r2-r9}            ; copy R0-R7
        STMIA   r1!, {r2-r9}
        LDMIA   r0!, {r2-r9}            ; copy R8-R15
        STMIA   r1!, {r2-r9}

  [ {CONFIG}=32
        LDR     r0, [r12,#-8]           ; get PSR
        LDRB    r5, SysIs32bit          ; 32-bit exception dump?
        TEQ     r5, #0
        STRNE   r0, [r1]                ; put PSR in 17th word
        ANDEQ   r0, r0, #&FC000003      ; or merge it into 16th
        BICEQ   r9, r9, #&FC000003
        ORREQ   r0, r9, r0
        STREQ   r0, [r1, #-4]
  ]

no_integer_exception_dump
        ADR     r0, FPExceptionDump     ; Dump the FP registers
  [ MultipleContexts
        LDR     r10, CurrentContext
  ]
        LDR     r1, [r12,#60]
        BL      core_savecontext

        MOV     r0, r11
;
; wind back the stack using frame pointer, then recover user's
; registers
;
        ADD     sp, r12, #8                     ; lose r0, r1
        LDMFD   sp!, {r2-r12}
        ADD     sp, sp, #8                      ; lose r13, r14
        LDMFD   sp!, {r1}                       ; really r14_und

; flatten Supervisor stack

    [   {CONFIG}=32
; Change into SVC32. If on a 26-bit system we will fall back to SVC26
; on the next SWI. Sneaky huh?
        pvMSR   CPSR_c, #I32_bit+SVC32_mode
    ]
        AdrWS   r14
        LDR     sp, [r14, #:INDEX:SVCStack]

;
; (I think because we are raising the SWI in SVC mode) OS_GenerateError
; expects a certain pattern of registers at the top of the SVC stack, so
; generate this pattern
;
        STMFD   sp!, {r1, r10-r12}

;
; read the error message from the tags file, there
; is no %0 argument, so clear r1.
;
        MOV     r1, #0
        BL      copy_error_one

;
; error block is filled in, raise the error
;
        SWI     OS_GenerateError

;
; **********************************************************************
;
; veneer_corefaulty - called when core detects a hardware failure; will
;                     address an appropriate error block and branch to
;                     the same common routine used by exception trap
;                     handlers.  this routine will never come back.
;
; On entry: r12 points to stack frame containg user-mode register dump
; On exit:  (There is no exit)
;
veneer_corefaulty       ROUT
        ADR     r0, fpc_sick
        B       handle_exception

fpc_sick
        DCD     ErrorBase_FloatingPoint + 5
        DCB     "BadFPC", NULL
        ALIGN

;
; **********************************************************************
;
; copy_error_one - lookup message token in msgtrans file
;
; In:   r0 -> Error block containing the token
;       r1 -> %0 parameter to substitute
;
; Out:  r0 -> Translated error block or another error (token no found etc.)
;       All other registers preserved, V always set, other flags undefined

copy_error_one
        STMFD   sp!, {r2-r7,lr}
        MOV     r4, r1
        AdrWS   r1
        ADD     r1, r1, #:INDEX:MessageBlock
        MOV     r2, #0                          ; Use MessageTrans buffer
        MOV     r5, #0                          ; No %1
        MOV     r6, #0                          ; No %2
        MOV     r7, #0                          ; No %3
        SWI     XMessageTrans_ErrorLookup       ; Always sets the V flag

        MOV     r1, r4                          ; Preserve input r1
        LDMFD   sp!, {r2-r7,pc}

;
; **********************************************************************
;

message_filename
        DCB     "Resources:$.Resources.FPEmulator.Messages", 0
        ALIGN

;
; open_message_file -
;
; Open the Messages file.
; Trashes R0-R3.
; R10 must be workspace pointer.

open_message_file ROUT
        MOV     r3, lr                  ; Save LR

        ADR     r0, MessageBlock
        ADR     r1, message_filename    ; Filename
        MOV     r2, #0                  ; Direct access/buffer in RMA
        SWI     XMessageTrans_OpenFile  ; Open the file

        MOV     pc, r3                  ; Return

;
; **********************************************************************
;
; close_message_file -
;
; Close the message file block.
; Preserves R0 (error block). Trashes R6 and R7, V-bit
; R10 must be workspace pointer.

close_message_file ROUT
        MOV     r7, lr                  ; Save LR
        MOV     r6, r0                  ; Save translated error block

        ADR     r0, MessageBlock
        SWI     XMessageTrans_CloseFile ; Close the file (ignore error)

        MOV     r0, r6                  ; Restore translated error
        MOV     pc, r7                  ; Return

;
; **********************************************************************
;
;
; The following routines are only used on an Arm600 based system
;
    [   Arm600

     [  {CONFIG}=26
;
; **********************************************************************
;
; UI_veneer - entry point for Undefined Instruction handler, entered
;             in undef32 mode, call passed along to core handlers in
;             svc26 mode.
;
UI_veneer       ROUT

        STR     r10, [sp, #-4]!         ; STR faster than STM of one register on many ARMs
        AdrWS   r10

        STR     lr_undef, SavedLR
        pvMRS   lr_undef, SPSR
        STR     lr_undef, SavedPSR

        LDR     r10, [sp], #4            ; restore sp_undef before mode change

        pvMRS   lr_undef, CPSR
        BIC     lr_undef, lr_undef, #2_11100     ; switch from UND32 to SVC26
        pvMSR   CPSR_c, lr_undef

;
; build svc26 mode lr from saved components of undef32 state and pass
; the call along to the core handlers
;
        SUB     sp, sp, #4
        STMFD   sp!, {r1-r2, r10}

        AdrWS   r10
        LDR     lr, SavedLR
        LDR     r1, SavedPSR
        AND     r2, r1, #&f0000003      ; get saved NZCV and 26 bit mode bits
        ORR     lr, lr, r2              ; and merge with lr
        AND     r2, r1, #I32_bit + F32_bit      ; extract I & F from new place
        ORR     lr, lr, r2, LSL #IF32_26Shift   ; and merge with lr, in
                                                ; old place

        LDR     r1, CoreVector
        STR     r1, [sp, #3*4]
        LDMFD   sp!, {r1-r2, r10, pc}

;
; **********************************************************************
;
; PassAlong_veneer - Pass along undefined instruction to next handler in
;                    the chain.  The next handler should be entered as
;                    if the current one did not exist, i.e. revert from
;                    svc26 to undef32 mode, taking care to preserve all
;                    registers.
;
PassAlong_veneer        ROUT

;
; Disable IRQs - this guarantees the safety of the registers
; dumped on the r13_svc stack.
;
        TEQP    pc, #SVC26_mode :OR: I_bit
        NOP

        STMDB   sp, {r1-r4, r10, lr, pc}     ; XXX no writeback
        SUB     r3, sp, #7 * 4          ; r3 -> base of register dump

;
; load address of next handler
;
        AdrWS   r10
        LDR     r2, OldVector

;
; calculate value for lr_undef
;
        BIC     r1, lr, #&fc000003

;
; switch mode (keeping IRQs disabled)
;
        MRS     r4, CPSR
        ORR     r4, r4, #UND32_mode     ; Go from SVC26 to UND32 mode
        MSR     CPSR_c, r4

;
; place values for lr and pc onto stack
;
        ADD     r4, r3, #5 * 4
        STMIA   r4, {r1, r2}

;
; pop registers and pass call along to next handler
;
        LDMIA   r3, {r1-r4, r10, lr, pc}
     ]

 [ {FALSE}

; KJB - actually doing this is neat, but it's a can of worms. Need to integrate with
; the kernel. (Problem is we only want to do it on real aborts, not ones that cause
; page shuffling).

;
; **********************************************************************
;
; DA_handler - on a Data Abort, check to see if an abort was inside the
;              FPASC, and if so set up the registers from its stack frame
;              to make it look like the actual FP instruction aborted.

DA_handler ROUT
;
  [ UseAbortStack
; Assume we're running on a 32-bit system with an ABT stack. This makes
; life a lot neater, as we can run in ABT mode. When we pass it along, all
; registers will be preserved, and we never have to touch the FIQ status.
  |
; ABT mode doesn't have a stack on 26-bit systems (grrr). So we just do all the
; work in UND mode instead. When we pass it along, SPSR_und will be trashed,
; and CPSR will be forced to ABT32, IRQs off.
  ]
;
; If it was in the FPASC, R0-R14_usr, F0-F7,FPSR, R14_abt and SPSR_abt will be
; restored from the stack frame. Otherwise, all other registers preserved.
;
  [ UseAbortStack
        STMFD   sp!, {r0-r12,r14}
        MOV     r8, r14
        pvMRS   r11, CPSR
        pvMRS   r9, SPSR
  |
        pvMSR   CPSR_c, #I_bit + F_bit + Mode_UND32 ; FIQs off (just in case)
        STMFD   sp, {r0-r14}                    ; all IRQs off, so safe
        SUB     sp, sp, #15 * 4
        pvMSR   CPSR_c, #I_bit + F_bit + Mode_ABT32 ; back to get r14_abt
        pvMRS   r11, CPSR                       ; R11:= entry CPSR (bottom 8 bits frobbed)
        MOV     r8, r14                         ; R8:= abort address (R14_abt)
        pvMRS   r9, SPSR                        ; R9:= abort PSR (SPSR_abt)
        TST     r9, #F32_bit                    ; reenable FIQs?
        pvMSREQ CPSR_c, #I_bit + Mode_UND32     ; back into UND mode
        pvMSRNE CPSR_c, #I_bit + F_bit + Mode_UND32
  ]

        AdrWS   r10

        ADRL    r2,FP_UndefHandlers_Start
        ADRL    r3,FP_UndefHandlers_End-4
        CMP     r8,r2
        CMPHS   r3,r8
        BLO     PassOnDA                        ; Not in FPASC

; Note - we only call core_abort if the abort was inside the FPA.
;
; core_abort will cancel any pending FP operations and exceptions - this would
; be fatal if the process were to be returned to by someone further down the
; DA handler chain, for example any sort of virtual memory system.
;
; However, if the abort is in the FPA, we know it's handling an FP instruction
; somewhere. We assume that the abort must either be due to an emulated LD/ST
; instruction, or must be really fatal (in which case calling core_abort will be
; the least of our problems). In the former case, we should be able to safely call
; core_abort, as long as we fake the environment well enough - anyone attempting
; to return to the process will reexecute the instruction that was being emulated.
;
; Note that any virtual memory system *should* know how to deal with LDC and
; STC instructions - this will just make emulated LDC/STC instructions look exactly
; as they do an a system with a real FPA. The Fault Address Register in the MMU
; should still be correct too.

  [ MultipleContexts
        LDR     r10, CurrentContext             ; R10:=context pointer
  ]
        MOV     r0, r12                         ; R0:=frame pointer (if in FPASC)
        MOV     r1, r8                          ; R1:=abort PC
        BL      core_abort

; it was in the FPASC. reload user registers from the stack frame
        MOV     r12, r0
        MOV     r6, r12
        MOV     r7, r13

        LDMIA   r6!,{r0-r5}                     ; R0-R5
        STMIA   r7!,{r0-r5}
        LDMIA   r6!,{r0-r5}                     ; R6-R11
        STMIA   r7!,{r0-r5}
        LDMIA   r6,{r0,r13,r14}^                ; R12, R13_usr, R14_usr
        STR     r0,[r7]

; get original SPSR_und and R14_und from FPASC stack frame
; and transfer into SPSR_abt and R14_abt (adjusting R14 so it points
; 8 past the instruction).
  [ UseAbortStack
        LDR     r8, [r12,#60]                   ; R14_undef
        LDR     r9, [r12,#-8]                   ; SPSR_undef
        ADD     r8, r8, #4                      ; change from +4 to +8
  |
        LDR     r3, [r12,#60]                   ; R14_undef
        LDR     r0, [r12,#-8]                   ; SPSR_undef
        pvMRS   r1, CPSR
        BIC     r2, r1, #Mode_mask
        ORR     r2, r2, #Mode_ABT32
        pvMSR   CPSR_c, r2                      ; into ABT mode
        pvMSR   SPSR_cxsf, r0                   ; set up SPSR_abt
        ADD     r14, r3, #4                     ; change from +4 to +8
        pvMSR   CPSR_c, r1                      ; back to UND mode
  ]

; we should also arrange for the undefined stack pointer
; to go back up
  [ UseAbortStack
        BIC     r0, r11, #Mode_mask
        ORR     r0, r0, #Mode_UND32
        pvMSR   CPSR_c, r0
        ADD     r13, r12, #64
        pvMSR   CPSR_c, r11
  |
        ADD     r0, r12, #64
        STR     r0, [sp, #r13*4]
  ]
  [ MultipleContexts
        AdrWS   r10
  ]

PassOnDA
  [ UseAbortStack
        LDR     r0, DAVector                    ; get next DA handler address
        STR     r0, [sp, #13*4]                 ; put it into stack
        pvMSR   CPSR_cxsf, r11                  ; put CPSR back as it was on entry
        pvMSR   SPSR_cxsf, r9                   ; set up SPSR (possibly from FP frame)
        MOV     r14, r8                         ; set up SPSR (possibly from FP frame)
        LDMFD   sp!, {r0-r12,pc}                ; and pass on to next handler
  |
        BIC     r0, r11, #&FF                   ; set up SPSR_und to be correct CPSR
        ORR     r0, r0, #I32_bit + ABT32_mode   ; for data abort entry (xsf fields
        TST     r9, #F32_bit                    ; and F bit as they were on entry,
        ORRNE   r0, r0, #F32_bit                ; I set, T clear, ABT32 mode)
        pvMSR   SPSR_cxsf, r0
        LDR     r14, [sp, #r14*4]               ; restore r14_und
        LDR     r1, DAVector                    ; get next DA handler address
        STR     r1, [sp, #r14*4]                ; put it into stack
        LDMFD   sp, {r0-r13,pc}^                ; and jump to that handler in ABT mode
  ]

;
; **********************************************************************
;
 ] ; {FALSE}

    ] ; Arm600

    [   debug > 0
        InsertDebugRoutines
    ]

        END

;
; EOF riscos.end
;
