/*
 * Copyright (c) 2018, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#include <stdio.h>
#include <string.h>
#include <assert.h>
#include "sys/types.h"
#include "sys/param.h"
#include "sys/socket.h"
#include "netdb.h"
#include "net/if.h"
#include "inetlib.h"

/* Compile this with
 *   cc -Wp -ITCPIPLibs: -c rfc2553.c
 *   link -o test -rescan rfc2553.o TCPIPLibs:socklib.o TCPIPLibs:inetlib.o TCPIPLibs:unixlib.o C:stubs.o 
 * and run the resulting test program to (non exhaustively) test the RFC2553 additions.
 * Tests are derived from the summary of functions and macros in section 7 of RFC2553. 
 */
static void postaddrinfo(struct addrinfo *ai, int err)
{
	if (err == NETDB_SUCCESS)
	{
		struct addrinfo *list = ai;
		struct sockaddr_in *sa = (struct sockaddr_in *)ai->ai_addr;

		printf("getaddrinfo() looked up\n");
		while (list)
		{
			assert(ai->ai_family == AF_INET); /* Using inet_ntoa(), so IPv4 */
			assert(ai->ai_addrlen == sizeof(struct sockaddr_in));
			printf("  %s\n", inet_ntoa(sa->sin_addr));
			printf("  family %d socktype %d protocol %d\n", ai->ai_family, ai->ai_socktype, ai->ai_protocol);
			printf("  port %d\n", htons(sa->sin_port)); 
			list = list->ai_next;
		}
		freeaddrinfo(ai);
	}
	else
	{
		printf("getaddrinfo() returned error %s\n", gai_strerror(err));
	}
}

int main(void)
{
	int i, err;
	char buf[IF_NAMESIZE];
	char addr[MAX(INET6_ADDRSTRLEN, INET_ADDRSTRLEN)];
	const char *p;
	const long inaddr_loopback = htonl(INADDR_LOOPBACK);
	struct sockaddr_in sin;
	char host[NI_MAXHOST], serv[NI_MAXSERV];
	struct if_nameindex *name1, *name;
	struct hostent *hp;
	struct addrinfo hint, *ai;

	/* From arpa/inet.h */
	p = inet_ntop(AF_INET, &inaddr_loopback, addr, sizeof(addr));
	printf("Converting ntop gave %s\n", p == NULL ? "nothing" : p); 
	p = inet_ntop(AF_INET6, &in6addr_loopback, addr, sizeof(addr));
	printf("Converting ntop gave %s\n", p == NULL ? "nothing" : p); 

	/* From net/if.h */
	i = if_nametoindex("lo0");
	printf("lo0 -> index %d, which is %s\n", i, i == 0 ? "missing"
	                                                   : if_indextoname(i, buf));
	i = if_nametoindex("zz0");
	printf("zz0 -> index %d, which is %s\n", i, i == 0 ? "missing"
	                                                   : if_indextoname(i, buf));
	name1 = name = if_nameindex();
	while (name && name->if_index)
	{
		printf("if %s (index %d)\n", name->if_name, name->if_index);
		name++;
	}
	if_freenameindex(name1);

	/* From netdb.h */
	sin.sin_len = sizeof(sin);
	sin.sin_family = AF_INET;
	sin.sin_port = htons(80);
	sin.sin_addr.s_addr = htonl(0x05060708);
	err = getnameinfo((struct sockaddr *)&sin, sizeof(sin),
	                  host, sizeof(host), serv, sizeof(serv), NI_NUMERICHOST);
	printf("getnameinfo returned %d (host %s serv %s)\n", err, err == 0 ? host : "???",
	                                                           err == 0 ? serv : "???");

	hp = getipnodebyname("riscosopen.org", AF_INET, AI_DEFAULT, &err);
	if (err == NETDB_SUCCESS)
	{
		printf("getipnodebyname() looked up\n  %s (type %d)\n", hp->h_name, hp->h_addrtype);
		for (i = 0; hp->h_aliases && hp->h_aliases[i]; i++)
		{
			printf("  alias %s\n", hp->h_aliases[i]);
		}
		printf("  is %s\n", inet_ntoa(*(struct in_addr *)hp->h_addr));
		freehostent(hp);
	}
	else
	{
		printf("getipnodebyname() returned error %d\n", err);
	}

	err = getaddrinfo("riscosopen.org", "http", NULL, &ai);
	postaddrinfo(ai, err);

	err = getaddrinfo(NULL, NULL, NULL, &ai);
	assert(err != 0);
	printf("getaddrinfo() deliberately returned error %s\n", gai_strerror(err));

	memset(&hint, 0, sizeof(hint));
	hint.ai_flags = AI_NUMERICHOST;
	err = getaddrinfo("127.0.0.1", NULL, &hint, &ai);
	postaddrinfo(ai, err);

	/* From netinet/in.h */
	printf("IN6_IS_ADDR_MULTICAST(loopback) = %s\n", IN6_IS_ADDR_MULTICAST(&in6addr_loopback) ? "yes" : "no");
	printf("IN6_IS_ADDR_LOOPBACK(loopback) = %s\n", IN6_IS_ADDR_LOOPBACK(&in6addr_loopback) ? "yes" : "no");

	return 0;
}
