/* -*-C-*-
 *
 * $Header: /cvsroot/mixed/RiscOS/Sources/Lib/TCPIPLibs/inetlib/c/gethent,v 4.4 2018/08/25 20:12:51 rool Exp $
 * $Source: /cvsroot/mixed/RiscOS/Sources/Lib/TCPIPLibs/inetlib/c/gethent,v $
 *
 * Copyright (c) 1995 Acorn Computers Ltd., Cambridge, England
 *
 * :RCS Log discontinued:
 * Revision 1.2  95/04/20  12:38:42  kwelton
 * All library functions are now prototyped in inetlib.h.
 *
 * Revision 1.1	 95/04/18  16:47:46  kwelton
 * Initial revision
 *
 */
/*
 * Copyright (c) 1983 Regents of the University of California.
 * All rights reserved.	 The Berkeley software License Agreement
 * specifies the terms and conditions for redistribution.
 */

#if defined(LIBC_SCCS) && !defined(lint)
static char sccsid[] = "@(#)gethostent.c	5.3 (Berkeley) 3/9/86";
#endif /* LIBC_SCCS and not lint */

#include <stdio.h>
#include <ctype.h>

#include "sys/types.h"
#include "sys/socket.h"
#include "netdb.h"

#include "inetlib.h"

/*
 * Internet version.
 */
#define MAXALIASES	35
#define MAXADDRSIZE	64	/* This up'd from 14 : 980609 RCE */
#define LBUFSIZ		255

static char HOSTDB[] = "InetDBase:Hosts";
static FILE *hostf = NULL;
static char hostaddr[MAXADDRSIZE];
static char line[LBUFSIZ+1];
static struct hostent host;
static char *host_aliases[MAXALIASES];
static char *host_addrs[2];

int _host_stayopen;

static char *any(char *, char *);

void sethostent(int f)
{
	if (hostf != NULL)
		rewind(hostf);
	else hostf = fopen(HOSTDB, "r");
	_host_stayopen |= f;
}

void endhostent(void)
{
	if (hostf) {
		fclose(hostf);
		hostf = NULL;
	}
	_host_stayopen = 0;
}

struct hostent *namisipadr(const char *nam)
{
	u_long val;
	char **q;

	val = inet_addr(nam);
	if (val == -1)
		return (NULL);

	/*
	 * ksr 22.9.92
	 */
	host_addrs[0] = hostaddr;

	host.h_addr_list = host_addrs;
	*((u_long *)host.h_addr) = val;
	host.h_length = sizeof (u_long);
	host.h_addrtype = AF_INET;
	host.h_name = (char *) nam;
	q = host.h_aliases = host_aliases;
	*q = NULL;
	return (&host);
}

struct hostent *gethostent(void)
{
	char *p;
	register char *cp, **q;

	if (hostf == NULL && (hostf = fopen(HOSTDB, "r" )) == NULL)
		return (NULL);
again:
	if ((p = fgets(line, LBUFSIZ, hostf)) == NULL)
		return (NULL);
	if (*p == '#')
		goto again;
	while (*p == ' ' || *p == '\t')
		p++;
	cp = any(p, "#\n");
	if (cp == NULL)
		goto again;
	*cp = '\0';
	cp = any(p, " \t");
	if (cp == NULL)
		goto again;
	*cp++ = '\0';
	/* THIS STUFF IS INTERNET SPECIFIC */

	/*
	 * ksr 22.9.92
	 */
	host_addrs[0] = hostaddr;

	host.h_addr_list = host_addrs;
	*((u_long *)host.h_addr) = inet_addr(p);
	host.h_length = sizeof (u_long);
	host.h_addrtype = AF_INET;
	while (*cp == ' ' || *cp == '\t')
		cp++;
	host.h_name = cp;
	q = host.h_aliases = host_aliases;
	cp = any(cp, " \t");
	if (cp != NULL)
		*cp++ = '\0';
	while (cp && *cp) {
		if (*cp == ' ' || *cp == '\t') {
			cp++;
			continue;
		}
		if (q < &host_aliases[MAXALIASES - 1])
			*q++ = cp;
		cp = any(cp, " \t");
		if (cp != NULL)
			*cp++ = '\0';

	}
	*q = NULL;
	return (&host);
}

static char *any(char *cp, char *match)
{
	register char *mp, c;

	while (c = *cp) {
		for (mp = match; *mp; mp++)
			if (*mp == c)
				return (cp);
		cp++;
	}
	return ((char *)0);
}

/* EOF gethent.c */
