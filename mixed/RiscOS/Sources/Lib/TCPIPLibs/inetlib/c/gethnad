/* -*-C-*-
 *
 * $Header: /cvsroot/mixed/RiscOS/Sources/Lib/TCPIPLibs/inetlib/c/gethnad,v 4.2 2018/08/25 19:53:55 rool Exp $
 * $Source: /cvsroot/mixed/RiscOS/Sources/Lib/TCPIPLibs/inetlib/c/gethnad,v $
 *
 * Copyright (c) 1995 Acorn Computers Ltd., Cambridge, England
 *
 * :RCS Log discontinued:
 * Revision 1.3  95/05/24  13:06:04  kwelton
 * Replaced a call to bcmp() with the more correct memcmp().
 *
 * Revision 1.2  95/04/20  12:39:31  kwelton
 * All library functions are now prototyped in inetlib.h.
 *
 * Revision 1.1	 95/04/18  16:47:47  kwelton
 * Initial revision
 *
 */
/*
 * Copyright (c) 1983 Regents of the University of California.
 * All rights reserved.	 The Berkeley software License Agreement
 * specifies the terms and conditions for redistribution.
 */

#if defined(LIBC_SCCS) && !defined(lint)
static char sccsid[] = "@(#)gethostnamadr.c	5.5 (Berkeley) 3/9/86";
#endif /* LIBC_SCCS and not lint */

#include <stdio.h>
#include <string.h>
#include <ctype.h>

#include "kernel.h"
#include "swis.h"
#include "sys/types.h"
#include "sys/socket.h"
#include "netinet/in.h"
#include "netdb.h"

#include "inetlib.h"

/*
 * DNS module SWIs
 */
#define DNS_GetHostByName 0x46000
#define DNS_GetHost       0x46001 /* According to ANT Resolver */
#define DNS_GetHostByAddr 0x46001 /* According to InetDB and ResolverZM */

#ifndef __riscos
#define MAXALIASES	35

static struct hostent host;
static char *host_aliases[MAXALIASES];
static char hostbuf[BUFSIZ+1];
static char *host_addrs[2];
static int _host_stayopen = 0;
#else
static int have_gethostbyaddr=-1;
#endif

struct hostent *gethostbyname(const char *nam)
{
	struct hostent *hp;
	register char **cp;
	_kernel_oserror *e;

	if ((hp = namisipadr((char *)nam)) != (struct hostent *)0)
		return (hp);

	e = _swix(DNS_GetHostByName, _INR(0,1)|_OUT(1), 0, nam, &hp);
	if ((e == NULL) && (hp != NULL))
		return (hp);

	/*
	 * only acceptable error is SWI not known
	 */
	if ((e != NULL) && (e->errnum != 0x1e6))
	    return (NULL);

	sethostent(_host_stayopen);
	while (hp = gethostent()) {
		if (strcmp(hp->h_name, nam) == 0)
			break;
		for (cp = hp->h_aliases; cp != 0 && *cp != 0; cp++)
			if (strcmp(*cp, nam) == 0)
				goto found;
	}
found:
	if (!_host_stayopen)
		endhostent();
	return(hp);
}

struct hostent *gethostbyaddr(const char *addr, int length, int type)
{
	struct hostent *hp;
	_kernel_oserror *e;
	char buffer[64];

	if (have_gethostbyaddr == -1) {
		_swix(OS_SWINumberToString, _INR(0,2),
		                            DNS_GetHostByAddr,
		                            buffer,
		                            sizeof buffer);
		have_gethostbyaddr = strstr(buffer, "GetHostByAddr") != NULL;
	}

	if (have_gethostbyaddr)
		e = _swix(DNS_GetHostByAddr, _INR(0,3)|_OUT(1),
	                                     0, addr, length, type, &hp);
	else if (length == sizeof(struct in_addr) && type == AF_INET) {
	        unsigned char *hack = (unsigned char *)addr;

		sprintf(buffer, "%d.%d.%d.%d", hack[0], hack[1], hack[2], hack[3]);

		e = _swix(DNS_GetHostByName, _INR(0,1)|_OUT(1),
					     0, buffer, &hp);
	}
	else
	        goto odd;

	if (e == NULL && hp != NULL)
		return (hp);

	if (e != NULL && e->errnum != 0x1e6)
		return (NULL);

odd:
	sethostent(_host_stayopen);
	while (hp = gethostent()) {
		if (hp->h_addrtype == type && hp->h_length == length
		    && memcmp(hp->h_addr, addr, length) == 0)
				break;
	}
	if (!_host_stayopen)
		endhostent();
	return (hp);
}

/* EOF gethnod.c */
