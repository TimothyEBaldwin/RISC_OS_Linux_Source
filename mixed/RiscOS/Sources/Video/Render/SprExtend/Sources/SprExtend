; This source code in this file is licensed to You by Castle Technology
; Limited ("Castle") and its licensors on contractual terms and conditions
; ("Licence") which entitle you freely to modify and/or to distribute this
; source code subject to Your compliance with the terms of the Licence.
; 
; This source code has been made available to You without any warranties
; whatsoever. Consequently, Your use, modification and distribution of this
; source code is entirely at Your own risk and neither Castle, its licensors
; nor any other person who has contributed to this source code shall be
; liable to You for any loss or damage which You may suffer as a result of
; Your use, modification or distribution of this source code.
; 
; Full details of Your rights and obligations are set out in the Licence.
; You should have received a copy of the Licence with this source code file.
; If You have not received a copy, the text of the Licence is available
; online at www.castle-technology.co.uk/riscosbaselicence.htm
; 
; > Sources.SprExtend

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:ModHand
        GET     Hdr:Services
        GET     Hdr:VduExt
        GET     Hdr:HighFSI
        GET     Hdr:OsWords
        GET     Hdr:FSNumbers
        GET     Hdr:NewErrors
        GET     Hdr:NDRDebug
        GET     Hdr:Sprite
        GET     Hdr:ColourTran
        GET     Hdr:PublicWS
        GET     Hdr:Draw         ; needed for transform sprite
        GET     Hdr:ExtraLong    ; needed for transform sprite
        GET     Hdr:MsgTrans
        GET     Hdr:ResourceFS
        GET     Hdr:Proc
        GET     Hdr:HostFS
        GET     Hdr:PDriver
        GET     Hdr:OSRSI6
        GET     Hdr:BlendTable
        GET     Hdr:GraphicsV
        GET     Hdr:OSMisc
        GET     hdr.SprExtend
        GET     VersionASM

        IMPORT  putscaled_compiler
        EXPORT  exit
        EXPORT  exit_erl
        EXPORT  exit_oserror
        
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Switches
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        GBLL    hostvdu
        GBLL    file                    ; where to output the debugging to
hostvdu SETL    {FALSE}
file    SETL    {TRUE}

      [ :LNOT: :DEF: standalone
        GBLL    standalone
standalone      SETL {FALSE}            ; if carrying own messages register them in ResourceFS
      ]

        GBLA    flg2_ignorettr
flg2_ignorettr  SETA 1                  ; R5 is shifted right 4 before storing
        GBLA    flg2_ditheron
flg2_ditheron   SETA 4

        GBLA    flg2_widetrans
flg2_widetrans  SETA 2

        GBLA    flg2_colourmap          ; R5 bit 7: use colour mapping (not supported yet)
flg2_colourmap  SETA 8

        GBLA    flg2_translucency       ; R5 bits 8-15: translucency (0=opaque, 255=1/256 visiblity)
flg2_translucency SETA 255*16        

        GBLL    jpeg                    ; jpeg decompression
jpeg    SETL    {TRUE}

        GBLL    StrongARM               ; be safe about dynamic code
StrongARM SETL  {TRUE}

        GBLL    usemull                 ; faster signed long multiply
usemull SETL    :LNOT: NoARMM

        GBLL    doublepixel_bodge       ; whether to bodge scale factors in double pixel modes. Causes problems with dithering, and probably doesn't work with some scale factors.
doublepixel_bodge SETL {FALSE}

        GBLL    debugmc
        GBLL    debugpt
        GBLL    debugmg
        GBLL    debugid
        GBLL    debugin
        GBLL    debugsc
        GBLL    debugsp
        GBLL    debugso
        GBLL    debugch
        GBLL    debugtr
        GBLL    debuger
        GBLL    debugmb
        GBLL    debugms
        GBLL    debugag
        GBLL    debuggs
        GBLL    debugcc
        GBLL    debugti
debug   SETL    {FALSE}
debugmc SETL    debug :LAND: {FALSE}    ; macro compilation
debugpt SETL    debug :LAND: {FALSE}    ; pointer
debugmg SETL    debug :LAND: {FALSE}    ; 'merge sprites' code
debugid SETL    debug :LAND: {FALSE}    ; insertdelete rows or columns
debugin SETL    debug :LAND: {FALSE}    ; input parameters
debugsc SETL    debug :LAND: {FALSE}    ; screen parameters
debugsp SETL    debug :LAND: {FALSE}    ; sprite parameters
debugso SETL    debug :LAND: {TRUE}     ; sprite operations (non kernel OS_SpriteOp)
debugch SETL    debug :LAND: {FALSE}    ; character painting
debugtr SETL    debug :LAND: {FALSE}    ; transformed plotting
debuger SETL    debug :LAND: {FALSE}    ; error trapping
debugag SETL    debug :LAND: {FALSE}    ; amg transient debugging - could be anywhere :-)
debuggs SETL    debug :LAND: {FALSE}    ; JPEG SWI debugging.
debugcc SETL    debug :LAND: {FALSE}    ; PutSpriteScaled compiler in C
debugti SETL    debug :LAND: {TRUE}     ; TileSpriteScaled

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Module prefix
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        AREA    |!!!ModuleHeader|, CODE, READONLY, PIC

Module_BaseAddr
        ASSERT  (.=Module_BaseAddr)
        DCD     0                                           ; No start
        DCD     Init    - Module_BaseAddr
        DCD     Die     - Module_BaseAddr
        DCD     Service - Module_BaseAddr
        DCD     Title   - Module_BaseAddr
        DCD     Helpstr - Module_BaseAddr
        DCD     0                                           ; Helptable
      [ jpeg
        DCD     SpriteExtendJPEGSWI_Base                    ; MySWIBase
        DCD     SpriteExtend_SWIDecode - Module_BaseAddr    ; MySWIDecode
        DCD     SpriteExtend_SWINames - Module_BaseAddr     ; MySWINames
      |
        DCD     0
        DCD     0
        DCD     0
      ]
        DCD     0
        DCD     0
        DCD     ModFlags - Module_BaseAddr

Title   =       "SpriteExtend",0

Helpstr =       "SpriteExtension",9,"$Module_HelpVersion"
      [ debug
        =       " Development version"
      ]
        =       0
        ALIGN

ModFlags
      [ :LNOT: No32bitCode
        DCD     ModuleFlag_32bit
      |
        DCD     0
      ]

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Macros
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        ; OSS Macro for Sprite internationalised error blocks. This is because all
        ; the names start with "Sprite_". This adds no useful information to the
        ; string, and just makes the module and the Messages file bigger
        MACRO
$label  MakeSpriteErrorBlock $name, $noalign, $tag
        ALIGN
$label
ErrorBlock_$name
        DCD     ErrorNumber_Sprite_$name
      [ "$tag" = ""
        DCB     "$name"
      |
        DCB     "$tag"
      ]
        DCB     0
      [ "$noalign" = ""
        ALIGN
      ]
        MEND

        MACRO
$label  ALIGNHASH  $o,$m
      [ ((@-$o):AND:($m-1))<>0
$label  #          $m-((@-$o):AND:($m-1))
      |
$label  #          0
      ]
        MEND

        MACRO
        Claim   $vector,$entry
        MOV     R0,#$vector
        ADRL    R1,$entry
        MOV     R2,R12
        SWI     XOS_Claim
        MEND

        MACRO
        Release $vector,$entry
        MOV     R0,#$vector
        ADRL    R1,$entry
        MOV     R2,R12
        SWI     XOS_Release
        MEND

        MACRO
$l      CheckAlignedAndWithin $sprite,$offset,$end,$temp,$failure
$l      LDR     $temp, [$sprite, #$offset]
        TST     $temp, #3               ; not word aligned
        BNE     $failure
        ADDS    $temp, $sprite, $temp   ; check for unsigned overflow (C=1)
        CMPCC   $temp, $end
        BHI     $failure                ; out of range
        MEND

        MACRO
$l      CheckAlignedAndSensible $addr,$failure
$l      TST     $addr, #3               ; word aligned?
        BNE     $failure
        CMP     $addr, #area_sensible   ; not too low?
        BLO     $failure
        MEND
        

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Data areas & register allocation
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


; Everything from here down of interest to compiled C
; code. IF THERE ARE ANY CHANGES BELOW THIS POINT then there must be
; matching changes in the C workspace definition.

                ^       0,R12
data            #       0

        ASSERT  (:INDEX:@)=0
save_outoffset  #       4       ; reloaded from R12
save_inoffset   #       4
save_inptr      #       4
save_outptr     #       4
save_ydiv       #       4
save_yadd       #       4
save_ysize      #       4
save_ycount     #       4

save_inshift    #       4
save_xsize      #       4
save_xcount     #       4
save_ecfptr     #       4
save_ecflimit   #       4
save_xdiv       #       4
save_xadd       #       4

save_masko      #       4
save_xcoord     #       4
save_ycoord     #       4
save_inputxsize #       4
save_inputysize #       4
save_xmag       #       4
save_ymag       #       4

save_inlog2bpp  #       4 ; <- updated by readspritevars, SWIJPEG_PlotScaled
save_inlog2bpc  #       4 ; <- updated by readspritevars, SWIJPEG_PlotScaled
save_inbpp      #       4 ; <- updated by readspritevars, SWIJPEG_PlotScaled
save_inmodeflags #      4 ; <- updated by readspritevars, SWIJPEG_PlotScaled
save_inncolour  #       4 ; <- updated by readspritevars, SWIJPEG_PlotScaled
save_mode       #       4 ; input sprite mode word, only used by putscaled_compiler
save_spr_type   #       4 ; top 5 bits of sprite mode word, a bit useless if RISC OS 5 sprite mode word

save_maskinshift #      4
save_maskinptr  #       4
save_maskinoffset #     4


inmode          #       4 ; <- updated by readspritevars, SWIJPEG_PlotScaled
inlog2px        #       4 ; <- updated by readspritevars, SWIJPEG_PlotScaled
inlog2py        #       4 ; <- updated by readspritevars, SWIJPEG_PlotScaled
ColourTTR       #       4
TTRType         #       4 ; Type of ColourTTR
TTRType_None      *     0
TTRType_Normal    *     1 ; byte lookup table for converting <=8bpp to <=8bpp
TTRType_Wide      *     2 ; wide lookup table for converting <=8bpp to >=16bpp, repacked to be one word per entry
TTRType_32K       *     3 ; 32K-style table for converting >=16bpp to <=8bpp
TTRType_ColourMap *     4 ; Colour mapping descriptor for >=16bpp source
TTRType_Palette   *     5 ; Using the sprite palette
TTRType_Optional  *     8 ; Extra flag: translation is optional, can use palette if we wish 

changedbox      #       4

spritecode      #       4 ; SpriteOp reason code we were called with

trns_flags2     #       4

vduoutputbuffer #       0
log2px          #       4 ; <- updated by readvduvars
log2py          #       4 ; <- updated by readvduvars
Log2bpp         #       4 ; <- updated by readvduvars
Log2bpc         #       4 ; <- updated by readvduvars
orgx            #       4 ; <- updated by readvduvars
orgy            #       4 ; <- updated by readvduvars
gwx0            #       4 ; <- updated by readvduvars, tweaked elsewhere for double pixel modes
gwy0            #       4 ; <- updated by readvduvars
gwx1            #       4 ; <- updated by readvduvars, tweaked elsewhere for double pixel modes
gwy1            #       4 ; <- updated by readvduvars
linelength      #       4 ; <- updated by readvduvars
screenstart     #       4 ; <- updated by readvduvars
ywindlimit      #       4 ; <- updated by readvduvars
modeflags       #       4 ; <- updated by readvduvars
ncolour         #       4 ; <- updated by readvduvars

BPC             #       4 ; <- updated by readvduvars
BPP             #       4 ; <- updated by readvduvars

ccompiler_bitblockmove # 4      ; routine for C to call back into assembler.
calibration_table # 4           ; printer calibration table

              [ jpeg
is_it_jpeg      #       4       ; BOOL - is this sprite JPEG?
ctrans_recent   #       4       ; BOOL - check for ColourTrans 1.25 or later
in_x            #       4       ; initial x coord in input sprite
in_y            #       4       ; initial y coord in input sprite
fetchroutine    #       4       ; routine for compiled code to call to get line of JPEG data.
jpeg_info_ptr   #       4       ; pointer to JPEG decompress workspace
area_numbers    #       4*3     ; dynamic area numbers
              ]
save_sprite     #       4       ; the actual source sprite

save_PdriverIntercept # 4       ; Flags used to determine if the pdriver is
                                ; currently intercepting the JPEG plots.

dither_truecolour   #   4       ; do we dither true colour images when reducing BPP?
blending            #   4       ; b0: translucency blending, b1: alpha mask/channel blending
ecfyoffset_ptr      #   4       ; pointer to Kernel's ECF offset & shift values, required for dithering
ecfshift_ptr        #   4

CPUFlags            #   4       ; Flags about which instructions we can use
CPUFlag_LDRH        *   1       ; LDRH/STRH available
CPUFlag_BLX         *   2       ; BLX available
CPUFlag_T2          *   4       ; ARMv6 Thumb2 instructions available: MOVW,MOVT,UBFX,BFC,BFI,etc.
CPUFlag_REV         *   8       ; REV available
CPUFlag_NoUnaligned *   16      ; Unaligned load/store not allowed

blendtables     #       4*6     ; Blending tables
screenpalette   #       4       ; Screen palette fetched via InverseTable, if necessary
inversetable    #       4       ; Inverse screen palette fetched via InverseTable, if necessary


newtranstable   #       256 *4  ; buffer for pixel translation table
                                ; or for palette converted to 16bpp...

; Everything from here up of interest to compiled C
; code. IF THERE ARE ANY CHANGES ABOVE THIS POINT then there must be
; matching changes in the C workspace definition.

spritename      #       SpriteNameSize

stackframe      #       4

debug_transmit  #       4               ; void debug_transmit(char c);

charblock       #       9

       ALIGNHASH        data,16

vdu_fgecforaeor #       4               ; Pointer to VDU drivers FgEcfOraEor
vdu_bgecforaeor #       4               ; Pointer to VDU drivers BgEcfOraEor

areaCB          #       0
                #       4               ; saEnd
                #       4               ; saNumber
                #       4               ; saFirst
                #       4               ; saFree
spriteCB        #       0
                #       4               ; spNext
                #       12              ; spName
                #       4               ; spWidth
                #       4               ; spHeight
                #       4               ; spLbit
                #       4               ; spRbit
                #       4               ; spImage
                #       4               ; spTrans
                #       4               ; spMode
spriteEnd       #       0

spriteSize      *       spriteEnd-spriteCB
spriteAreaSize  *       spriteEnd-areaCB + 2*8*8*16/8  ; mode 10 has 16 bpp!
                #       2*8*8*16/8
        ASSERT  (@-areaCB) = spriteAreaSize

        ALIGNHASH       data,16

sp_mode         #       4               ;WT: added for 1bpp mask support
sp2_next        #       4               ;WT: added for 1bpp mask support

sp1_data        #       0
sp1_width       #       4
sp1_height      #       4
sp1_lbit        #       4
sp1_rbit        #       4
sp1_image       #       4
sp1_trans       #       4
sp1_header      #       4
sp1_imagesize   #       4

sp1_areaCBptr   #       4

sp2_data        #       0
sp2_width       #       4
sp2_height      #       4
sp2_lbit        #       4
sp2_rbit        #       4
sp2_image       #       4
sp2_trans       #       4
sp2_header      #       4
sp2_imagesize   #       4

        ALIGNHASH       data,64

sprite_doesnt_exist_error # 4   ; OSS Pointer to error block in RMA
ccompiler_sp    #       4       ; for unexpected jumps out of compiled C
ccompiler_errptr #      4       ; os_error pointer for if an OS error lead to exit from C code.

        ALIGNHASH       data,64

                ; Private space for use by compiled C.
                ; If the C code needs more than this then this area must be extended.
ccompiler_space #       &2800   ; C code checks at run-time for there being enough.
ccompiler_end   #       0

enddata         #       0

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Table of service calls we want
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        ASSERT  Service_ResourceFSStarting > Service_Reset
        ASSERT  Service_TerritoryStarted > Service_ResourceFSStarting

ServiceTable
        DCD     0
        DCD     ServiceUrsula - Module_BaseAddr
        DCD     Service_Reset
      [ standalone
        DCD     Service_ResourceFSStarting
      ]
        DCD     Service_TerritoryStarted
        DCD     0
        DCD     ServiceTable - Module_BaseAddr

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Service call handler
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Service
        MOV     r0, r0                  ; Indicates there is a service call table

        ; Fast rejection
        TEQ     r1, #Service_TerritoryStarted
      [ standalone
        TEQNE   r1, #Service_ResourceFSStarting
      ]
        TEQNE   r1, #Service_Reset
        MOVNE   pc, lr

ServiceUrsula
      [ standalone
        TEQ     r1, #Service_ResourceFSStarting
        BEQ     svc_resfsrestart
      ]
        TEQ     r1, #Service_Reset      ; Re-initialise on soft reset
        BEQ     Init

        ; ** Drop through for territory started **
        ; OSS A new Territory has started, so I need to re-cache the error block
svc_territory_started
        Push    "lr"
        LDR     r12, [r12]
        BL      cache_sprite_doesnt_exist_error
        Pull    "pc"

      [ standalone
        IMPORT  resfsarea
svc_resfsrestart
        Push    "r0, lr"
        BL      resfsarea               ; r0 := data area
        MOV     lr, pc
        MOV     pc, r2                  ; Call ResourceFS via r2
        Pull    "r0, pc"
      ]

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Initialisation
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Init
        Push    "R0-R12,LR"

      [ standalone :LAND: debug
        ; Call relocation code so debug strings in the C code work properly
        ; This is a bit dodgy as it might hide other relocation bugs!
        IMPORT  __RelocCode
        BL      __RelocCode
      ]

        LDR     R2,[R12]
        TEQ     R2,#0
        BNE     gotarea

        MOV     R0,#ModHandReason_Claim
        LDR     R3,=enddata-data
        SWI     XOS_Module
        BVS     initexitdie
        STR     R2,[R12]

        ; Set the error pointer to zero only if we are allocating the workspace.
        ; This is because on Service_Reset we have the workspace and we still have
        ; the old cached error block so zeroing the pointer would cause us to
        ; never free that block.

        MOV     r0, #0
        STR     r0, [r2, #:INDEX:sprite_doesnt_exist_error]
      [ jpeg
        ; zero the workspace pointer for JPEG - allocated later if needed
        STR     R0, [r2, #:INDEX:jpeg_info_ptr]
        ; zero the dynamic area numbers - allocated later if needed
        MOV     R3, #(?area_numbers:SHR:2) - 1
        ADD     R4, R2, #:INDEX:area_numbers
10
        STR     R0, [R4,R3,LSL#2]
        SUBS    R3, R3, #1
        BPL     %BT10
      ]
gotarea
        MOV     R12,R2

        MOV     R0,#-1
        STR     R0,inmode

        ; Get the ECF block pointers    
        MOV     R0,#6
        MOV     R1,#0
        MOV     R2,#OSRSI6_FgEcfOraEor
        SWI     XOS_ReadSysInfo
        MOVVS   R2,#0
        CMP     R2,#0
        MOVEQ   R2,#Legacy_VduDriverWorkSpace+Legacy_FgEcfOraEor
        STR     R2,vdu_fgecforaeor
        MOV     R0,#6
        MOV     R2,#OSRSI6_BgEcfOraEor
        SWI     XOS_ReadSysInfo
        MOVVS   R2,#0
        CMP     R2,#0
        MOVEQ   R2,#Legacy_VduDriverWorkSpace+Legacy_BgEcfOraEor
        STR     R2,vdu_bgecforaeor        
        MOV     R0,#6
        MOV     R2,#OSRSI6_ECFYOffset
        SWI     XOS_ReadSysInfo
        MOVVS   R2,#0
        CMP     R2,#0
        LDREQ   R2,=Legacy_VduDriverWorkSpace+Legacy_ECFYOffset
        STR     R2,ecfyoffset_ptr        
        MOV     R0,#6
        MOV     R2,#OSRSI6_ECFShift
        SWI     XOS_ReadSysInfo
        MOVVS   R2,#0
        CMP     R2,#0
        LDREQ   R2,=Legacy_VduDriverWorkSpace+Legacy_ECFShift
        STR     R2,ecfshift_ptr

      [ debug
        ; Fill in the debug transmit function pointer
        MOV     R0,#11
        SWI     XOS_ReadSysInfo
        MOVVS   R0,#0
        STR     R0,debug_transmit
      ]

        BL      GetCPUFlags

      [ standalone
        ; Register the messages before they get used
        BL      resfsarea
        SWI     XResourceFS_RegisterFiles
        BVS     initexitdie
      ]
        ; OSS Attempt to cache the error. This may well fail, but we ignore the
        ; failure. We will get another go later on Service_TerritoryStarted and
        ; that time it should succeed.

        BL      cache_sprite_doesnt_exist_error
02
        CLRV

        ; Hook onto the Sprite vector
        Claim   SpriteV,My_SpriteOp

        MOVVC   R0,#-1
        SWIVC   XOS_ChangedBox  ; R1 --> 5-word block for changed coords
        STRVC   R1,changedbox

        BLVC    readvduvars     ; read for later

      [ file
        Debug_Open "<Debug$$File>"
      ]

        
        MOV     r0, #0
        STR     r0, dither_truecolour     ; initialise dithering off..
        STR     r0, blending
        STR     R0,ccompiler_space        ; mark the ccompiler workspace clearly as uninitialised
        ASSERT  ?blendtables = 6*4
        STR     R0, blendtables
        STR     R0, blendtables+4
        STR     R0, blendtables+8
        STR     R0, blendtables+12
        STR     R0, blendtables+16
        STR     R0, blendtables+20                

        ADRL    r0,bitblockmove           ; ensure C code has access to bitblockmove
        STR     r0,ccompiler_bitblockmove

      [ jpeg
        ; set up the fetchroutine, for use by any subsequent compiled code.
        ADRL    R2,jpeg_fetchroutine
        STR     R2,fetchroutine

        ; clear pdriver intercept flags....
        STR     r0, save_PdriverIntercept

        ; check ColourTrans version is up to date
        ADR     r0, init_ctrans_check
        SWI     XOS_CLI
        MOVVS   r0, #0
        MOVVC   r0, #-1
        STR     r0, ctrans_recent
        CLRV
      ]

initexitdie
        STRVS   R0, [sp]
        Pull    "R0-R12,PC"

init_ctrans_check
        DCB     "RMEnsure ColourTrans 1.25",0
        ALIGN

Die
        Push    "R0-R12,LR"
        LDR     R12,[R12]       ; R12 --> workspace

      [ standalone
        ; Remove our message resources
        BL      resfsarea
        SWI     XResourceFS_DeregisterFiles
      ]
        ; OSS Free the cached "Sprite doesn't exist" error block - never
        ; returns errors.
        BL      free_sprite_doesnt_exist_error

      [ file
        Debug_Close
      ]

      [ jpeg
        MOV     R3, #(?area_numbers:SHR:2) - 1
        ADR     R4, area_numbers
10
        LDR     R1, [R4,R3,LSL#2]            ; dynamic area number N
        CMP     R1, #0
        MOVNE   R0, #1                       ; remove area
        SWINE   XOS_DynamicArea
        SUBS    R3, R3, #1
        BPL     %BT10
      ]

        ; Unhook from Sprite vector
        Release SpriteV,My_SpriteOp             ; OSS  Errors from this ARE returned
01
        B       initexitdie

; Set up CPUFlags
GetCPUFlags ROUT
        Entry   "R0-R5"
        MOV     R5, #0
        MOV     R0, #OSPlatformFeatures_ReadCodeFeatures
        SWI     XOS_PlatformFeatures
        BVS     %FT90                        ; Must be an old OS/CPU version
        ; Try and guess the CPU features for situations where OS_PlatformFeatures 34 isn't available
        TST     R0, #CPUFlag_No26bitMode
        ORRNE   R5, R5, #CPUFlag_NoUnaligned ; No 26bit mode, might be ARMv6+, so disallow unaligned load/store
        TST     R0, #CPUFlag_XScale
        ORRNE   R5, R5, #CPUFlag_LDRH+CPUFlag_BLX ; XScale, so ARMv5 features available
        BICNE   R5, R5, #CPUFlag_NoUnaligned ; ...and unaligned access should work
        MOV     R4, R0
        ; See if OS_ReadSysInfo 8 can give us a more authoritative view of whether unaligned loads are supported
        ; Currently NoUnaligned only controls our use of rotated loads, so check if the OS uses those
        MOV     R0, #8
        SWI     XOS_ReadSysInfo
        BVS     %FT10
        TST     R2, #3<<5                    ; OS describes alignment mode?
        BEQ     %FT10
        TST     R1, #1<<5                    ; OS uses rotated loads?
        ORREQ   R5, R5, #CPUFlag_NoUnaligned ; No: Disable unaligned loads
        BICNE   R5, R5, #CPUFlag_NoUnaligned ; Yes: Enable unaligned loads
10
        TST     R4, #CPUFlag_ExtraReasonCodesFixed
        BEQ     %FT90
        ; See if we can query things directly via OS_PlatformFeatures 34
        ADR     R4, CPUFlagsList
20
        LDRB    R3, [R4], #1
        CMP     R3, #0
        BEQ     %FT90
30
        LDRB    R1, [R4], #1
        CMP     R1, #255
        ORREQ   R5, R5, R3                   ; Enable feature if all requirements were met
        BEQ     %BT20                        ; Advance to next CPUFlag
        MOV     R0, #OSPlatformFeatures_ReadCPUFeatures
        SWI     XOS_PlatformFeatures
        BVS     %FT90
        TEQ     R0, #1
        BICNE   R5, R5, R3                   ; Negative response, disable feature
        MOVNE   R3, #0
        B       %BT30
90
        STR     R5,CPUFlags
        EXIT

CPUFlagsList
        = CPUFlag_LDRH, CPUFeature_LDRH_LDRSH_STRH, 255
        = CPUFlag_BLX, CPUFeature_BLX, 255
        = CPUFlag_T2, CPUFeature_MOVW_MOVT, CPUFeature_BFC_BFI_SBFX_UBFX, 255
        = CPUFlag_REV, CPUFeature_REV_REV16_REVSH, 255
        = 0
        ALIGN

      [ jpeg
        IMPORT  jpeg_find_image_dims
        IMPORT  jpeg_find_line
        GET     Sources.SWIs
      ]
        GET     Sources.SprOp
        GET     Sources.SprAdjSize
        GET     Sources.SprTrans
        GET     Sources.MsgCode
        GET     Sources.PutScaled

      [ debug
        InsertNDRDebugRoutines
      ]

        END
