REM    LockWriteC

REM  This program stops output line being intermingled
REM  by character when doing parallel builds.

REM  Copyright (c) 2013, Timothy Baldwin
REM  All rights reserved.
REM
REM  Redistribution and use in source and binary forms, with or without
REM  modification, are permitted provided that the following conditions are met:
REM      * Redistributions of source code must retain the above copyright
REM        notice, this list of conditions and the following disclaimer.
REM      * Redistributions in binary form must reproduce the above copyright
REM        notice, this list of conditions and the following disclaimer in the
REM        documentation and/or other materials provided with the distribution.
REM      * Neither the name of RISC OS Open Ltd nor the names of its contributors
REM        may be used to endorse or promote products derived from this software
REM        without specific prior written permission.
REM
REM  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
REM  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
REM  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
REM  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
REM  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
REM  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
REM  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
REM  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
REM  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
REM  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
REM  POSSIBILITY OF SUCH DAMAGE.

REM Allocate memory from Module Area
SYS "OS_Module",6,,,256 TO ,,code%

size%=8

REM Open an eventfd object
SYS "IXSupport_LinuxSyscall",,,,,,,,351 TO eventfd%

FOR opt% = 0 TO 3 STEP 3
P%=code%
[OPT opt%

.lock_state%
dcd     3 ; unlocked = 3, locked = 4

.buffer%
dcd     1
dcd     0

.vector_handler%
ldrb    r12, lock_state%

teq     r12, #3
teqne   r0, #13
bne     do_lock% ; Not locked or CR

teq     r12, #3
teqeq   r0, #13
beq     do_unlock% ; Locked and CR
mov     pc, lr

.do_lock%
; Lock eventfd then print character.
stmfd   sp!, {r0-r2, r7, lr}
sub     r1, sp, #size% ; Scratch space
mov     r2, #size%
mov     r7, #3 ; READ
mov     r0, #eventfd%
swi     "IXSupport_LinuxSyscall"
str     r7, lock_state%
ldmfd   sp!, {r0-r2, r7, pc}

.do_unlock%
; Print character then unlock eventfd.
str     pc, [sp, #-4]!
mov     pc, lr
nop
stmfd   sp!, {r0-r3, r7}
mrs     r3, cpsr
mov     r0, #eventfd%
adr     r1, buffer%
mov     r2, #size%
mov     r7, #4 ; WRITE
swi     "IXSupport_LinuxSyscall"
str     r7, lock_state%
msr     cpsr_sf, r3
ldmfd   sp!, {r0-r3, r7, pc}

]:NEXT

REM Claim Wrchv
SYS "OS_Claim",3,vector_handler%,0
