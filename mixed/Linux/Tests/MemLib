
DEF FNhimem_test
E%=HIMEM
PROCtest_limit(E%)
PROCtest_himem(E%-&4000)
PROCtest_himem(E%+&4000)
END=E%
=TRUE

REM Test end of appslot
DEF PROCtest_himem(L%)
END=L%
IF HIMEM<>L% PROCfail
PROCtest_limit(L%)
ENDPROC

REM Test Limit of memory area
DEF PROCtest_limit(L%)
PROCprint("Testing memory limit at "+STR$~L%+"...")
LOCAL Z%
LOCAL ERROR
ON ERROR LOCAL PROCfail
Z%=!(L%-4)
ON ERROR LOCAL PROCok:ENDPROC
Z%=!L%
PROCfail
END

DEF PROCprint(S$)
SYS "IXSupport_LinuxSyscall",2,S$,LEN(S$),,,,,4
ENDPROC

DEF PROCfail
PROCprint("Failed"+FNnl)
SYS "IXSupport_LinuxSyscall",1,,,,,,,1
STOP

DEF PROCok
PROCprint("ok"+FNnl)
ENDPROC

DEF FNnl=CHR$10

DEF PROCassert(A$)
IF EVAL(A$) THEN ENDPROC
PROCprint(FNnl+FNnl+"Assertion failed: "+A$+FNnl)
PROCfail
STOP

DEF PROCinit(T$)
DIM tasks%(3)
test_message%=&C0400
DIM buffer% 256
SYS "Wimp_Initialise",200,&4B534154,T$ TO ,tasks%(0)
ENDPROC

DEF FNset_mem(start%,size%,K%)
LOCAL I%
PROCprint("Seting memory "+STR$~start%+" to "+STR$~(start%+size%)+" (key "+STR$~K%+")...")
FOR I%=start% TO start%+size%-3 STEP 4
  !I%=(I% EOR K%)
NEXT
PROCok
=TRUE

DEF FNcheck_mem(start%,size%,K%)
LOCAL I%
PROCprint("Testing memory "+STR$~start%+" to "+STR$~(start%+size%)+" (key "+STR$~K%+")...")
FOR I%=start% TO start%+size%-3 STEP 4
  IF !I%<>(I% EOR K%) THEN PROCfail
NEXT
PROCok
=TRUE

DEF FNcheck_zero(start%,size%)
PROCprint("Testing memory "+STR$~start%+" to "+STR$~(start%+size%)+" (zeros)...")
LOCAL I%
FOR I%=start% TO start%+size%-4 STEP 4
  IF !I% THEN PROCfail
NEXT
PROCok
=TRUE

DEF FNbin(V%)
LOCAL I%,S$
S$=""
FOR I%=1 TO 32
  S$=STR$(V% AND 1) + S$
  V%= V% >> 1
NEXT
=S$
