/*
 * Copyright (c) 2015, Timothy Baldwin
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */

#include "SocketKVMHdr.h"

#define ix_SYSCALL_branch 1
#include <syscalls.h>

#include <linux/limits.h>
#include <stdbool.h>

#include "protocol.h"
#include "swis.h"
#include <linux/fcntl.h>
#include <linux/signal.h>
#include <linux/uio.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <stdint.h>

#include "Global/RISCOS.h"
#include "Global/Keyboard.h"
#include "Global/Pointer.h"
#include "Global/VduExt.h"
#include "Global/GraphicsV.h"
#include "Global/OSMem.h"

#define O_ASYNC 020000

int socket = 31;
int gv_id;
volatile bool mode_sync;


_kernel_oserror *init(const char *cmd_tail, int podule_base, void *pw) {
  if (ix_fcntl(socket, F_SETOWN, ix_getpid()) >= 0) {
    ix_fcntl(socket, F_SETSIG, SIGIO);
    ix_fcntl(socket, F_SETFL, ix_fcntl(socket, F_GETFL, 0) | O_ASYNC | O_NONBLOCK);
    _swi(OS_ClaimDeviceVector, _INR(0, 2), SIGIO, Socket_Ready, pw);
    _swi(OS_CallAVector, _INR(0, 2) | _IN(9), 0, 2, 0x4E6F4B64, KEYV);

    _swi(OS_ScreenMode, _INR(0, 2) | _OUT(0), ScreenModeReason_RegisterDriver, 0, "Linux Socket Video", &gv_id);
    _swi(OS_Claim, _INR(0, 2), GraphicsV, &Graphics, pw);
    _swi(OS_ScreenMode, _INR(0, 2), ScreenModeReason_StartDriver, gv_id, "Linux Socket Video");
  } else {
    socket = -1;
  }
  return 0;
}

_kernel_oserror *final(int fatal, int podule, void *pw) {
  (void)pw;
  _kernel_oserror *e = 0;
  return e;
}

int Socket_Ready_handler(_kernel_swi_regs *regs, void *pw) {
  (void)regs;
  (void)pw;

  char *c;
  union report r;
  while(ix_read(socket, &r, sizeof(r)) > 1) {
    switch(r.reason) {
      case ev_mouse:
        _swix(OS_CallAVector, _INR(0, 4) | _IN(9), PointerReason_Report, 3, r.mouse.x * 2, r.mouse.y * 2, 0x6f736241, PointerV);
        break;
      case ev_keydown:
        _swix(OS_CallAVector, _INR(0, 1) | _IN(9), KeyV_KeyDown, r.key.code, KEYV);
        break;
      case ev_keyup:
        _swix(OS_CallAVector, _INR(0, 1) | _IN(9), KeyV_KeyUp, r.key.code, KEYV);
        break;
      case ev_mode_sync:
        mode_sync = false;
        break;
    }
  }
  return 0;
}

struct msghdr {
  void *msg_name;
  size_t msg_namelen;
  struct iovec *msg_iov;
  size_t msg_iovlen;
  void *msg_control;
  size_t msg_controllen;
  int msg_flags;
};

/* Structure used for storage of ancillary data object information.  */
struct cmsghdr {
  size_t cmsg_len;
  int cmsg_level;
  int cmsg_type;
  int fd;
};

static const unsigned formats[] = {
  0xFF, ModeFlag_FullPalette, 3,
  0xFFFF, 0, 4,
  0xFFFFFFFF, 0, 5,
};

struct shape_t {
  uint8_t width;      /* unpadded width in bytes (see notes) */
  uint8_t height;     /* in pixels */
  uint8_t padding[2]; /* 2 bytes of padding for field alignment */
  void   *buffLA;     /* logical address of buffer holding pixel data */
  void   *buffPA;     /* corresponding physical address of buffer */
  uint8_t active_x;
  uint8_t active_y;
};

int Graphics_handler(_kernel_swi_regs *r, void *pw) {
  //eprintf("In GraphicsV %02x %08x\n", gv_id, r->r[4]);

  if (((unsigned)r->r[4]) >> 24 != gv_id) return 1;
  switch(r->r[4] & 0xFFFFFF) {
    case GraphicsV_DisplayFeatures:
      r->r[0] = GVDisplayFeature_HardwarePointer | GVDisplayFeature_NoVsyncIRQ;
      r->r[1] = (1 << 3);
      r->r[2] = 2;
      r->r[4] = 0;
      break;
    case GraphicsV_SetDMAAddress:
      break;
    case GraphicsV_VetMode:
      r->r[0] = 0;
      r->r[4] = 0;
      break;
    case GraphicsV_SetMode:
    {
      int *v = (int*)r->r[0];
      int i = 16;
      while(v[i] != -1) i += 2;
      int x = c_mode_change;
      struct iovec iov[] = {
        {&x, sizeof(x)},
        {v, (i + 1) * 4},
      };
      struct cmsghdr cmsg = {
        .cmsg_len = sizeof(cmsg),
        .cmsg_level = 1, // SOL_SOCKET
        .cmsg_type = 1, // SCM_RIGHTS
      };
      _swi(OS_DynamicArea, _INR(0, 2) | _OUT(3), DAReason_AlterFile, 2, -1, &cmsg.fd);
      struct msghdr msg = {
        .msg_iov = iov,
        .msg_iovlen = 2,
        .msg_control = &cmsg,
        .msg_controllen = sizeof(cmsg),
      };
      mode_sync = true;
      ix_sendmsg(socket, &msg, 0);
      while(mode_sync);
      r->r[4] = 0;
      break;
    }
    case GraphicsV_WritePaletteEntry:
    {
      struct palette p;
      p.reason = c_set_palette;
      p.type = r->r[0];
      p.colour = r->r[1];
      p.index = r->r[2];
      ix_write(socket, &p, sizeof(p));
      r->r[4] = 0;
      break;
    }
    case GraphicsV_PixelFormats:
      r->r[0] = (unsigned)formats;
      r->r[1] = sizeof(formats) / 12;
      r->r[4] = 0;
      break;
    case GraphicsV_UpdatePointer:
      if (r->r[0] & 2) {
        struct shape_t *s = (void*) r->r[3];
        struct pointer p = {
          c_pointer,
          s->width,
          s->height,
          s->active_x,
          s->active_y,
          r->r[0] & 1,
        };
        struct iovec iov[] = {
          {&p, sizeof(p)},
          {s->buffLA, 8 * s->height},
        };
        ix_writev(socket, iov, 2);
      }


      break;
    default:
      //eprintf("In GraphicsV %i\n", r->r[4] & 0xFFFFFF);
      break;
  }
  return 1;
}
