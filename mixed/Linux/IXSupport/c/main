/*
 * Copyright (c) 2015, Timothy Baldwin
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */

#include "header.h"
#include "swis.h"
#include <linux/fcntl.h>
#include <linux/signal.h>
#include <linux/uio.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <stdint.h>

#include "Global/RISCOS.h"
#include "Global/Keyboard.h"
#include "Global/Pointer.h"
#include "Global/VduExt.h"
#include "Global/GraphicsV.h"
#include "Global/OSMem.h"

#define O_ASYNC 020000

extern const char fsinfo(void);
extern const char __module_header(void);
extern char **__HAL_get_env(void);

int socket = 31;
int gv_id;
volatile bool mode_sync;


_kernel_oserror *init(const char *cmd_tail, int podule_base, void *pw) {

  strcpy(dirname, "Sys$ix$");
  for(char **i = __HAL_get_env(); *i; ++i) {
    char *s = *i, *d = dirname + 7;
    while(*s && *s != '=' && d < dirname + sizeof(dirname) - 1) {
      char c = *s++;
      if (c == '_' || c == '$') c= c ^ ('_' ^ '$');
      *d++ = c;
    }
    *d = 0;
    if (*s == '=') ++s;

    d = dirname;
    if (memcmp(d, "Sys$ix$RISC$OS$", 15) == 0) d += 15;
    _swix(OS_SetVarVal, _INR(0, 4), d, s, strlen(s), 0, 4);
  }

  pd1.fd = -1;
  pd2.fd = -1;
  pd1.dir_fd = -1;
  pd2.dir_fd = -1;

  _kernel_oserror *e = 0;
  __asm {
        MOV     r0, #12
        MOV     r1, __module_header
        MOV     r2, fsinfo
        SUB     r2, r2, r1
        MOV     r3, pw
        SWI     XOS_Bit | OS_FSControl, {r0-r3}, {r0, psr}, {lr}
        MOVVC   e, #0
        MOVVS   e, r0
  }
  return e;
}

_kernel_oserror *final(int fatal, int podule, void *pw) {
  (void)pw;
  _kernel_oserror *e = 0;
  __asm {
        MOV     r0, #16
        MOV     r1, "IXFS"
        SWI     XOS_Bit | OS_FSControl, {r0-r1}, {r0, psr}, {lr}
        MOVVC   e, #0
        MOVVS   e, r0
  }
  return e;
}

_kernel_oserror *swi_handler(int swi_no, _kernel_swi_regs *r, void *pw) {
  (void)pw;
  switch (swi_no) {
    case IXSupport_LinuxSyscall - IXSupport_00:
      __asm {
        MOV     r0, r->r[0]
        MOV     r1, r->r[1]
        MOV     r2, r->r[2]
        MOV     r3, r->r[3]
        MOV     r4, r->r[4]
        MOV     r5, r->r[5]
        MOV     r6, r->r[6]
        MOV     r7, r->r[7]
        BL      __PVirt_syscall, {r0-r7}, {r0}, {}
        MOV     r->r[0], r0
      }
      return 0;

  }
  return error_BAD_SWI;
}
