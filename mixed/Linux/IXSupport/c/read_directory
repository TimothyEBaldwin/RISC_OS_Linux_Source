/*
 * Copyright (c) 2015, Timothy Baldwin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

static _kernel_oserror *FSEntry_Func_READ(_kernel_swi_regs *r) {
  _kernel_oserror *e;

  e = open_dir((const char *)r->r[6], (const char *)r->r[1], r->r[4]);
  if (e) return e;

  OUT_TYPE *out = (OUT_TYPE *)r->r[2];
  unsigned count = r->r[3];
  unsigned space = r->r[5];
  unsigned read = 0;

  int openflags = ix_O_CLOEXEC | ix_O_PATH;

  while(count) {

    // Read more entries if required.
    e = read_dent();
    if (e) return e;

    // Stop if end of directory.
    if (dents_size == 0) {
      // No more entries;
      dents_pos = ~0U;
      break;
    }

    // Hide "." and ".." special entries.
    if (dents_ptr->d_name[0] == '.'
        && (dents_ptr->d_name[1] == 0
            || (dents_ptr->d_name[1] == '.'
                && dents_ptr->d_name[2] == 0))) {
      next_dent();
      continue;
    }

    // Strip type suffix
    size_t len = strlen(dents_ptr->d_name);
    int filetype = -1;
    if (len > 4 && pd1.sf.suffix && is_suffix(dents_ptr->d_name + len - 4)) {
      len -= 4;
      if (META) filetype = strtoul(dents_ptr->d_name + len + 1, 0, 16);
    }

    // Check if enough output space left.
    unsigned entry_length = SIZEOF_ENTRY(len);
    if (entry_length > space) break;

#if META
    // Read metadata.
    int fd = ix_openat(dir_fd, dents_ptr->d_name, openflags, 0);
    read_meta(out, dir_fd, dents_ptr->d_name, fd, filetype, pd1.sf.suffix);
    ix_close(fd);
    char *out_name = out->name;
#else
    char *out_name = out;
#endif

    // Copy name
    size_t i;
    for(i = 0; i != len; i++) {
      char c = dents_ptr->d_name[i];
      if (c == '.') c = '/';
      if (c == ' ') c = 160;
      out_name[i] = c;
    }
    out_name[i] = 0;

    out = (OUT_TYPE *)((char *)out + entry_length);
    space -= entry_length;
    next_dent();
    count--;
    read++;
  }
  r->r[3] = read;
  r->r[4] = dents_pos;
  return 0;
}

#undef FSEntry_Func_READ
#undef OUT_TYPE
#undef SIZEOF_ENTRY
#undef META
