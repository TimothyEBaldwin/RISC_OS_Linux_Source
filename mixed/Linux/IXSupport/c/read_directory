/*
 * Copyright (c) 2015, Timothy Baldwin
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */

static _kernel_oserror *FSEntry_Func_READ(_kernel_swi_regs *r) {
  _kernel_oserror *e;

  e = open_dir((const char *)r->r[1], r->r[4]);
  if (e) return e;

  OUT_TYPE *out = (OUT_TYPE *)r->r[2];
  unsigned count = r->r[3];
  unsigned space = r->r[5];
  unsigned read = 0;

  while(count) {

    // Read more entries if required.
    e = read_dent();
    if (e) return e;

    // Stop if end of directory.
    if (dents_size == 0) {
      // No more entries;
      dents_pos = ~0U;
      break;
    }

    // Hide "." and ".." special entries.
    if (dents_ptr->d_name[0] == '.'
        && (dents_ptr->d_name[1] == 0
            || (dents_ptr->d_name[1] == '.'
                && dents_ptr->d_name[2] == 0))) {
      next_dent();
      continue;
    }

    // Strip type suffix
    size_t len = strlen(dents_ptr->d_name);
    int filetype = -1;
    if (len > 4 && dents_ptr->d_name[len - 4] == ',') {
      len -= 4;
      if (META) filetype = strtoul(dents_ptr->d_name + len + 1, 0, 16);
    }

    // Check if enough output space left.
    unsigned entry_length = SIZEOF_ENTRY(len);
    if (entry_length > space) break;

#if META
    // Read metadata.
    int fd = ix_openat(dir_fd, dents_ptr->d_name, ix_O_PATH, 0);
    char proc[24];
    sprintf(proc, "/proc/self/fd/%i", fd);
    read_meta(out, proc, filetype);
    ix_close(fd);
    char *out_name = out->name;
#else
    char *out_name = out;
#endif

    // Copy name
    size_t i;
    for(i = 0; i != len; i++) {
      char c = dents_ptr->d_name[i];
      if (c == '.') c = '/';
      out_name[i] = c;
    }
    out_name[i] = 0;

    out = (OUT_TYPE *)((char *)out + entry_length);
    space -= entry_length;
    next_dent();
    count--;
    read++;
  }
  r->r[3] = read;
  r->r[4] = dents_pos;
  return 0;
}

#undef FSEntry_Func_READ
#undef OUT_TYPE
#undef SIZEOF_ENTRY
#undef META
