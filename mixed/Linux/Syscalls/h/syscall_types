/*
 * Copyright (c) 2013-2017, Timothy Baldwin
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */

typedef int pid_t;
typedef int timer_t;
typedef int clockid_t;
typedef int mode_t;
typedef long long off64_t;
typedef long off_t;

struct iovec;
struct itimerspec;
struct msghdr;
struct rlimit;
struct sigaltstack;
struct stat;
struct timespec;
struct ucontext;
struct __user_cap_data_struct;
struct __user_cap_header_struct;
struct pollfd;

typedef int ix_pid_t;
typedef int ix_timer_t;
typedef int ix_clockid_t;
typedef int ix_mode_t;
typedef long long ix_off64_t;
typedef long ix_off_t;

struct ix_sock_filter {
  uint16_t code;
  uint8_t jt, jf;
  uint32_t k;
};

struct ix_sock_fprog {
  unsigned short len;
  struct ix_sock_filter *filter;
};

typedef unsigned char	ix_cc_t;
typedef unsigned int	ix_speed_t;
typedef unsigned int	ix_tcflag_t;

#define ix_NCCS 19
struct ix_termios {
	ix_tcflag_t c_iflag;		/* input mode flags */
	ix_tcflag_t c_oflag;		/* output mode flags */
	ix_tcflag_t c_cflag;		/* control mode flags */
	ix_tcflag_t c_lflag;		/* local mode flags */
	ix_cc_t c_line;			/* line discipline */
	ix_cc_t c_cc[ix_NCCS];		/* control characters */
};

typedef uint64_t ix_sigset_t;
typedef int ix_sigval_t;

typedef struct ix_sigaltstack {
	void *ss_sp;
	int ss_flags;
	size_t ss_size;
} ix_stack_t;

typedef struct ix_siginfo {
	int si_signo;
	int si_errno;
	int si_code;

	union {
		char _pad[128 - 12];

		/* kill() */
		struct {
			int pid;
			int uid;
		} kill;

		/* POSIX.1b timers */
		struct {
			int tid;
			int overrun;
			ix_sigval_t sigval;
		} timer;

		/* POSIX.1b signals */
		struct {
			int pid;
			int uid;
			ix_sigval_t sigval;
		} rt;

		/* SIGCHLD */
		struct {
			int pid;
			int uid;
			int status;
			int utime;
			int stime;
		} sigchld;

		/* SIGILL, SIGFPE, SIGSEGV, SIGBUS */
		struct {
			void *addr; /* faulting insn/memory ref. */
#ifdef __ARCH_SI_TRAPNO
			int trapno;	/* TRAP # which caused the signal */
#endif
			short addr_lsb; /* LSB of the reported address */
			union {
				/* used when si_code=SEGV_BNDERR */
				struct {
					void *_lower;
					void *_upper;
				} addr_bnd;
				/* used when si_code=SEGV_PKUERR */
				uint32_t pkey;
			} u;
		} sigfault;

		/* SIGPOLL */
		struct {
			int band;	/* POLL_IN, POLL_OUT, POLL_MSG */
			int fd;
			int fd_bad;
		} sigpoll;

		/* SIGSYS */
		struct {
			void *call_addr; /* calling user insn */
			int syscall;	/* triggering system call number */
			unsigned int arch;	/* AUDIT_ARCH_* of syscall */
		} sigsys;
	} u;
} ix_siginfo_t;

struct ix_sigcontext {
	unsigned long trap_no;
	unsigned long error_code;
	unsigned long oldmask;
	unsigned long arm_r0;
	unsigned long arm_r1;
	unsigned long arm_r2;
	unsigned long arm_r3;
	unsigned long arm_r4;
	unsigned long arm_r5;
	unsigned long arm_r6;
	unsigned long arm_r7;
	unsigned long arm_r8;
	unsigned long arm_r9;
	unsigned long arm_r10;
	unsigned long arm_fp;
	unsigned long arm_ip;
	unsigned long arm_sp;
	unsigned long arm_lr;
	unsigned long arm_pc;
	unsigned long arm_cpsr;
	unsigned long fault_address;
};

struct ix_ucontext {
	unsigned long	  uc_flags;
	struct ix_ucontext  *uc_link;
	ix_stack_t		  uc_stack;
	struct ix_sigcontext uc_mcontext;
	ix_sigset_t	  uc_sigmask;
};

typedef void ix_signal_handler(int, ix_siginfo_t*, struct ix_ucontext*);

struct ix_sigaction {
  ix_signal_handler* sigaction;
  uint32_t flags;
  void (*restorer)(void);
  ix_sigset_t mask;
};

struct ix_signalfd_siginfo {
	uint32_t ssi_signo;
	int32_t ssi_errno;
	int32_t ssi_code;
	uint32_t ssi_pid;
	uint32_t ssi_uid;
	int32_t ssi_fd;
	uint32_t ssi_tid;
	uint32_t ssi_band;
	uint32_t ssi_overrun;
	uint32_t ssi_trapno;
	int32_t ssi_status;
	int32_t ssi_int;
	uint64_t ssi_ptr;
	uint64_t ssi_utime;
	uint64_t ssi_stime;
	uint64_t ssi_addr;
	uint16_t ssi_addr_lsb;
	uint8_t pad[46];
};

typedef struct ix_sigevent {
	ix_sigval_t sigev_value;
	int sigev_signo;
	int sigev_notify;
	int thread;
	uint8_t pad[64 - 16];
} ix_sigevent_t;


struct ix_timespec {
	long	tv_sec;			/* seconds */
	long		tv_nsec;		/* nanoseconds */
};

struct ix_itimerspec {
	struct ix_timespec it_interval;	/* timer period */
	struct ix_timespec it_value;	/* timer expiration */
};

struct ix_iovec {
  void *iov_base;
  size_t iov_len;
};

struct ix_msghdr {
  void *msg_name;
  size_t msg_namelen;
  struct ix_iovec *msg_iov;
  size_t msg_iovlen;
  void *msg_control;
  size_t msg_controllen;
  int msg_flags;
};

struct ix_stat {
	unsigned long  st_dev;
	unsigned long  st_ino;
	unsigned short st_mode;
	unsigned short st_nlink;
	unsigned short st_uid;
	unsigned short st_gid;
	unsigned long  st_rdev;
	unsigned long  st_size;
	unsigned long  st_blksize;
	unsigned long  st_blocks;
	unsigned long  st_atime;
	unsigned long  st_atime_nsec;
	unsigned long  st_mtime;
	unsigned long  st_mtime_nsec;
	unsigned long  st_ctime;
	unsigned long  st_ctime_nsec;
	unsigned long  pad[2];
};
