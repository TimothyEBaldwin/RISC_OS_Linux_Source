/*
 * Copyright (c) 2013-2017, Timothy Baldwin
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */

typedef int ix_pid_t;
typedef int ix_timer_t;
typedef int ix_clockid_t;
typedef int ix_mode_t;
typedef long long ix_off64_t;
typedef long ix_off_t;
typedef size_t ix_socklen_t;

struct ix_sock_filter {
  uint16_t code;
  uint8_t jt, jf;
  uint32_t k;
};

struct ix_sock_fprog {
  unsigned short len;
  struct ix_sock_filter *filter;
};

typedef unsigned char ix_cc_t;
typedef unsigned int  ix_speed_t;
typedef unsigned int  ix_tcflag_t;

#define ix_NCCS 19
struct ix_termios {
  ix_tcflag_t c_iflag;
  ix_tcflag_t c_oflag;
  ix_tcflag_t c_cflag;
  ix_tcflag_t c_lflag;
  ix_cc_t c_line;
  ix_cc_t c_cc[ix_NCCS];
};

typedef uint64_t ix_sigset_t;
typedef int ix_sigval_t;

typedef struct ix_sigaltstack {
  void *ss_sp;
  int ss_flags;
  size_t ss_size;
} ix_stack_t;

typedef struct ix_siginfo {
  int si_signo;
  int si_errno;
  int si_code;

  union {
    char _pad[128 - 12];

    struct {
      int pid;
      int uid;
    } kill;

    struct {
      int tid;
      int overrun;
      ix_sigval_t sigval;
    } timer;

    struct {
      int pid;
      int uid;
      ix_sigval_t sigval;
    } rt;

    struct {
      int pid;
      int uid;
      int status;
      int utime;
      int stime;
    } sigchld;

    struct {
      void *addr;
      short addr_lsb;
      union {
        struct {
          void *_lower;
          void *_upper;
        } addr_bnd;
        uint32_t pkey;
      } u;
    } sigfault;

    struct {
      int band;
      int fd;
      int fd_bad;
    } sigpoll;

    struct {
      void *call_addr;
      int syscall;
      unsigned int arch;
    } sigsys;
  } u;
} ix_siginfo_t;

struct ix_sigcontext {
  uint32_t  trap_no;
  uint32_t  error_code;
  uint32_t  oldmask;
  uint32_t  arm_r0;
  uint32_t  arm_r1;
  uint32_t  arm_r2;
  uint32_t  arm_r3;
  uint32_t  arm_r4;
  uint32_t  arm_r5;
  uint32_t  arm_r6;
  uint32_t  arm_r7;
  uint32_t  arm_r8;
  uint32_t  arm_r9;
  uint32_t  arm_r10;
  uint32_t  arm_fp;
  uint32_t  arm_ip;
  uint32_t  arm_sp;
  uint32_t  arm_lr;
  uint32_t  arm_pc;
  uint32_t  arm_cpsr;
  uint32_t  fault_address;
};

struct ix_ucontext {
  unsigned long        uc_flags;
  struct ix_ucontext  *uc_link;
  ix_stack_t           uc_stack;
  struct ix_sigcontext uc_mcontext;
  ix_sigset_t          uc_sigmask;
};

typedef void ix_signal_handler(int, ix_siginfo_t*, struct ix_ucontext*);

struct ix_sigaction {
  ix_signal_handler* sigaction;
  uint32_t flags;
  void (*restorer)(void);
  ix_sigset_t mask;
};

struct ix_signalfd_siginfo {
  uint32_t ssi_signo;
  int32_t ssi_errno;
  int32_t ssi_code;
  uint32_t ssi_pid;
  uint32_t ssi_uid;
  int32_t ssi_fd;
  uint32_t ssi_tid;
  uint32_t ssi_band;
  uint32_t ssi_overrun;
  uint32_t ssi_trapno;
  int32_t ssi_status;
  int32_t ssi_int;
  uint64_t ssi_ptr;
  uint64_t ssi_utime;
  uint64_t ssi_stime;
  uint64_t ssi_addr;
  uint16_t ssi_addr_lsb;
  uint8_t pad[46];
};

typedef struct ix_sigevent {
  ix_sigval_t sigev_value;
  int sigev_signo;
  int sigev_notify;
  int thread;
  uint8_t pad[64 - 16];
} ix_sigevent_t;


struct ix_timeval {
  uint32_t tv_sec;
  uint32_t tv_usec;
};

struct ix_timespec {
  uint32_t tv_sec;
  uint32_t tv_nsec;
};

struct ix_itimerspec {
  struct ix_timespec it_interval;
  struct ix_timespec it_value;
};

struct ix_iovec {
  void *iov_base;
  size_t iov_len;
};

struct ix_msghdr {
  void *msg_name;
  size_t msg_namelen;
  struct ix_iovec *msg_iov;
  size_t msg_iovlen;
  void *msg_control;
  size_t msg_controllen;
  int msg_flags;
};

/* Structure used for storage of ancillary data object information.  */
struct ix_cmsghdr_fd {
  size_t cmsg_len;
  int cmsg_level;
  int cmsg_type;
  int fd;
};

struct ix_stat {
  uint64_t st_dev;
  uint64_t pad1;
  uint32_t st_mode;
  uint32_t st_nlink;
  uint32_t st_uid;
  uint32_t st_gid;
  uint64_t st_rdev;
  uint64_t pad2;
  uint64_t st_size;
  uint32_t st_blksize;
  uint32_t pad3;
  uint64_t st_blocks;
  uint32_t st_atime;
  uint32_t st_atime_nsec;
  uint32_t st_mtime;
  uint32_t st_mtime_nsec;
  uint32_t st_ctime;
  uint32_t st_ctime_nsec;
  uint64_t st_ino;
};

#define ix_S_ISBLK(m)   (((m) & ix_S_IFMT) == ix_S_IFBLK)
#define ix_S_ISCHR(m)   (((m) & ix_S_IFMT) == ix_S_IFCHR)
#define ix_S_ISDIR(m)   (((m) & ix_S_IFMT) == ix_S_IFDIR)
#define ix_S_ISFIFO(m)  (((m) & ix_S_IFMT) == ix_S_IFIFO)
#define ix_S_ISLNK(m)   (((m) & ix_S_IFMT) == ix_S_IFLNK)
#define ix_S_ISREG(m)   (((m) & ix_S_IFMT) == ix_S_IFREG)
#define ix_S_ISSOCK(m)  (((m) & ix_S_IFMT) == ix_S_IFSOCK)
