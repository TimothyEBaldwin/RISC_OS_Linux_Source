#!/usr/bin/perl
print <<'END';
/*
 * Copyright (c) 2013-2016, Timothy Baldwin
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */
END

sub sys {
  my ($type, $name, $args, $scno) = @_;
  my $suffix = "";
  $scno = "__NR_" . $name unless defined $scno;
  my @argsl = split(/,/, $args);
  $args =~ s/LARGE //;
  $args =~ s/SMALL //;

  print "static inline ${type} ix_${name}${suffix}(${args}) {\n";

  if ($type ne "void") {
    print "  ${type} result;\n";
  }

  if ($args ne "void") {
    foreach (@argsl) {
      if (/LARGE/) {
        my ($var) = /.*\s[^\s\w]*(\w*)\s*/;
        print "  unsigned ${var}_lo = (unsigned)(${var});\n";
        print "  unsigned ${var}_hi = (unsigned)(((unsigned long long)${var}) >> 32);\n";
      }
    }
  }

  print "  __asm {\n";

  my $i = 0, $input = "R7";
  if ($args ne "void") {
    foreach (@argsl) {
      my ($var) = /.*\s[^\s\w]*(\w*)\s*/;
      if (/LARGE/) {
        $i = ($i + 1) & 14;
        print "        MOV     R${i}, ${var}_lo\n";
        $input = "${input}, R${i}";
        ++$i;
        print "        MOV     R${i}, ${var}_hi\n";
      } elsif (/SMALL/) {
        $i = ($i + 1) & 14;
        print "        MOV     R${i}, ${var}\n";
        $input = "${input}, R${i}";
        ++$i;
        print "        MOV     R${i}, #0\n";
      } else {
        print "        MOV     R${i}, ${var}\n";
      }
      $input = "${input}, R${i}";
      ++$i;
    }
  }
  print "        MOV     R7, #${scno}\n";
  print "        ix_SYSCALL(${input})\n";
  if ($type eq "void") {
    print "  }\n";
  } else {
    print "        MOV     result, R0\n";
    print "  }\n";
    print "  return result;\n";
  }
  print "}\n\n";

}

print <<'END';

// This macro is required by Linux header files.
#define __signed__ signed

#ifdef ix_SYSCALL_branch
#define ix_SYSCALL(...) BL __PVirt_syscall, {__VA_ARGS__}, {R0}, {lr}
#else
#define ix_SYSCALL(...) SWI 0xC0200, {__VA_ARGS__}, {R0}, {lr, psr}
#endif

#include <stddef.h>
#include <stdint.h>

#include "syscall_defs.h"
#include "syscall_types.h"

static inline uint64_t time_unix2ro(uint32_t seconds, uint32_t nanoseconds) {
  return (seconds + 25567ULL * 24 * 3600) * 100 + nanoseconds / 10000000;
}

static inline void time_ro2unix(uint64_t t, long *seconds, long *nanoseconds) {
  *seconds = t / 100 - 25567ULL * 24 * 3600;
  *nanoseconds = (t % 100) * 10000000;
}

#define UTIME_NOW  ((1l << 30) - 1l)
#define UTIME_OMIT ((1l << 30) - 2l)

extern void __PVirt_syscall(void);

END

# Process state
sys "int",    "cacheflush",       "void *start, void *end, int flags", "__ARM_NR_cacheflush";
sys "int",    "capget",           "struct __user_cap_header_struct *hdrp, struct __user_cap_header_struct *datap";
sys "int",    "capset",           "struct __user_cap_header_struct *hdrp, const struct __user_cap_header_struct *datap";
sys "void",   "exit",             "int status";
sys "int",    "fork",             "void";
sys "int",    "getpid",           "void";
sys "int",    "getppid",          "void";
sys "int",    "getrlimit",        "int resource, struct rlimit *rlim", "__NR_ugetrlimit";
sys "int",    "gettid",           "void";
sys "int",    "kill",             "int pid, int signal";
sys "void *", "mmap2",            "void *addr, size_t length, int prot, int flags, int fd, off_t offset";
sys "int",    "nanosleep",        "const struct ix_timespec *req, struct ix_timespec *rem";
sys "int",    "personality",      "unsigned long persona";
sys "int",    "prctl",            "int option, unsigned long arg2, unsigned long arg3, unsigned long arg4, unsigned long arg5";
sys "long",   "ptrace",           "int request, pid_t pid, void *addr, int data";
sys "int",    "rt_sigaction",     "int signal, const struct ix_sigaction *act, struct ix_sigaction *oldact, int mask_size";
sys "int",    "rt_sigprocmask",   "int how, const uint64_t *set, uint64_t *oldset, int mask_size";
sys "int",    "setrlimit",        "int resource, const struct rlimit *rlim";
sys "void",   "set_tls",          "void *tls", "__ARM_NR_set_tls";
sys "int",    "signalfd",         "int fd, const uint64_t *mask, int flags";
sys "int",    "sigaltstack",      "const struct ix_sigaltstack *ss, struct ix_sigaltstack *oss";
sys "int",    "tgkill",           "int tgid, int tid, int signal";
sys "int",    "wait4",            "int pid, int *status, int options, struct rusage *rusage";

# File Handling
sys "int",    "access",           "const char *path, int mode";
sys "int",    "chdir",            "const char *path";
sys "int",    "close",            "int fd";
sys "int",    "dup2",             "int oldfd, int newfd";
sys "int",    "dup3",             "int oldfd, int newfd, int flags";
sys "int",    "fchdir",           "int fd";
sys "int",    "fcntl",            "int fd, int cmd, unsigned arg";
sys "int",    "fstat",            "int fd, struct ix_stat *buf";
sys "int",    "fsync",            "int fd";
sys "int",    "ftruncate",        "int fd, off_t length";
sys "int",    "getdents",         "int fd, void *dirp, unsigned size";
sys "int",    "ioctl",            "int fd, int request, void *v";
sys "int",    "lseek",            "int fd, off_t offset, unsigned int whence";
sys "int",    "lstat",            "const char *path, struct stat *buf";
sys "int",    "memfd_create",     "const char *path, int flags";
sys "int",    "mkdir",            "const char *path, mode_t mode";
sys "int",    "openat",           "int dirfd, const char *path, int flags, mode_t mode";
sys "int",    "open",             "const char *path, int flags, mode_t mode";
sys "int",    "poll",             "struct pollfd *fds, int nfds, int timeout";
sys "int",    "pread64",          "int fd, void *buf, size_t count, LARGE off64_t offset";
sys "int",    "pread",            "int fd, void *buf, size_t count, SMALL off_t offset", "__NR_pread64";
sys "int",    "pwrite64",         "int fd, const void *buf, size_t count, LARGE off64_t offset";
sys "int",    "pwrite",           "int fd, const void *buf, size_t count, SMALL off_t offset", "__NR_pwrite64";
sys "int",    "read",             "int fd, void *buf, size_t count";
sys "int",    "recv",             "int fd, void *buf, size_t count, int flags";
sys "int",    "rename",           "const char *oldpath, const char *newpath";
sys "int",    "rmdir",            "const char *path";
sys "int",    "sendmsg",          "int fd, const struct ix_msghdr *msg, int flags";
sys "int",    "stat",             "const char *path, struct ix_stat *buf";
sys "void",   "sync",             "void";
sys "int",    "unlink",           "const char *path";
sys "int",    "utimensat",        "int dirfd, const char *path, const struct ix_timespec *times, int flags";
sys "int",    "write",            "int fd, const void *buf, size_t count";
sys "int",    "writev",           "int fd, const struct ix_iovec *iov, int iovcnt";

# Extended Attributes
sys "int",    "fsetxattr",        "int fd, const char *name, const void *value, size_t size, int flags";
sys "int",    "fgetxattr",        "int fd, const char *name, void *value, size_t size";
sys "int",    "setxattr",         "const char *path, const char *name, const void *value, size_t size, int flags";
sys "int",    "getxattr",         "const char *path, const char *name, void *value, size_t size";
sys "int",    "lsetxattr",        "const char *path, const char *name, const void *value, size_t size, int flags";
sys "int",    "lgetxattr",        "const char *path, const char *name, void *value, size_t size";

# Time
sys "int",    "clock_getres",     "clockid_t clk_id, struct ix_timespec *res";
sys "int",    "clock_gettime",    "clockid_t clk_id, struct ix_timespec *res";
sys "int",    "clock_nanosleep",  "clockid_t clock_id, int flags, const struct ix_timespec *request, struct ix_timespec *remain";
sys "int",    "timer_create",     "clockid_t clockid, struct ix_sigevent *evp, timer_t *timerid";
sys "int",    "timer_delete",     "timer_t timerid";
sys "int",    "timer_getoverrun", "timer_t timerid";
sys "int",    "timer_gettime",    "timer_t timerid, struct ix_itimerspec *curr_value";
sys "int",    "timer_settime",    "timer_t timerid, int flags, const struct ix_itimerspec *new_value, struct ix_itimerspec * old_value";
sys "int",    "timerfd_create",   "clockid_t clockid, int flags";
sys "int",    "timerfd_gettime",  "int fd, struct ix_itimerspec *curr_value";
sys "int",    "timerfd_settime",  "int fd, int flags, const struct ix_itimerspec *new_value, struct ix_itimerspec * old_value";


print <<'END';

static inline int ix_sigaction(int signal, const struct ix_sigaction *act, struct ix_sigaction *oldact) {
  return ix_rt_sigaction(signal, act, oldact, sizeof(act->mask));
}

static inline int ix_sigprocmask(int how, const uint64_t *set, uint64_t *oldset) {
  return ix_rt_sigprocmask(how, set, oldset, sizeof(*oldset));
}

static inline int ix_waitpid(int pid, int *status, int options) {
  return ix_wait4(pid, status, options, (void *)0);
}

static inline int ix_wait(int *status) {
  return ix_wait4(-1, status, 0, (void *)0);
}

static inline int ix_raise(int signal) {
  return ix_tgkill(ix_getpid(), ix_gettid(), signal);
}

static inline int ix_futimens(int fd, const struct ix_timespec *times) {
  return ix_utimensat(fd, 0, times, 0);
}

static inline void * ix_mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset) {
  return ix_mmap2(addr, length, prot, flags, fd, offset / 0x1000);
}



#define ix_fcntl(fd, cmd, arg) ((ix_fcntl)(fd, cmd, (unsigned)(arg)))

// Print an immediate message, like "Hello World"
#define ix_MESSAGE(FD, S) ix_write((FD), (S), sizeof(S) - 1)
END
