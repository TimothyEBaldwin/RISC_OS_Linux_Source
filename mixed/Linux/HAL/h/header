/*
 * Copyright (c) 2013, Timothy Baldwin
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */

#include <stdint.h>
#include <stdbool.h>
#include <Global/OSEntries.h>
#include <Global/HALEntries.h>
#include <Global/HALDevice.h>

#define TIMER_SIGNAL (40)
#define IO_SIGNAL (41)

#define TIMERS 32
#define TIMER_GRANULARITY 1000U

#define SIGNAL_IRQ_BASE (512)
#define TIMER_IRQ_BASE (SIGNAL_IRQ_BASE + 64)
#define IRQS (TIMER_IRQ_BASE + TIMERS)


typedef unsigned (__kuser_cmpxchg_t)(unsigned oldval, unsigned newval, volatile unsigned *ptr);
#define __kuser_cmpxchg (*(__kuser_cmpxchg_t *)0xffff0fc0)

typedef void * (__kuser_get_tls_t)(void);
#define __kuser_get_tls (*(__kuser_get_tls_t *)0xffff0fe0)

// FIXME Provide ARMv6 version
static inline unsigned atomic_fetch_or(volatile unsigned *p, unsigned v) {
  unsigned old;
  do {
    old = *p;
  } while (__kuser_cmpxchg(old, old | v, p));
  return old;
}

// FIXME Provide ARMv6 version
static inline unsigned atomic_fetch_and(volatile unsigned *p, unsigned v) {
  unsigned old;
  do {
    old = *p;
  } while (__kuser_cmpxchg(old, old & v, p));
  return old;
}


#define VBITS 0xCF

struct vmode {
  volatile unsigned r13, r14, spsr;
};

struct vcpu {
  unsigned reserved[2];
  unsigned *vectors;
  volatile uint8_t irq_pending, cpsr, pad1, pad2;
  struct vmode SVC, USR, IRQ, FIQ, UND, ABT;
  void *dfar;
};

typedef void (*RISCOS_Start_t)(unsigned int flags, OSHdr *riscos_header, void *hal_descriptor, void *ref);
typedef void *(*RISCOS_MapInIO_t)(unsigned int flags, void *phys, unsigned int size);

typedef void (*RISCOS_AddDevice_t)(uint32_t flags, struct device *d);
typedef uint32_t (*RISCOS_LogToPhys_t)(const void *log);
//typedef int (*RISCOS_IICOpV_t)(iic_transfer *descs, int ndesc_and_bus);
typedef void *(*RISCOS_AccessPhysicalAddress_t)(unsigned int flags, void *phys, void **oldp);
typedef void (*RISCOS_ReleasePhysicalAddress_t)(void *old);

extern uint8_t __PVirt_VModeOffsets[];
extern struct vcpu init_vcpu;
extern uint32_t SetCPSR_Start, SetCPSR_Restart, SetCPSR_End;
extern uint32_t HAL_Header;

extern void signal_exit(void);
extern void test_pvirt(void);
extern void signal_return(void);
extern void call_irq(struct vcpu*);
extern int start_ptrace(void);
extern void ptrace_swi_jump(void);
extern int HAL_IRQSource(void);
extern int HAL_IRQEnable(int device);
extern void SWI_handler(int signal, ix_siginfo_t *info, struct ix_ucontext *ucontext);
