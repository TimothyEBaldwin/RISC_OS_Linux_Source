/*
 * Copyright (c) 2013, Timothy Baldwin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "exports.h"
#include "Global/OSEntries.h"
#include "Global/HALEntries.h"
#include "Global/HALDevice.h"

#define TIMER_SIGNAL (40)
#define IO_SIGNAL (41)

#define TIMERS 32
#define TIMER_GRANULARITY 1000U

#define SIGNAL_IRQ_BASE (512)
#define TIMER_IRQ_BASE (SIGNAL_IRQ_BASE + 64)
#define IRQS (TIMER_IRQ_BASE + TIMERS)


typedef unsigned (__kuser_cmpxchg_t)(unsigned oldval, unsigned newval, volatile unsigned *ptr);
#define __kuser_cmpxchg (*(__kuser_cmpxchg_t *)0xffff0fc0)

typedef void * (__kuser_get_tls_t)(void);
#define __kuser_get_tls (*(__kuser_get_tls_t *)0xffff0fe0)

// FIXME Provide ARMv6 version
static inline unsigned atomic_fetch_or(volatile unsigned *p, unsigned v) {
  unsigned old;
  do {
    old = *p;
  } while (__kuser_cmpxchg(old, old | v, p));
  return old;
}

// FIXME Provide ARMv6 version
static inline unsigned atomic_fetch_and(volatile unsigned *p, unsigned v) {
  unsigned old;
  do {
    old = *p;
  } while (__kuser_cmpxchg(old, old & v, p));
  return old;
}

struct vmode {
  volatile unsigned r13, r14, spsr;
};

struct vcpu {
  unsigned reserved[2];
  unsigned *vectors;
  volatile uint8_t irq_pending, cpsr, pad1, pad2;
  struct vmode SVC, USR, IRQ, FIQ, UND, ABT;
  void *dfar;
};

typedef void (*RISCOS_Start_t)(unsigned int flags, OSHdr *riscos_header, void *hal_descriptor, void *ref);

extern uint8_t __PVirt_VModeOffsets[];
extern struct vcpu init_vcpu;
extern uint32_t SetCPSR_Start, SetCPSR_Restart, SetCPSR_End;
extern uint32_t HAL_Header;

extern void signal_exit(void);
extern void test_pvirt(void);
extern void signal_return(void);
extern void call_irq(struct vcpu*);
extern void start_ptrace(void);
extern void start_fork_server(void);
extern void ptrace_swi_jump(void);
extern __value_in_regs struct ix_irqinfo  HAL_IRQSource(void);
extern int HAL_IRQEnable(int device);
extern void SWI_handler(int signal, ix_siginfo_t *info, struct ix_ucontext *ucontext);
extern void fast_signal_exit(void *r, unsigned cpsr);
extern void fast_signal_exit2(void *r);
