;
; Copyright (c) 2013, Timothy Baldwin
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met:
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of RISC OS Open Ltd nor the names of its contributors
;       may be used to endorse or promote products derived from this software
;       without specific prior written permission.
;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
; POSSIBILITY OF SUCH DAMAGE.
;

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ImageSize.<ImageSize>
        GET     Hdr:HALSize.<HALSize>
        GET     Hdr:HALEntries
        GET     Hdr:LinuxSyscalls

        AREA |HEAD|, CODE, READONLY

        IMPORT  do_ptrace
        IMPORT  main

        EXPORT  HAL_Header
        EXPORT  __PVirt_syscall
        EXPORT  __main
        EXPORT  __rt_udiv10
        EXPORT  __rt_udiv
        EXPORT  ptrace_swi_jump
        EXPORT  signal_exit
        EXPORT  start_ptrace

image_start
        DCB     &7F, "ELF"
        DCB     1       ; 32 bits
        DCB     1       ; Two's complement, little-endian
        DCB     1       ; ELF Version
        DCB     3       ; Linux ABI
        DCB     0       ; ABI Version
        %       7       ; Unused padding
        DCW     2       ; This is an executable
        DCW     40      ; ARM
        DCD     1       ; EV_CURRENT - Current file version, not invalid.

        DCD     entry                           ; Start address
        DCD     program_headers - image_start   ; Offset to program headers
        DCD     0                               ; Offset to section headers (none)
 [ SupportARMv8
        DCD     0x5000400                       ; Flags - Version5 EABI, hard-float ABI
 |
        DCD     0x80                            ; Flags - uses classic GNU EABI
 ]
        DCW     header_end - image_start        ; Size of ELF header
        DCW     32                              ; Size of program headers
        DCW     4                               ; Number of program headers
        DCW     40                              ; Size of section headers
        DCW     0                               ; Number of section headers
        DCW     0                               ; Section header string table index
header_end

        ; Once set up by the code in hal_run(), only the SWI instruction at
        ;  __PVirt_syscall will execute Linux system calls. SWI instructions
        ; elsewhere will call the RISC OS SWI handler, or a tempoary handler
        ; in this HAL.

signal_exit
        MOV     r7, #__NR_rt_sigreturn
__PVirt_syscall
        SWI     0
null_entry
        MOV     pc, lr

        ENTRY
entry   LDR     r0, [sp]        ; Read argc
        ADD     r1, sp, #4      ; Read argv
        BL      main
        MOV     r7, #__NR_exit
        B       __PVirt_syscall

__main  *       0

program_headers
        DCD     1 ; PT_LOAD
        DCD     0 ; Offset
        DCD     image_start
        DCD     0 ; Physical address unused
        DCD     ro_size ; File size
        DCD     ro_size ; Memory size
        DCD     5 ; Readable and executable
        DCD     16 ; Alignment

        DCD     1 ; PT_LOAD
        DCD     ro_size ; Offset
        DCD     image_start + ro_size
        DCD     0 ; Physical address unused
        DCD     OSROM_HALSize - ro_size; File size
        DCD     OSROM_HALSize - ro_size ; Memory size
        DCD     6 ; Readable and writable
        DCD     16 ; Alignment

        DCD     1 ; PT_LOAD
        DCD     OSROM_HALSize ; Offset
        DCD     image_start + OSROM_HALSize
        DCD     0 ; Physical address unused
        DCD     OSROM_ImageSize * 1024 - OSROM_HALSize ; File size
        DCD     OSROM_ImageSize * 1024 - OSROM_HALSize ; Memory size
        DCD     5 ; Readable and executable
        DCD     16 ; Alignment

        ; This magic program header enables readable and non-executable memory.
        DCD     0x6474e551 ; PT_GNU_STACK
        DCD     0, 0, 0, 0, 0
        DCD     6 ; Readable and writable
        DCD     16 ; Alignment

        GBLA    max
max     SETA    0

        MACRO
        H       $name
        LCLA    t
t       SETA    EntryNo_$name
        GBLS    ent_$t
ent_$t  SETS    "$name"
        IF t > max
max       SETA t
        ENDIF
        MEND

        H       HAL_ControllerAddress
        H       HAL_CounterDelay
        H       HAL_CounterPeriod
        H       HAL_CounterRate
        H       HAL_CounterRead
        H       HAL_DebugRX
        H       HAL_DebugTX
        H       HAL_IICBuses
        H       HAL_IRQClear
        H       HAL_IRQDisable
        H       HAL_IRQEnable
        H       HAL_IRQMax
        H       HAL_IRQSource
        H       HAL_IRQStatus
        H       HAL_KbdScan
        H       HAL_NVMemoryPageSize
        H       HAL_NVMemoryProtectedSize
        H       HAL_NVMemoryRead
        H       HAL_NVMemorySize
        H       HAL_NVMemoryType
        H       HAL_NVMemoryWrite
        H       HAL_PlatformInfo
        H       HAL_Reset
        H       HAL_TimerDevice
        H       HAL_TimerGranularity
        H       HAL_TimerMaxPeriod
        H       HAL_TimerPeriod
        H       HAL_TimerReadCountdown
        H       HAL_TimerSetPeriod

HAL_EntryTable
        GBLA    i
        GBLS    name
i       SETA    0
        WHILE i <= max
          IF :DEF:ent_$i
name        SETS ent_$i
            IMPORT $name
            DCD $name - HAL_EntryTable
          ELSE
            DCD null_entry - HAL_EntryTable
          ENDIF
i         SETA i + 1
        WEND

HAL_Header
        DCD     0
        DCD     image_start - HAL_Header
        DCD     OSROM_HALSize
        DCD     HAL_EntryTable - HAL_Header
        DCD     max + 1
        DCD     0 ; No workspace

start_ptrace
        STMFD   sp!, {r4, r7, lr}
        MOV     r0, #ix_CLONE_VM
        MOV     r1, #0
        MOV     r2, #0
        MOV     r3, #0
        MOV     r4, #0
        LDR     r7, =__NR_clone
        SWI     0
        TEQ     r0, #0
        LDMEQFD sp!, {r4, r7, pc} ; Return if child.
        LDMMIFD sp!, {r4, r7, pc} ; Return on failure.
        LDR     sp, =ptrace_stack
        B       do_ptrace         ; Parent runs ptrace loop

        NOP
ptrace_swi_jump
        LDMFD   sp!, {r0, lr, pc}

__rt_udiv10
        MOV     a2, a1
        MOV     a1, #10
__rt_udiv
        DivRem  a3, a2, a1, ip
        MOV     a1, a3
        MOV     pc, lr

        AREA    Init_Stack, DATA, NOINIT
        %       64 * 4
ptrace_stack

        END
