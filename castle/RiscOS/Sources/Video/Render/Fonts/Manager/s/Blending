; This source code in this file is licensed to You by Castle Technology
; Limited ("Castle") and its licensors on contractual terms and conditions
; ("Licence") which entitle you freely to modify and/or to distribute this
; source code subject to Your compliance with the terms of the Licence.
; 
; This source code has been made available to You without any warranties
; whatsoever. Consequently, Your use, modification and distribution of this
; source code is entirely at Your own risk and neither Castle, its licensors
; nor any other person who has contributed to this source code shall be
; liable to You for any loss or damage which You may suffer as a result of
; Your use, modification or distribution of this source code.
; 
; Full details of Your rights and obligations are set out in the Licence.
; You should have received a copy of the Licence with this source code file.
; If You have not received a copy, the text of the Licence is available
; online at www.castle-technology.co.uk/riscosbaselicence.htm
; 
; > s.Blending

	GET 	hdr:ITable

; ------------------------------------------------------------------------------
; Blending macro, performs the grunt work of scaling a component by the alpha value.
; ------------------------------------------------------------------------------

;   $mask	=> mask for component within src/destination
;   $destData	=> background colour data
;   $alphaDst	=> alpha value 0-16 for amount of destination to be copied
;   $srcData	=> source colour data
;   $alphaSrc	=> alpha value 0-16 for amount of source to be copied
;   $shift	=> shift value for dealing with high bit guns.
; Assume alphaDst+alphaSrc <= 16
; Corrupts R2, R3

	MACRO
$l	Blend	$mask, $destData, $alphaDst, $srcData, $alphaSrc, $shift
        ASSERT  ("$shift" <> "") :LOR: (($mask :AND: &F0000000)=0)
$l
 [ NoARMT2
     [ ("$shift"="") :LOR: (($mask :AND: &80000000)<>0)
	ANDS	R2, $destData, # $mask
      [ "$shift"<>""
	MOVS	R2, R2, LSR # $shift
      ]
     |
	MOVS	R2, $destData, LSR # $shift
     ]
	MULNE	R2, $alphaDst, R2

      [ "$shift"=""
	ANDS	R3, $srcData, # $mask
      |
	MOVS	R3, $srcData, LSR # $shift
      ]
	MLANE	R2, $alphaSrc, R3, R2

      [ "$shift"=""
	BIC	$destData, $destData, #$mask
	AND	R2, R2, #$mask:SHL:4
	ORR	$destData, $destData, R2, LSR #4
      |
	ASSERT	$shift >= 4
	BIC	$destData, $destData, # $mask
	AND	R2, R2, #$mask:SHR:($shift-4)
	ORR	$destData, $destData, R2, LSL # $shift-4
      ]
 |
        ; Find which bits we're interested in
        LCLA    shift
        LCLA    count
shift   SETA    0
count   SETA    1
        WHILE   ($mask:AND:(1:SHL:shift)) = 0
shift   SETA    shift+1
        WEND
        WHILE   ((shift+count)<32) :LAND: (($mask:AND:(1:SHL:(shift+count))) <> 0)
count   SETA    count+1
        WEND
        ; Now use UBFX/BFI to extract/insert those bits
        UBFX    R2, $destData, #shift, #count
        MUL     R2, $alphaDst, R2
        UBFX    R3, $srcData, #shift, #count
        MLA     R2, $alphaSrc, R3, R2
        MOV     R2, R2, LSR #4
        BFI     $destData, R2, #shift, #count
 ]
	MEND

; Check if plottype has changed since last setblendingdata, and if so,
; mark as invalid
checkblend
        Entry   "R0"
        LDR     R0, plottype
        LDR     LR, blend_plottype
        EOR     R0,R0,LR
      [ blendingOn
        TST     R0, #paint_blendsupr
      |
        TST     R0, #paint_blended:OR:paint_blendsupr
      ]
        EXIT    EQ
        LDRB    LR, setoutputdataflag
        ORR     LR, LR, #setout_badblending
        STRB    LR, setoutputdataflag
        EXIT

; ------------------------------------------------------------------------------
; Prime the blending engine ready to do its work, first we validate our state:
;
;	- is the mode supported
;	- has the client asked for blending to be performed
;	- do we have cached blending information
;
; Assuming that the above is passed then we prepare the pixel writing vectors
; and compute suitable table data which we can use when painting the character
; data onto the screen.
;
; Several routines are used depending on the output mode and paint_blendsupr
; flag:
;
; - 8bpp modes go via a routine that uses InverseTable to convert to 15bpp and
;   back
; - 16bpp 1555 and 16bpp 565 only have normal blending
; - 16bpp 4444 and 32bpp 8888 have three routines: normal, supremacy, and alpha
; - red/blue swapping in true-colour modes is handled by swapping blend_fgvalue
; - alpha/transparency mode of screen is irrelevant for normal blending;
;   existing alpha/transparency of screen pixel is preserved
;
; ------------------------------------------------------------------------------

setblendingdata EntryS "R0-R3,R10"

        LDR     R0, plottype                            ; has client requested background blending?
        STR     R0, blend_plottype
      [ :LNOT: blendingOn
        TST     R0, #paint_blended
        BEQ     %FT80
      ]

        LDR     R10, log2bpp                            ; log2 depth of output device
        CMP     R10, #5                                 ;   if > 32 bit per pixel then ignore
        BGT     %FT80
        ADDEQ   R10, R10, #2                            ; skip the 16bpp entries

        SUBS    R10, R10, #3                            ; convert to a valid index
        BMI     %FT80                                   ;   and if < 8 bit per pixel then ignore

        CMP     R10, #1
        LDR     R2, modeflags
        BNE     %FT10
        LDR     R3, ncolour
        TST     R2, #ModeFlag_64k
        MOVNE   R10, #2
        CMP     R3, #4096
        MOVLT   R10, #3
10
        ADR     R3, blend_table                         ; get pointer to blending functions for the depth
        ADD     R10, R3, R10, LSL #5                    ;   index via the depth offset
        ADD     R1, R10, #8
        TST     R0, #paint_blendsupr                    ; supremacy blending?
        ADDNE   R1, R1, #8
        TSTNE   R2, #ModeFlag_DataFormatSub_Alpha       ; alpha blending?
        ADDNE   R1, R1, #8

        LDMIA   R10, {R0, R10}                          ; get alpha table, conversion function
        ADD     LR, R0, R3
        ADD     R10, R10, R3
        LDMIA   R1, {R0, R1}                            ; get blending functions
        CMP     R0, #0
        BEQ     %FT96
        ; Use the right variant for 32bpp with alpha
        CMP     R0, #blend_convert_32bpp - blend_table
        BNE     %FT20
        TST     R2, #ModeFlag_DataFormatSub_Alpha
        ADDNE   R0, R0, #blend_putdata_32bppA - blend_putdata_32bpp
20
        ADD     R0, R0, R3
        ADD     R1, R1, R3
        ADRL    R3, blend_putdata
        STMIA   R3, {R0, R1, LR}                        ; store blend functions, alpha table
        
        LDR     R0, currentRGB_f                        ; get the foreground pixel colour
        TST     R2, #ModeFlag_DataFormatSub_RGB
        ANDNE   R2, R0, #&FF0000
        BICNE   R0, R0, #&FF
        ORRNE   R0, R2, R0, ROR #16
      [ NoARMv5
        MOV     LR, PC
        MOV     PC, R10                                 ; convert colour
      |
        BLX     R10                                     ; convert colour
      ]
        STR     R0, blend_fgvalue

        LDRB    R0, currentRGB_f                        ; get the foreground supremacy
        RSB     R0, R0, #255                            ;   convert to alpha
        CMP     R0, #128
        ADDGE   R0, R0, #1                              ;   scale to 0-&100
        STR     R0, blend_fgalpha

        LDRB    LR, bitsperpixel                        ; get the real pixel depth
        TEQ     LR, #8                                  ;   is this 8 bit per pixel?
        BNE     %FT95

        SWI     XInverseTable_Calculate                 ; compute the inverse colour table
        ADRVCL  LR, blend_ctable                        ;   it worked so store the table pointers
        STMVCIA LR, { R0, R1 }
        BVC     %FT95

80
        ADRL    R0, putdata_mono                        ; default pointers for functions etc
        ADRL    R1, putdataM_mono
        ADR     R2, outputdata
        ADRL    R3, blend_putdata                       ; and store the table values away
        STMIA   R3, { R0-R1, R2 }
95
        PExitS

96
        PullEnv
xerr_FontBadSupremacyBlend
        ADR     R0,ErrorBlock_FontBadSupremacyBlend
        B       MyGenerateError
        MakeErrorBlock FontBadSupremacyBlend

; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

; Function tables for performing the blending, along with the alpha tables
; used to convert from cache data into data that the blending functions
; can sensibly cope with.
;
;       +0      -> offset to alpha table
;       +4      -> offset to colour conversion function
;       +8      -> offset to putdata function
;       +12     -> offset to putdataM function
;       +16     -> offset to putdataS function
;       +20     -> offset to putdataSM function
;       +24     -> offset to putdataA function
;       +28     -> offset to putdataAM function

blend_table
        &       alpha_table8 - blend_table              ; 8 bpp
        &       blend_convert_1555 - blend_table
        &       blend_putdata_8bpp - blend_table
        &       blend_putdataM_8bpp - blend_table
        &       0
        &       0
        &       0
        &       0

        &       alpha_table16 - blend_table             ; 16 bpp 1555 blending
        &       blend_convert_1555 - blend_table
        &       blend_putdata_1555 - blend_table
        &       blend_putdataM_1555 - blend_table
        &       0
        &       0
        &       0
        &       0

        &       alpha_table16 - blend_table             ; 16 bpp 565 blending
        &       blend_convert_565 - blend_table
        &       blend_putdata_565 - blend_table
        &       blend_putdataM_565 - blend_table
        &       0
        &       0
        &       0
        &       0

        &       alpha_table16 - blend_table             ; 16 bpp 4444 blending
        &       blend_convert_4444 - blend_table
        &       blend_putdata_4444 - blend_table
        &       blend_putdataM_4444 - blend_table
        &       blend_putdataS_4444 - blend_table
        &       blend_putdataSM_4444 - blend_table
        &       blend_putdataA_4444 - blend_table
        &       blend_putdataAM_4444 - blend_table

        &       alpha_table32 - blend_table             ; 32 bpp blending
        &       blend_convert_32bpp - blend_table
        &       blend_putdata_32bpp - blend_table
        &       blend_putdataM_32bpp - blend_table
        &       blend_putdataS_32bpp - blend_table
        &       blend_putdataSM_32bpp - blend_table
        &       blend_putdataA_32bpp - blend_table
        &       blend_putdataAM_32bpp - blend_table

alpha_table8
	& &00000000, &01000000, &02000000, &03000000, &04000000, &05000000, &06000000, &07000000
	& &09000000, &0A000000, &0B000000, &0C000000, &0D000000, &0E000000, &0F000000, &10000000

alpha_table16
	& &00000000, &00010000, &00020000, &00030000, &00040000, &00050000, &00060000, &00070000
	& &00090000, &000A0000, &000B0000, &000C0000, &000D0000, &000E0000, &000F0000, &00100000

alpha_table32
	& &00000000, &00000100, &00000200, &00000300, &00000400, &00000500, &00000600, &00000700
	& &00000900, &00000A00, &00000B00, &00000C00, &00000D00, &00000E00, &00000F00, &00001000

blend_convert_1555
        ColourConv r0, r0, r1, r2, r3, 0, 5, 5, 5, 10, 5
        ORR     r0, r0, r0, LSL #16
        MOV     pc, lr

blend_convert_565
        ColourConv r0, r0, r1, r2, r3, 0, 5, 5, 6, 11, 5
        ORR     r0, r0, r0, LSL #16
        MOV     pc, lr

blend_convert_4444
        ColourConv r0, r0, r1, r2, r3, 0, 4, 4, 4, 8, 4
        ORR     r0, r0, r0, LSL #16
        MOV     pc, lr

blend_convert_32bpp
        MOV     r0, r0, LSR #8
        MOV     pc, lr

; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

; Output function to cope with outputting no data to the destination buffer,
; resets the flags words and advances the pointer.
;
; out:	outptr += 4
;	outdata = &80000000
;	outmask = &00000000

blend_nodata

	ADD	outptr, outptr, #4			; skip this pixel set
	MOV	outdata, #&80000000			;   and if result is nothing then return
	MOV	outmask, #0

	MOV	PC, LR


; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

; Blending methods for 8 bit per pixel, these are more complicated as we
; must attempt to go from 8 bit index to 15 bit RGB.  Having done this we
; can then perform the blend before returning back to 8 bits again.

blend_putdata_8bpp

	ANDS	outdata, outdata, outmask		; ensure only relevant bits are set
	BEQ	blend_nodata				;   if none set then write out

	Push	"R1-R3, R6-R7, R10-R11, LR"

	ADRL	R1, blend_fgvalue
	LDMIA	R1, { R1, R10, R11 }			; fg, blend_ctable, blend_itable

	LDR	pchar, [ outptr ]			; pick up the background pixel data
	MOV	R6, #4					; number of pixels to process
10
	ANDS	R9, outdata, #&0000001F			; is this pixel set?
	MOVEQ	pchar, pchar, ROR # 8			;   if not then ignore this pixel
	BEQ	%FT20

	AND	R7, pchar, #&000000FF			; get the palette index for this colour
	LDR	R7, [ R10, R7, LSL # 2 ]		;   and convert to 5,5,5 RGB value

	RSB	LR, R9, # 16				; amount of background to be preserved
	Blend 	&0000001f, R7, LR, R1, R9		;   and combine together blended
	Blend 	&000003e0, R7, LR, R1, R9
	Blend	&00007c00, R7, LR, R1, R9

	LDRB	R7, [ R11, R7 ]				; get the new colour number from the 5,5,5 RGB
	MOV	pchar, pchar, LSR #8			;   clear top bits and combine
	ORR	pchar, pchar, R7, LSL # 24
20
	MOV	outdata, outdata, LSR # 8		; move output data down again

	SUBS	R6, R6, #1				; decrease number of pixels to be processed
	BNE	%BT10					;   and keep looping until all done

	STR	pchar, [ outptr ], #4			; write out the new pixel data to the destination

        MOV     outdata, #&80000000              	; set marker bit ready for next set of pixels
        MOV     outmask, #0

	Pull	"R1-R3, R6-R7, R10-R11, PC"

blend_putdataM_8bpp

	ANDS	outdata, outdata, outmask		; ensure only relevant bits are set
	BEQ	blend_nodata				;   if none set then write out

	Push	"outptr, R1-R4, R6-R7, R10-R11, R12, LR"

	ADRL	R1, blend_fgvalue
	LDMIA	R1, { R1, R10, R11 }			; fg, blend_ctable, blend_itable

	LDR	R4, this_ymagcnt			; pick up scaling information
	LDR	R12, linelen				;   line advancement value
05
	LDR	pchar, [ outptr ]			; pick up the background pixel data
	MOV	R6, #4					; number of pixels to process
10
	ANDS	R9, outdata, #&0000001F			; is this pixel set?
	MOVEQ	pchar, pchar, ROR # 8			;   if not then ignore this pixel
	BEQ	%FT20

	AND	R7, pchar, #&000000FF			; get the palette index for this colour
	LDR	R7, [ R10, R7, LSL # 2 ]		;   and convert to 5,5,5 RGB value

	RSB	LR, R9, # 16				; amount of background to be preserved
	Blend 	&0000001f, R7, LR, R1, R9		;   and combine together blended
	Blend 	&000003e0, R7, LR, R1, R9
	Blend	&00007c00, R7, LR, R1, R9

	LDRB	R7, [ R11, R7 ]				; get the new colour number from the 5,5,5 RGB
	MOV	pchar, pchar, LSR #8			;   clear top bits and combine
	ORR	pchar, pchar, R7, LSL # 24
20
	MOV	outdata, outdata, ROR # 8		; move output data down again

	SUBS	R6, R6, #1				; decrease number of pixels to be processed
	BNE	%BT10					;   and keep looping until all done

	STR	pchar, [ outptr ], -R12			; write out the new pixel data to the destination

	SUBS	R4, R4, # 1				; decrease the scaling count
	BNE	%BT05

	Pull	"outptr, R1-R4, R6-R7, R10-R11, R12, LR"
	B	blend_nodata				; reset for end of line, and advance

; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

; Normal blending methods, 16bpp

        MACRO
$l      BlendNormal16  $mask1,$mask2,$mask3,$shift
        AlignCd (Urk):MOD:16
$l
	ANDS	outdata, outdata, outmask		; ensure only relevant bits are set
	BEQ	blend_nodata

	Push	"R1-R3, LR"

	LDR	R1, blend_fgvalue			; foreground painting colour
        LDR     pchar, [ outptr ]			;   and pick up the current background pixel data

	ANDS	R9, outdata, #&0000001F			; what is the intensity of the pixel we want to plot
	BEQ	%FT20					;   if == 0 then nothing therefore skip

	RSB	LR, R9, # 16				; amount of background to be preserved
	Blend 	$mask1, pchar, LR, R1, R9		;   and combine together blended
	Blend 	$mask2, pchar, LR, R1, R9
	Blend	$mask3, pchar, LR, R1, R9
20
	MOVS	outdata, outdata, LSR # 16		; what is the intensity of the pixel we want to plot
	BEQ	%FT30					;   if == 0 then nothing therefore skip

	RSB	LR, outdata, # 16			; amount of background to blend with
	Blend 	$mask1<<16, pchar, LR, R1, outdata	;   and do the blending
	Blend	$mask2<<16, pchar, LR, R1, outdata
	Blend	$mask3<<16, pchar, LR, R1, outdata, $shift
30
        STR     pchar, [ outptr ], #4 			; write the new pixel value out

        MOV     outdata, #&80000000              	; set marker bit ready for next set of pixels
        MOV     outmask, #0

	Pull	"R1-R3, PC"
        MEND 

        MACRO
$l      BlendNormal16M $mask1,$mask2,$mask3,$shift
        AlignCd (Urk):MOD:16
$l
	ANDS	outdata, outdata, outmask
	BEQ	blend_nodata				; nothing to be blended therefore ignore

	Push	"outptr, R1-R3, R6-R7, LR"

	LDR	R1, blend_fgvalue			; colour value ready to blend into the destination

	LDR	R6, linelen
	LDR	R7, this_ymagcnt			; pick up scaling information
10
        LDR     pchar, [ outptr ]			; and pick up the current background pixel data

	ANDS	R9, outdata, #&0000001F			; what is the intensity of the pixel we want to plot
	BEQ	%FT20					;   if == 0 then nothing therefore skip

	RSB	LR, R9, # 16				; amount of background to be preserved
	Blend 	$mask1, pchar, LR, R1, R9		;   and combine together blended
	Blend 	$mask2, pchar, LR, R1, R9
	Blend	$mask3, pchar, LR, R1, R9
20
	MOVS	R9, outdata, LSR # 16			; what is the intensity of the pixel we want to plot
	BEQ	%FT30					;   if == 0 then nothing therefore skip

	RSB	LR, R9, # 16				; amount of background to blend with
	Blend 	$mask1<<16, pchar, LR, R1, R9		;   and do the blending
	Blend	$mask2<<16, pchar, LR, R1, R9
	Blend	$mask3<<16, pchar, LR, R1, R9, $shift
30
        STR     pchar, [ outptr ], -R6 			; write the new pixel value out

	SUBS	R7, R7, # 1				; decrease the counter
	BNE	%BT10					;   and loop again

	Pull	"outptr, R1-R3, R6-R7, LR"
	B	blend_nodata
	MEND

blend_putdata_1555  BlendNormal16  &001F,&03E0,&7C00,26
blend_putdata_565   BlendNormal16  &001F,&07E0,&F800,27
blend_putdata_4444  BlendNormal16  &000F,&00F0,&0F00

blend_putdataM_1555 BlendNormal16M &001F,&03E0,&7C00,26
blend_putdataM_565  BlendNormal16M &001F,&07E0,&F800,27
blend_putdataM_4444 BlendNormal16M &000F,&00F0,&0F00


; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

; Blend into 32 bit per pixel

        AlignCd (Urk):MOD:16

blend_putdata_32bpp

	ANDS	outdata, outdata, outmask		; ensure only relevant bits are set
	BEQ	blend_nodata

	Push	"R1-R3, LR"

	LDR	R1, blend_fgvalue			; get the foreground painting colour

        ; outdata = &00000000-&00001000 (clear->solid)
	MOV	outdata, outdata, LSR # 8		; amount of foreground to blend
        ; outdata = 0-16 (clear-solid)
	RSBS	LR, outdata, # 16			;   and the amount of background

        MOVEQ   pchar, #0
        LDRNE   pchar, [ outptr ]			; and pick up the current background pixel data
blend_putdata_32bpp_common
	Blend 	&000000FF, pchar, LR, R1, outdata	;   blend them together
	Blend 	&0000FF00, pchar, LR, R1, outdata
	Blend	&00FF0000, pchar, LR, R1, outdata
        STR     pchar, [ outptr ], #4 			; write the new pixel value out

        MOV     outdata, #&80000000              	; set marker bit ready for next set of pixels
        MOV     outmask, #0

	Pull	"R1-R3, PC"

; Variant of blend_putdata_32bpp for alpha channel destination - always pixel up destination word, so that alpha channel is preserved
blend_putdata_32bppA

	ANDS	outdata, outdata, outmask		; ensure only relevant bits are set
	BEQ	blend_nodata

	Push	"R1-R3, LR"

	LDR	R1, blend_fgvalue			; get the foreground painting colour

        ; outdata = &00000000-&00001000 (clear->solid)
	MOV	outdata, outdata, LSR # 8		; amount of foreground to blend
        ; outdata = 0-16 (clear-solid)
	RSB	LR, outdata, # 16			;   and the amount of background

        LDR     pchar, [ outptr ]			; and pick up the current background pixel data
        B       blend_putdata_32bpp_common

blend_putdataM_32bpp

	ANDS	outdata, outdata, outmask
	BEQ	blend_nodata				; nothing to be blended therefore ignore

	Push	"outptr, R1-R3, R6, LR"

	LDR	R1, blend_fgvalue			; get the foreground painting colour
	LDR	R6, linelen				;   and the scaling information
	LDR	R9, this_ymagcnt

	MOV	outdata, outdata, LSR # 8		; amount of foreground to blend
	RSB	LR, outdata, # 16			;   and the amount of background
01
        LDR     pchar, [ outptr ]			; and pick up the current background pixel data
	Blend 	&000000FF, pchar, LR, R1, outdata	;   blend them together
	Blend 	&0000FF00, pchar, LR, R1, outdata
	Blend	&00FF0000, pchar, LR, R1, outdata
        STR     pchar, [ outptr ], -R6 			; write the new pixel value out

	SUBS	R9, R9, #1
	BNE	%BT01

	Pull	"outptr, R1-R3, R6, LR"
	B	blend_nodata

; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

; Blend into 16/32 bit per pixel, with supremacy or alpha blending
; This generates blend_putdataS_32bpp, blend_putdataA_32bpp,
; blend_putdataSM_32bpp, blend_putdataSA_32bpp, blend_putdataS_4444,
; blend_putdataA_4444, blend_putdataSM_4444, and blend_putdataAM_4444

        GBLS    routine

routine SETS    "S"

        AlignCd (Urk):MOD:16

        GET     s.BlendingS

routine SETS    "A"

        AlignCd (Urk):MOD:16

        GET     s.BlendingS

	END
