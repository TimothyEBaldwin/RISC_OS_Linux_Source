Events library
==============


The purpose of the "events" library is to allow the client to more easily
dispatch Toolbox and Wimp events.  A typical client will register some
event handlers, and then enter a poll loop, with events being dispatched
for him to his event handler functions by the events library as described
below.

When the client has called toolbox_initialise, he should call the
function event_initialise, passing a pointer to the "Id block" which was
passed to toolbox_initialise; this pointer will then be passed to any event
handler functions which the client subsequently registers.

The client application enters a poll loop using a call to event_poll,
passing a pointer to a poll block, just as for SWI Wimp_Poll
(which is, in fact, called on the client's behalf).  If the client
wishes to cause a call to Wimp_PollIdle, then he should call
event_poll_idle instead.  The event block is the one which will
be filled in by SWI Wimp_Poll.  When the Wimp is polled, the mask
passed in R0 is determined by the last call made by the client to the
function event_set_mask;  the default mask used is to just mask out
Null events.

So the minimal Toolbox application would be:


/*
 * Minimal Toolbox application, using the event veneers library.
 */

#include <stdlib.h>
#include "wimp.h"
#include "toolbox.h"
#include "event.h"

#define WimpVersion    310

static  WimpPollBlock  poll_block;
static  MessagesFD     messages;
static  IdBlock        id_block;


int main()
{
    int    wimp_version,
           task_handle,
           quit = 0,
           event_code;

    void  *sprite_area;

    /*
     * register ourselves with the Toolbox.
     */

    toolbox_initialise (0, WimpVersion, 0, 0, "<Test$Dir>",
                        &messages, &id_block,
                        &wimp_version, &task_handle,
                        &sprite_area);


    /*
     * initialise the event library.
     */

    event_initialise (&id_block);


    /*
     * poll loop (watch for Quit message and exit)
     */

    while (!quit)
    {
        event_poll (&event_code, &poll_block);

        if (event_code == Wimp_UserMessage &&
            poll_block.user_message.hdr.action_code == Wimp_Quit)
            quit = 1;
    }

    exit (EXIT_SUCCESS);
}


1.1 Registering Event Handlers
------------------------------

The event veneers library also allows the client to register functions which
will be called back for particular combinations of Toolbox or Wimp events,
either on all Objects or on a given Object.
This done by calling the functions event_register_toolbox_handler and
event_register_wimp_handler for Toolbox events and Wimp events respectively.

These register a "handler" function which will be called back by the
events library following a call to event_poll (or event_poll_idle), if its
given conditions are met.  The "handler" function will be passed a
client-defined "handle", a pointer to the poll block passed to event_poll,
and a pointer to the client's "id block" (as passed to event_initialise).

When event_poll is called and an event has arrived, the events library will
try to find a matching handler function in the following priority order:

   - a handler registered for the Object to which this event was delivered
   - a handler registered for this event.

All handler functions which are registered for the given event are called
using the order given above, until the list is exhausted or one
of the handlers returns non-zero, indicating that it has "claimed" the event.
If more than one function is registered at the same "priority" level as
defined above, then they are called in the reverse order to that in which
they were registered.

The parameters to the event registering functions are as follows:


event_register_toolbox_handler (int object_id, int event_code,
                                ToolboxEventHandler *handler, void *handle);

event_register_wimp_handler (int object_id, int event_code,
                             WimpEventHandler *handler, void *handle);


        int           object_id,       /* call the handler for events on
                                          the given Object only,
                                          -1 means all Objects
                                        */

        int           event_code,      /* event we are interested in,
                                          or -1 to mean all events
                                        */

        ToolboxEventHandler *handler,
        ot WimpEventHandler *handler   /* the handler function to call */

        void          *handle          /* client-defined handle to pass to
                                          the handler function
                                        */


The handler functions are defined as follows:

        typedef int (ToolboxEventHandler) (int            event_code,
                                            ToolboxEvent  *event,
                                            IdBlock       *id_block,
                                            void          *handle);

and

        typedef int (WimpEventHandler) (int            event_code,
                                        WimpPollBlock *event,
                                        IdBlock       *id_block,
                                        void          *handle);



For example:

static int events = 0;
static char *text = "some text";

        event_register_toolbox_handler (-1,
                                        -1,
                                        handler,
                                        (void *)text);

will call back the function "handler", for all toolbox events on all Objects,
passing a pointer to the string "some text", whereas:

static int events[] = {Iconbar_Clicked, 0};
static int iconbar_id;

        toolbox_create_object (0, "MyIconBar", &iconbar_id);

        event_register_toolbox_handler (iconbar_id,
                                        Iconbar_Clicked,
                                        click_handler,
                                        (void *)iconbar_id);

will call back the function "click_handler", only for Iconbar_Clicked
toolbox events for the Object whose Id is given by "iconbar_id", passing
the value of "iconbar_id" as a parameter.


Given the above facilities it is possible to write event handlers with a
number of granularities ranging from one handler which handles all events
for all Objects, to having one handler per event on each Object.


1.2 Deregistering Event Handlers
--------------------------------

In order to de-register event handlers, the client calls
event_deregister_toolbox_handler and event_deregister_wimp_handler with
the same parameters as when the handler was registered.


2.1 Registering Message Handlers
--------------------------------

Wimp messages are delivered on a per-task basis, and not to a particular
Object (ie the Id block is not filled in with an Object Id).  A client can
register a handler for Wimp messages, by calling the function
event_register_message_handler, specifying the following parameters:

event_register_message_handler (int msg_no, WimpMessageHandler *handler,
                                void *handle);

        int           msg_no,           /* message no we are interested in or
                                           -1 for all messages
                                        */

        WimpMessageHandler *handler,   /* the handler function to call */

        void          *handle          /* client-defined handle to pass to
                                          the handler function
                                        */

The handler function is defined as follows:

        typedef int (WimpMessageHandler) (WimpMessage   *message,
                                          void          *handle);

If more than one handler is registered for a particular Wimp message, then
they are called in the reverse order to that in which they were registered.


2.2 Deregistering Message Handlers
----------------------------------

In order to de-register message handlers, the client calls
event_deregister_message_handler with the same parameters as when the
handler was registered.


3. Function Prototypes
----------------------

The functions which are provided by the events library can be found in
'event.h' (this gets exported as event.h).


4. Memory management
--------------------

The events library will call malloc at various points to hold its internal 
lists of registrants and similar workspace. This means that a module 
task (a task which has no Wimp slot) cannot sensibly use the events library
because there is nowhere to claim from. Without the ability to register
event handlers the main utility of the library is lost, and it is simpler 
to poll the Wimp directly.
