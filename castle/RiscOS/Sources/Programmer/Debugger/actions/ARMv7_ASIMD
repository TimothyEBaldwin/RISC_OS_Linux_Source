# This source code in this file is licensed to You by Castle Technology
# Limited ("Castle") and its licensors on contractual terms and conditions
# ("Licence") which entitle you freely to modify and/or to distribute this
# source code subject to Your compliance with the terms of the Licence.
# 
# This source code has been made available to You without any warranties
# whatsoever. Consequently, Your use, modification and distribution of this
# source code is entirely at Your own risk and neither Castle, its licensors
# nor any other person who has contributed to this source code shall be
# liable to You for any loss or damage which You may suffer as a result of
# Your use, modification or distribution of this source code.
# 
# Full details of Your rights and obligations are set out in the Licence.
# You should have received a copy of the Licence with this source code file.
# If You have not received a copy, the text of the Licence is available
# online at www.castle-technology.co.uk/riscosbaselicence.htm
# 

# Actions for ASIMD disassembly

VABA_VABAL_A1(U,D:Vd,size,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_D_N_M(JUSTPARAMS,"VABA",size,U,Q,D_Vd,N_Vn,M_Vm);
	return;
}

VABA_VABAL_A2(U,D:Vd,size,N:Vn,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_QD_DN_DM(JUSTPARAMS,"VABAL",size,U,D_Vd,N_Vn,M_Vm);
	return;
}

VABD_VABDL_A1(U,D:Vd,size,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_D_N_M(JUSTPARAMS,"VABD",size,U,Q,D_Vd,N_Vn,M_Vm);
	return;
}

VABD_VABDL_A2(U,D:Vd,size,N:Vn,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_QD_DN_DM(JUSTPARAMS,"VABDL",size,U,D_Vd,N_Vn,M_Vm);
	return;
}

VABD_fp_A1(D:Vd,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMDFP);
	ASIMD_F32_D_N_M(JUSTPARAMS,"VABD",Q,D_Vd,N_Vn,M_Vm);
	return;
}

VABS_A1(D:Vd,size,F,Q,M:Vm,nonstandard)
{
	COMMON
	if(F)
	{
		ONLY1(ASIMDFP);
		ASIMD_F32_D_M(JUSTPARAMS,"VABS",Q,D_Vd,M_Vm);
	}
	else
	{
		ONLY1(ASIMD);
		ASIMD_D_M(JUSTPARAMS,"VABS",size,0,Q,D_Vd,M_Vm);
	}
	return;
}

VACxx_A1(D:Vd,op,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMDFP);
	ASIMD_F32_D_N_M(JUSTPARAMS,(op?"VACGT":"VACGE"),Q,D_Vd,N_Vn,M_Vm);
	return;
}

VADD_int_A1(D:Vd,size,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_I_D_N_M(JUSTPARAMS,"VADD",size,Q,D_Vd,N_Vn,M_Vm);
	return;
}

VADD_fp_A1(D:Vd,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMDFP);
	ASIMD_F32_D_N_M(JUSTPARAMS,"VADD",Q,D_Vd,N_Vn,M_Vm);
	return;
}

VADDHN_A1(D:Vd,size,N:Vn,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_I_DD_QN_QM(JUSTPARAMS,"VADDHN",size+1,D_Vd,N_Vn,M_Vm);
	return;
}

VADDL_VADDW_A1(U,D:Vd,size,N:Vn,op,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_LW_D_N_M(JUSTPARAMS,(op?"VADDW":"VADDL"),size,U,op,D_Vd,N_Vn,M_Vm);
	return;
}

VAND_reg_A1(D:Vd,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_GEN_D_N_M(JUSTPARAMS,"VAND",Q,D_Vd,N_Vn,M_Vm);
	return;
}

VBIC_imm_A1(i:imm3:imm4,D:Vd,cmode,Q,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_D_IMM(JUSTPARAMS,"VBIC",Q,D_Vd,1,cmode,i_imm3_imm4);
	return;
}

VBIC_reg_A1(D:Vd,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_GEN_D_N_M(JUSTPARAMS,"VBIC",Q,D_Vd,N_Vn,M_Vm);
	return;
}

VBIF_VBIT_VBSL_A1(D:Vd,op,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	static const char *ops[3] = {"VBSL","VBIT","VBIF"};
	ASIMD_GEN_D_N_M(JUSTPARAMS,ops[op-1],Q,D_Vd,N_Vn,M_Vm);
	return;
}

VCEQ_reg_A1(D:Vd,size,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_I_D_N_M(JUSTPARAMS,"VCEQ",size,Q,D_Vd,N_Vn,M_Vm);
	return;
}

VCEQ_reg_A2(D:Vd,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMDFP);
	ASIMD_F32_D_N_M(JUSTPARAMS,"VCEQ",Q,D_Vd,N_Vn,M_Vm);
	return;
}

VCEQ_imm_0_A1(D:Vd,size,F,Q,M:Vm,nonstandard)
{
	COMMON
	if(F)
	{
		ONLY1(ASIMDFP);
		ASIMD_F32_D_M(JUSTPARAMS,"VCEQ",Q,D_Vd,M_Vm);
	}
	else
	{
		ONLY1(ASIMD);
		ASIMD_I_D_M(JUSTPARAMS,"VCEQ",size,Q,D_Vd,M_Vm);
	}
	strcat(params->buf,", #0");
	return;
}

VCGE_reg_A1(U,D:Vd,size,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_D_N_M(JUSTPARAMS,"VCGE",size,U,Q,D_Vd,N_Vn,M_Vm);
	return;
}

VCGE_reg_A2(D:Vd,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMDFP);
	ASIMD_F32_D_N_M(JUSTPARAMS,"VCGE",Q,D_Vd,N_Vn,M_Vm);
	return;
}

VCGE_imm_0_A1(D:Vd,size,F,Q,M:Vm,nonstandard)
{
	COMMON
	if(F)
	{
		ONLY1(ASIMDFP);
		ASIMD_F32_D_M(JUSTPARAMS,"VCGE",Q,D_Vd,M_Vm);
	}
	else
	{
		ONLY1(ASIMD);
		ASIMD_D_M(JUSTPARAMS,"VCGE",size,0,Q,D_Vd,M_Vm);
	}
	strcat(params->buf,", #0");
	return;
}

VCGT_reg_A1(U,D:Vd,size,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_D_N_M(JUSTPARAMS,"VCGT",size,U,Q,D_Vd,N_Vn,M_Vm);
	return;
}

VCGT_reg_A2(D:Vd,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMDFP);
	ASIMD_F32_D_N_M(JUSTPARAMS,"VCGT",Q,D_Vd,N_Vn,M_Vm);
	return;
}

VCGT_imm_0_A1(D:Vd,size,F,Q,M:Vm,nonstandard)
{
	COMMON
	if(F)
	{
		ONLY1(ASIMDFP);
		ASIMD_F32_D_M(JUSTPARAMS,"VCGT",Q,D_Vd,M_Vm);
	}
	else
	{
		ONLY1(ASIMD);
		ASIMD_D_M(JUSTPARAMS,"VCGT",size,0,Q,D_Vd,M_Vm);
	}
	strcat(params->buf,", #0");
	return;
}

VCLE_imm_0_A1(D:Vd,size,F,Q,M:Vm,nonstandard)
{
	COMMON
	if(F)
	{
		ONLY1(ASIMDFP);
		ASIMD_F32_D_M(JUSTPARAMS,"VCLE",Q,D_Vd,M_Vm);
	}
	else
	{
		ONLY1(ASIMD);
		ASIMD_D_M(JUSTPARAMS,"VCLE",size,0,Q,D_Vd,M_Vm);
	}
	strcat(params->buf,", #0");
	return;
}

VCLS_A1(D:Vd,size,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_D_M(JUSTPARAMS,"VCLS",size,0,Q,D_Vd,M_Vm);
	return;
}

VCLT_imm_0_A1(D:Vd,size,F,Q,M:Vm,nonstandard)
{
	COMMON
	if(F)
	{
		ONLY1(ASIMDFP);
		ASIMD_F32_D_M(JUSTPARAMS,"VCLT",Q,D_Vd,M_Vm);
	}
	else
	{
		ONLY1(ASIMD);
		ASIMD_D_M(JUSTPARAMS,"VCLT",size,0,Q,D_Vd,M_Vm);
	}
	strcat(params->buf,", #0");
	return;
}

VCLZ_A1(D:Vd,size,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_I_D_M(JUSTPARAMS,"VCLZ",size,Q,D_Vd,M_Vm);
	return;
}

VCNT_A1(D:Vd,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	sprintf(params->buf,(Q?"VCNT%s.8\tQ%d,Q%d":"VCNT%s.8\tD%d,D%d"),ASIMDCOND,D_Vd>>Q,M_Vm>>Q);
	return;
}

VCVT_fp_int_ASIMD_A1(D:Vd,op,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMDFP);
	static const char *dts[4] = {"F32.S32","F32.U32","S32.F32","U32.F32"};
	const char *fmt = (Q?"VCVT%s.%s\tQ%d,Q%d":"VCVT%s.%s\tD%d,D%d");
	sprintf(params->buf,fmt,ASIMDCOND,dts[op],D_Vd>>Q,M_Vm>>Q);
	return;
}

VCVT_fp_fx_ASIMD_A1(D:Vd,imm6,op:U,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMDFP);
	static const char *dts[4] = {"F32.S32","F32.U32","S32.F32","U32.F32"};
	const char *fmt = (Q?"VCVT%s.%s\tQ%d,Q%d,#%d":"VCVT%s.%s\tD%d,D%d,#%d");
	sprintf(params->buf,fmt,ASIMDCOND,dts[op_U],D_Vd>>Q,M_Vm>>Q,64-imm6);
	return;
}

VCVT_hp_sp_ASIMD_A1(D:Vd,op,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMDHFP);
	const char *fmt = (op?"VCVT%s.F32.F16\tQ%d,D%d":"VCVT%s.F16.F32\tD%d,Q%d");
	sprintf(params->buf,fmt,ASIMDCOND,D_Vd>>op,M_Vm>>(1-op));
	return;
}

VDUP_scalar_A1(D:Vd,imm4,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	uint32_t esize,index;
	if(imm4 & 1)
	{
		esize = 8;
		index = imm4>>1;
	}
	else if(imm4 & 2)
	{
		esize = 16;
		index = imm4>>2;
	}
	else
	{
		esize = 32;
		index = imm4>>3;
	}
	sprintf(params->buf,"VDUP%s.%d\t%c%d,D%d[%d]",ASIMDCOND,esize,(Q?'Q':'D'),D_Vd>>Q,M_Vm,index);
	return;
}

VDUP_arm_A1(cond,b,Q,D:Vd,Rt,e,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	_UNPREDICTABLE(Rt==15);
	uint32_t esize;
	if(b)
		esize = 8;
	else if(e)
		esize = 16;
	else
		esize = 32;
	sprintf(params->buf,"VDUP%s.%d\t%c%d,%s",condition(JUSTPARAMS,cond),esize,(Q?'Q':'D'),D_Vd>>Q,REG(Rt));
	return;
}

VEOR_A1(D:Vd,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_GEN_D_N_M(JUSTPARAMS,"VEOR",Q,D_Vd,N_Vn,M_Vm);
	return;
}

VEXT_A1(D:Vd,N:Vn,imm4,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_GEN_D_N_M(JUSTPARAMS,"VEXT",Q,D_Vd,N_Vn,M_Vm);
	scatf(params->buf,",#%d",imm4);
	return;
}

VFMA_VFMS_A1(D:Vd,op,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMDv2FP);
	ASIMD_F32_D_N_M(JUSTPARAMS,(op?"VFMS":"VFMA"),Q,D_Vd,N_Vn,M_Vm);
	return;
}

VHADD_VHSUB_A1(U,D:Vd,size,N:Vn,op,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_D_N_M(JUSTPARAMS,(op?"VHSUB":"VHADD"),size,U,Q,D_Vd,N_Vn,M_Vm);
	return;
}

VLD1_mult_A1a(D,Rn,Vd,type,size,align,Rm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	_UNPREDICTABLE(Rn==15);
	uint32_t count = 1;
	if(type==10)
		count = 2;
	else if(type==6)
		count = 3;
	else if(type==2)
		count = 4;
	ASIMD_VLD_VST(JUSTPARAMS,"VLD1",size,D_Vd,-1,count,1,Rn,(align?32<<align:0),Rm);
	return;
}

VLD1_mult_A1b as if VLD1_mult_A1a
VLD1_mult_A1c as if VLD1_mult_A1a

VLD1_onelane_A1(D:Vd,Rn,size,index_align,Rm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	_UNPREDICTABLE(Rn==15);
	ASIMD_VLD_VST(JUSTPARAMS,"VLD1",size,D_Vd,index_align>>(size+1),1,0,Rn,((index_align&size)?8<<size:0),Rm);
	return;
}

VLD1_alllanes_A1(D:Vd,Rn,size,T,a,Rm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	_UNPREDICTABLE(Rn==15);
	ASIMD_VLD_VST(JUSTPARAMS,"VLD1",size,D_Vd,-2,T+1,1,Rn,(a?8<<size:0),Rm);
	return;
}

VLD2_mult_A1(D:Vd,Rn,type,size,align,Rm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	_UNPREDICTABLE(Rn==15);
	int count,stride;
	if(type==8)
	{
		count=2;
		stride=1;
	}
	else if(type==9)
	{
		count=2;
		stride=2;
	}
	else
	{
		/* type==3 */
		count=4;
		stride=1;
	}
	ASIMD_VLD_VST(JUSTPARAMS,"VLD2",size,D_Vd,-1,count,stride,Rn,(align?32<<align:0),Rm);
	return;
}

VLD2_onelane_A1(D:Vd,Rn,size,index_align,Rm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	_UNPREDICTABLE(Rn==15);
	ASIMD_VLD_VST(JUSTPARAMS,"VLD2",size,D_Vd,index_align>>(size+1),2,((index_align&(size<<1))?1:0),Rn,((index_align&1)?16<<size:0),Rm);
	return;
}

VLD2_alllanes_A1(D:Vd,Rn,size,T,a,Rm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	_UNPREDICTABLE(Rn==15);
	ASIMD_VLD_VST(JUSTPARAMS,"VLD2",size,D_Vd,-2,2,T+1,Rn,(a?16<<size:0),Rm);
	return;
}

VLD3_mult_A1(D:Vd,Rn,type,size,align,Rm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	_UNPREDICTABLE(Rn==15);
	ASIMD_VLD_VST(JUSTPARAMS,"VLD3",size,D_Vd,-1,3,(type&1)+1,Rn,(align?64:0),Rm);
	return;
}

VLD3_onelane_A1(D:Vd,Rn,size,index_align,Rm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	_UNPREDICTABLE(Rn==15);
	ASIMD_VLD_VST(JUSTPARAMS,"VLD3",size,D_Vd,index_align>>(size+1),3,((index_align&(size<<1))?2:1),Rn,0,Rm);
	return;
}

VLD3_alllanes_A1(D:Vd,Rn,size,T,Rm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	_UNPREDICTABLE(Rn==15);
	ASIMD_VLD_VST(JUSTPARAMS,"VLD3",size,D_Vd,-2,3,T+1,Rn,0,Rm);
	return;
}

VLD4_mult_A1(D:Vd,Rn,type,size,align,Rm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	_UNPREDICTABLE(Rn==15);
	ASIMD_VLD_VST(JUSTPARAMS,"VLD4",size,D_Vd,-1,4,type+1,Rn,(align?32<<align:0),Rm);
	return;
}

VLD4_onelane_A1(D:Vd,Rn,size,index_align,Rm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	_UNPREDICTABLE(Rn==15);
	uint32_t align;
	if(index_align & (1|size))
		align = (size==2?(32<<(index_align&3)):(32<<size));
	else
		align = 0;
	ASIMD_VLD_VST(JUSTPARAMS,"VLD4",size,D_Vd,index_align>>(size+1),4,((index_align&(size<<1))?2:1),Rn,align,Rm);
	return;
}

VLD4_alllanes_A1(D:Vd,Rn,size,T,a,Rm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	_UNPREDICTABLE(Rn==15);
	static const uint8_t align[4] = {32,64,64,128};
	ASIMD_VLD_VST(JUSTPARAMS,"VLD4",(size&2?2:size),D_Vd,-2,4,T+1,Rn,(a?align[size]:0),Rm);
	return;
}

VMAX_VMIN_int_A1(U,D:Vd,size,N:Vn,Q,M:Vm,op,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_D_N_M(JUSTPARAMS,(op?"VMIN":"VMAX"),size,U,Q,D_Vd,N_Vn,M_Vm);
	return;
}

VMAX_VMIN_fp_A1(D:Vd,op,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMDFP);
	ASIMD_F32_D_N_M(JUSTPARAMS,(op?"VMIN":"VMAX"),Q,D_Vd,N_Vn,M_Vm);
	return;
}

VMLxx_int_A1(op,D:Vd,size,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_I_D_N_M(JUSTPARAMS,(op?"VMLS":"VMLA"),size,Q,D_Vd,N_Vn,M_Vm);
	return;
}

VMLxx_int_A2(U,D:Vd,size,N:Vn,op,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_QD_DN_DM(JUSTPARAMS,(op?"VMLSL":"VMLAL"),size,U,D_Vd,N_Vn,M_Vm);
	return;
}

VMLA_VMLS_fp_A1(D:Vd,op,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMDFP);
	ASIMD_F32_D_N_M(JUSTPARAMS,(op?"VMLS":"VMLA"),Q,D_Vd,N_Vn,M_Vm);
	return;
}

VMLxx_scalar_A1(Q,D:Vd,size,N:Vn,op,F,M,Vm,nonstandard)
{
	COMMON
	const char *mnemonic = (op?"VMLS":"VMLA");
	if(F)
	{
		ONLY1(ASIMDFP);
		ASIMD_F32_D_M(JUSTPARAMS,mnemonic,Q,D_Vd,N_Vn);
	}
	else
	{
		ONLY1(ASIMD);
		ASIMD_I_D_M(JUSTPARAMS,mnemonic,size,Q,D_Vd,N_Vn);
	}
	uint32_t index;
	if(size==1)
		index = (M<<1)|(Vm>>3);
	else
		index = M;
	scatf(params->buf,",D%d[%d]",Vm&~(size<<3),index);
	return;
}

VMLxx_scalar_A2(U,D:Vd,size,N:Vn,op,M,Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	const char *mnemonic = (op?"VMLSL":"VMLAL");
	uint32_t index;
	if(size==1)
		index = (M<<1)|(Vm>>3);
	else
		index = M;
	ASIMD_QD_DN_DM(JUSTPARAMS,mnemonic,size,U,D_Vd,N_Vn,Vm&~(size<<3));
	scatf(params->buf,"[%d]",index);
	return;
}

VMOV_imm_A1(i:imm3:imm4,D:Vd,cmode,Q,op,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_D_IMM(JUSTPARAMS,"VMOV",Q,D_Vd,op,cmode,i_imm3_imm4);
	return;
}

VMOV_reg_A1(D:Vd,M:Vm,Q,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	sprintf(params->buf,(Q?"VMOV%s\tQ%d,Q%d":"VMOV%s\tD%d,D%d"),ASIMDCOND,D_Vd>>Q,M_Vm>>Q);
	return;
}

VMOVL_A1(U,D:Vd,imm3,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	sprintf(params->buf,"VMOVL%s.%c%d\tQ%d,D%d",ASIMDCOND,(U?'U':'S'),8*imm3,D_Vd>>1,M_Vm);
	return;
}

VMOVN_A1(D:Vd,size,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	sprintf(params->buf,"VMOVN%s.I%d\tD%d,Q%d",ASIMDCOND,16<<size,D_Vd,M_Vm>>1);
	return;
}

VMUL_VMULL_int_poly_A1(op,D:Vd,size,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	const char *fmt = (Q?"VMUL%s.%c%d\tQ%d,Q%d,Q%d":"VMUL%s.%c%d\tD%d,D%d,D%d");
	sprintf(params->buf,fmt,ASIMDCOND,(op?'P':'I'),8<<size,D_Vd>>Q,N_Vn>>Q,M_Vm>>Q);
	return;
}

VMUL_VMULL_int_poly_A2(U,D:Vd,size,N:Vn,op,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	sprintf(params->buf,"VMULL%s.%c%d\tQ%d,D%d,D%d",ASIMDCOND,(op?'P':(U?'U':'S')),8<<size,D_Vd>>1,N_Vn,M_Vm);
	return;
}

VMUL_fp_A1(D:Vd,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMDFP);
	ASIMD_F32_D_N_M(JUSTPARAMS,"VMUL",Q,D_Vd,N_Vn,M_Vm);
	return;
}

VMUL_VMULL_scalar_A1(Q,D:Vd,size,N:Vn,F,M,Vm,nonstandard)
{
	COMMON
	if(F)
	{
		ONLY1(ASIMDFP);
		ASIMD_F32_D_M(JUSTPARAMS,"VMUL",Q,D_Vd,N_Vn);
	}
	else
	{
		ONLY1(ASIMD);
		ASIMD_I_D_M(JUSTPARAMS,"VMUL",size,Q,D_Vd,N_Vn);
	}
	uint32_t index;
	if(size==1)
		index = (M<<1)|(Vm>>3);
	else
		index = M;
	scatf(params->buf,",D%d[%d]",Vm&~(size<<3),index);
	return;
}

VMUL_VMULL_scalar_A2(U,D:Vd,size,N:Vn,M,Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	uint32_t index;
	if(size==1)
		index = (M<<1)|(Vm>>3);
	else
		index = M;
	ASIMD_QD_DN_DM(JUSTPARAMS,"VMULL",size,U,D_Vd,N_Vn,Vm&~(size<<3));
	scatf(params->buf,"[%d]",index);
	return;
}

VMVN_imm_A1(i:imm3:imm4,D:Vd,cmode,Q,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_D_IMM(JUSTPARAMS,"VMVN",Q,D_Vd,1,cmode,i_imm3_imm4);
	return;
}

VMVN_reg_A1(D:Vd,M,Q,Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	sprintf(params->buf,(Q?"VMVN%s\tQ%d,Q%d":"VMVN%s\tD%d,D%d"),ASIMDCOND,D_Vd>>Q,M_Vm>>Q);
	return;
}

VNEG_A1(D:Vd,size,F,Q,M:Vm,nonstandard)
{
	COMMON
	if(F)
	{
		ONLY1(ASIMDFP);
		ASIMD_F32_D_M(JUSTPARAMS,"VNEG",Q,D_Vd,M_Vm);
	}
	else
	{
		ONLY1(ASIMD);
		ASIMD_D_M(JUSTPARAMS,"VNEG",size,0,Q,D_Vd,M_Vm);
	}
	return;
}

VORN_reg_A1(D:Vd,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_GEN_D_N_M(JUSTPARAMS,"VORN",Q,D_Vd,N_Vn,M_Vm);
	return;
}

VORR_imm_A1(i:imm3:imm4,D:Vd,cmode,Q,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_D_IMM(JUSTPARAMS,"VORR",Q,D_Vd,0,cmode,i_imm3_imm4);
	return;
}

VORR_reg_A1(D:Vd,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_GEN_D_N_M(JUSTPARAMS,"VORR",Q,D_Vd,N_Vn,M_Vm);
	return;
}

VPADAL_A1(D:Vd,size,op,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_D_M(JUSTPARAMS,"VPADAL",size,op,Q,D_Vd,M_Vm);
	return;
}

VPADD_int_A1(D:Vd,size,N:Vn,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_I_D_N_M(JUSTPARAMS,"VPADD",size,0,D_Vd,N_Vn,M_Vm);
	return;
}

VPADD_fp_A1(D:Vd,N:Vn,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMDFP);
	ASIMD_F32_D_N_M(JUSTPARAMS,"VPADD",0,D_Vd,N_Vn,M_Vm);
	return;
}

VPADDL_A1(D:Vd,size,op,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_D_M(JUSTPARAMS,"VPADDL",size,op,Q,D_Vd,M_Vm);
	return;
}

VPMAX_VPMIN_int_A1(U,D:Vd,size,N:Vn,M:Vm,op,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_D_N_M(JUSTPARAMS,(op?"VPMIN":"VPMAX"),size,U,0,D_Vd,N_Vn,M_Vm);
	return;
}

VPMAX_VPMIN_fp_A1(D:Vd,op,N:Vn,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMDFP);
	ASIMD_F32_D_N_M(JUSTPARAMS,(op?"VPMIN":"VPMAX"),0,D_Vd,N_Vn,M_Vm);
	return;
}

VQABS_A1(D:Vd,size,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_D_M(JUSTPARAMS,"VQABS",size,0,Q,D_Vd,M_Vm);
	return;
}

VQADD_A1(U,D:Vd,size,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_D_N_M(JUSTPARAMS,"VQADD",size,U,Q,D_Vd,N_Vn,M_Vm);
	return;
}

VQDMLAL_VQDMLSL_A1(D:Vd,size,N:Vn,op,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_QD_DN_DM(JUSTPARAMS,(op?"VQDMLSL":"VQDMLAL"),size,0,D_Vd,N_Vn,M_Vm);
	return;
}

VQDMLAL_VQDMLSL_A2(D:Vd,size,N:Vn,op,M,Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	uint32_t index;
	if(size==1)
		index = (M<<1)|(Vm>>3);
	else
		index = M;
	ASIMD_QD_DN_DM(JUSTPARAMS,(op?"VQDMLSL":"VQDMLAL"),size,0,D_Vd,N_Vn,Vm&~(size<<3));
	scatf(params->buf,"[%d]",index);
	return;
}

VQDMULH_A1(D:Vd,size,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_D_N_M(JUSTPARAMS,"VQDMULH",size,0,Q,D_Vd,N_Vn,M_Vm);
	return;
}

VQDMULH_A2(Q,D:Vd,size,N:Vn,M,Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_D_M(JUSTPARAMS,"VQDMULH",size,0,Q,D_Vd,N_Vn);
	uint32_t index;
	if(size==1)
		index = (M<<1)|(Vm>>3);
	else
		index = M;
	scatf(params->buf,",D%d[%d]",Vm&~(size<<3),index);
	return;
}

VQDMULL_A1(D:Vd,size,N:Vn,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_QD_DN_DM(JUSTPARAMS,"VQDMULL",size,0,D_Vd,N_Vn,M_Vm);
	return;
}

VQDMULL_A2(D:Vd,size,N:Vn,M,Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	uint32_t index;
	if(size==1)
		index = (M<<1)|(Vm>>3);
	else
		index = M;
	ASIMD_QD_DN_DM(JUSTPARAMS,"VQDMULL",size,0,D_Vd,N_Vn,Vm&~(size<<3));
	scatf(params->buf,"[%d]",index);
	return;
}

VQMOVN_VQMOVUN_A1(D:Vd,size,op,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	sprintf(params->buf,"VQMOV%sN%s.%c%d\tD%d,Q%d",(op==1?"U":""),ASIMDCOND,(op==3?'U':'S'),16<<size,D_Vd,M_Vm>>1);
	return;
}

VQNEG_A1(D:Vd,size,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_D_M(JUSTPARAMS,"VQNEG",size,0,Q,D_Vd,M_Vm);
	return;
}

VQRDMULH_A1(D:Vd,size,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_D_N_M(JUSTPARAMS,"VQRDMULH",size,0,Q,D_Vd,N_Vn,M_Vm);
	return;
}

VQRDMULH_A2(Q,D:Vd,size,N:Vn,M,Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_D_M(JUSTPARAMS,"VQRDMULH",size,0,Q,D_Vd,N_Vn);
	uint32_t index;
	if(size==1)
		index = (M<<1)|(Vm>>3);
	else
		index = M;
	scatf(params->buf,",D%d[%d]",Vm&~(size<<3),index);
	return;
}

VQRSHL_A1(U,D:Vd,size,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_D_N_M(JUSTPARAMS,"VQRSHL",size,U,Q,D_Vd,M_Vm,N_Vn);
	return;
}

VQRSHRN_VQRSHRUN_A1(U,D:Vd,imm6,op,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	uint32_t esize;
	if(imm6 & 0x20)
		esize = 64;
	else if(imm6 & 0x10)
		esize = 32;
	else
		esize = 16;
	sprintf(params->buf,"VQRSHR%sN%s.%c%d\tD%d,Q%d,#%d",((U&&!op)?"U":""),ASIMDCOND,((U&&op)?'U':'S'),esize,D_Vd,M_Vm>>1,esize-imm6);
	return;
}

VQSHL_reg_A1(U,D:Vd,size,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_D_N_M(JUSTPARAMS,"VQSHL",size,U,Q,D_Vd,M_Vm,N_Vn);
	return;
}

VQSHL_VQSHLU_imm_A1(U,D:Vd,imm6,op,L,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	uint32_t esize;
	if(L)
		esize = 3;
	else if(imm6 & 0x20)
		esize = 2;
	else if(imm6 & 0x10)
		esize = 1;
	else
		esize = 0;
	ASIMD_D_M(JUSTPARAMS,((U&&!op)?"VQSHLU":"VQSHL"),esize,U&&op,Q,D_Vd,M_Vm);
	scatf(params->buf,",#%d",imm6&~(0xf8<<esize));
	return;
}

VQSHRN_VQSHRUN_A1(U,D:Vd,imm6,op,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	uint32_t esize;
	if(imm6 & 0x20)
		esize = 64;
	else if(imm6 & 0x10)
		esize = 32;
	else
		esize = 16;
	sprintf(params->buf,"VQSHR%sN%s.%c%d\tD%d,Q%d,#%d",((U&&!op)?"U":""),ASIMDCOND,((U&&op)?'U':'S'),esize,D_Vd,M_Vm>>1,esize-imm6);
	return;
}

VQSUB_A1(U,D:Vd,size,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_D_N_M(JUSTPARAMS,"VQSUB",size,U,Q,D_Vd,N_Vn,M_Vm);
	return;
}

VRADDHN_A1(D:Vd,size,N:Vn,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_I_DD_QN_QM(JUSTPARAMS,"VRADDHN",size+1,D_Vd,N_Vn,M_Vm);
	return;
}

VRECPE_A1(D:Vd,size,F,Q,M:Vm,nonstandard)
{
	COMMON
	if(F)
	{
		ONLY1(ASIMDFP);
		ASIMD_F32_D_M(JUSTPARAMS,"VRECPE",Q,D_Vd,M_Vm);
	}
	else
	{
		ONLY1(ASIMD);
		ASIMD_D_M(JUSTPARAMS,"VRECPE",size,1,Q,D_Vd,M_Vm);
	}
	return;
}

VRECPS_A1(D:Vd,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMDFP);
	ASIMD_F32_D_N_M(JUSTPARAMS,"VRECPS",Q,D_Vd,N_Vn,M_Vm);
	return;
}

VREV16_VREV32_VREV64_A1(D:Vd,size,op,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	const char *fmt = (Q?"VREV%d%s.%d\tQ%d,Q%d":"VREV%d%s.%d\tD%d,D%d");
	sprintf(params->buf,fmt,64>>op,ASIMDCOND,8<<size,D_Vd>>Q,M_Vm>>Q);
	return;
}

VRHADD_A1(U,D:Vd,size,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_D_N_M(JUSTPARAMS,"VRHADD",size,U,Q,D_Vd,N_Vn,M_Vm);
	return;
}

VRSHL_A1(U,D:Vd,size,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_D_N_M(JUSTPARAMS,"VRSHL",size,U,Q,D_Vd,M_Vm,N_Vn);
	return;
}

VRSHR_A1(U,D:Vd,imm6,L,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	uint32_t esize,amt;
	if(L)
	{
		esize = 3;
		amt = 64-imm6;
	}
	else if(imm6 & 0x20)
	{
		esize = 2;
		amt = 64-imm6;
	}
	else if(imm6 & 0x10)
	{
		esize = 1;
		amt = 32-imm6;
	}
	else
	{
		esize = 0;
		amt = 16-imm6;
	}
	ASIMD_D_M(JUSTPARAMS,"VRSHR",esize,U,Q,D_Vd,M_Vm);
	scatf(params->buf,",#%d",amt);
	return;
}

VRSHRN_A1(D:Vd,imm6,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	uint32_t esize;
	if(imm6 & 0x20)
		esize = 64;
	else if(imm6 & 0x10)
		esize = 32;
	else
		esize = 16;
	sprintf(params->buf,"VRSHRN%s.I%d\tD%d,Q%d,#%d",ASIMDCOND,esize,D_Vd,M_Vm>>1,esize-imm6);
	return;
}

VRSQRTE_A1(D:Vd,size,F,Q,M:Vm,nonstandard)
{
	COMMON
	if(F)
	{
		ONLY1(ASIMDFP);
		ASIMD_F32_D_M(JUSTPARAMS,"VRSQRTE",Q,D_Vd,M_Vm);
	}
	else
	{
		ONLY1(ASIMD);
		ASIMD_D_M(JUSTPARAMS,"VRSQRTE",size,1,Q,D_Vd,M_Vm);
	}
	return;
}

VRSQRTS_A1(D:Vd,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMDFP);
	ASIMD_F32_D_N_M(JUSTPARAMS,"VRSQRTS",Q,D_Vd,N_Vn,M_Vm);
	return;
}

VRSRA_A1(U,D:Vd,imm6,L,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	uint32_t esize,amt;
	if(L)
	{
		esize = 3;
		amt = 64-imm6;
	}
	else if(imm6 & 0x20)
	{
		esize = 2;
		amt = 64-imm6;
	}
	else if(imm6 & 0x10)
	{
		esize = 1;
		amt = 32-imm6;
	}
	else
	{
		esize = 0;
		amt = 16-imm6;
	}
	ASIMD_D_M(JUSTPARAMS,"VRSRA",esize,U,Q,D_Vd,M_Vm);
	scatf(params->buf,",#%d",amt);
	return;
}

VRSUBHN_A1(D:Vd,size,N:Vn,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_I_DD_QN_QM(JUSTPARAMS,"VRSUBHN",size+1,D_Vd,N_Vn,M_Vm);
	return;
}

VSHL_imm_A1(D:Vd,imm6,L,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	uint32_t esize;
	if(L)
		esize = 3;
	else if(imm6 & 0x20)
		esize = 2;
	else if(imm6 & 0x10)
		esize = 1;
	else
		esize = 0;
	ASIMD_I_D_M(JUSTPARAMS,"VSHL",esize,Q,D_Vd,M_Vm);
	scatf(params->buf,",#%d",imm6&~(0xf8<<esize));
	return;
}

VSHL_reg_A1(U,D:Vd,size,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_D_N_M(JUSTPARAMS,"VSHL",size,U,Q,D_Vd,M_Vm,N_Vn);
	return;
}

VSHLL_A1(U,D:Vd,imm6,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	uint32_t esize;
	if(imm6 & 0x20)
		esize = 32;
	else if(imm6 & 0x10)
		esize = 16;
	else
		esize = 8;
	sprintf(params->buf,"VSHLL%s.%c%d\tQ%d,D%d,#%d",ASIMDCOND,(U?'U':'S'),esize,D_Vd>>1,M_Vm,imm6&(esize-1));
	return;
}

VSHLL_A2(D:Vd,size,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	sprintf(params->buf,"VSHLL%s.I%d\tQ%d,D%d,#%d",ASIMDCOND,8<<size,D_Vd>>1,M_Vm,8<<size);
	return;
}

VSHR_A1(U,D:Vd,imm6,L,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	uint32_t esize,amt;
	if(L)
	{
		esize = 3;
		amt = 64-imm6;
	}
	else if(imm6 & 0x20)
	{
		esize = 2;
		amt = 64-imm6;
	}
	else if(imm6 & 0x10)
	{
		esize = 1;
		amt = 32-imm6;
	}
	else
	{
		esize = 0;
		amt = 16-imm6;
	}
	ASIMD_D_M(JUSTPARAMS,"VSHR",esize,U,Q,D_Vd,M_Vm);
	scatf(params->buf,",#%d",amt);
	return;
}

VSHRN_A1(D:Vd,imm6,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	uint32_t esize;
	if(imm6 & 0x20)
		esize = 64;
	else if(imm6 & 0x10)
		esize = 32;
	else
		esize = 16;
	sprintf(params->buf,"VSHRN%s.I%d\tQ%d,D%d,#%d",ASIMDCOND,esize,D_Vd>>1,M_Vm,esize-imm6);
	return;
}

VSLI_A1(D:Vd,imm6,L,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	uint32_t esize;
	if(L)
		esize = 64;
	else if(imm6 & 0x20)
		esize = 32;
	else if(imm6 & 0x10)
		esize = 16;
	else
		esize = 8;
	const char *fmt = (Q?"VSLI%s.%d\tQ%d,Q%d,#%d":"VSLI%s.%d\tD%d,D%d,#%d");
	sprintf(params->buf,fmt,ASIMDCOND,esize,D_Vd>>Q,M_Vm>>Q,imm6&(esize-1));
	return;
}

VSRA_A1(U,D:Vd,imm6,L,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	uint32_t esize,amt;
	if(L)
	{
		esize = 3;
		amt = 64-imm6;
	}
	else if(imm6 & 0x20)
	{
		esize = 2;
		amt = 64-imm6;
	}
	else if(imm6 & 0x10)
	{
		esize = 1;
		amt = 32-imm6;
	}
	else
	{
		esize = 0;
		amt = 16-imm6;
	}
	ASIMD_D_M(JUSTPARAMS,"VSRA",esize,U,Q,D_Vd,M_Vm);
	scatf(params->buf,",#%d",amt);
	return;
}

VSRI_A1(D:Vd,imm6,L,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	uint32_t esize,amt;
	if(L)
	{
		esize = 64;
		amt = 64-imm6;
	}
	else if(imm6 & 0x20)
	{
		esize = 32;
		amt = 64-imm6;
	}
	else if(imm6 & 0x10)
	{
		esize = 16;
		amt = 32-imm6;
	}
	else
	{
		esize = 8;
		amt = 16-imm6;
	}
	const char *fmt = (Q?"VSRI%s.%d\tQ%d,Q%d,#%d":"VSRI%s.%d\tD%d,D%d,#%d");
	sprintf(params->buf,fmt,ASIMDCOND,esize,D_Vd>>Q,M_Vm>>Q,amt);
	return;
}

VST1_mult_A1(D:Vd,Rn,type,size,align,Rm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	_UNPREDICTABLE(Rn==15);
	uint32_t count = 1;
	if(type==10)
		count = 2;
	else if(type==6)
		count = 3;
	else if(type==2)
		count = 4;
	ASIMD_VLD_VST(JUSTPARAMS,"VST1",size,D_Vd,-1,count,1,Rn,(align?32<<align:0),Rm);
	return;
}

VST1_onelane_A1(D:Vd,Rn,size,index_align,Rm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	_UNPREDICTABLE(Rn==15);
	ASIMD_VLD_VST(JUSTPARAMS,"VST1",size,D_Vd,index_align>>(size+1),1,0,Rn,((index_align&size)?8<<size:0),Rm);
	return;
}

VST2_mult_A1(D:Vd,Rn,type,size,align,Rm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	_UNPREDICTABLE(Rn==15);
	int count,stride;
	if(type==8)
	{
		count=2;
		stride=1;
	}
	else if(type==9)
	{
		count=2;
		stride=2;
	}
	else
	{
		/* type==3 */
		count=4;
		stride=1;
	}
	ASIMD_VLD_VST(JUSTPARAMS,"VST2",size,D_Vd,-1,count,stride,Rn,(align?32<<align:0),Rm);
	return;
}

VST2_onelane_A1(D:Vd,Rn,size,index_align,Rm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	_UNPREDICTABLE(Rn==15);
	ASIMD_VLD_VST(JUSTPARAMS,"VST2",size,D_Vd,index_align>>(size+1),2,((index_align&(size<<1))?1:0),Rn,((index_align&1)?16<<size:0),Rm);
	return;
}

VST3_mult_A1(D:Vd,Rn,type,size,align,Rm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	_UNPREDICTABLE(Rn==15);
	ASIMD_VLD_VST(JUSTPARAMS,"VST3",size,D_Vd,-1,3,(type&1)+1,Rn,(align?64:0),Rm);
	return;
}

VST3_onelane_A1(D:Vd,Rn,size,index_align,Rm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	_UNPREDICTABLE(Rn==15);
	ASIMD_VLD_VST(JUSTPARAMS,"VST3",size,D_Vd,index_align>>(size+1),3,((index_align&(size<<1))?2:1),Rn,0,Rm);
	return;
}

VST4_mult_A1(D:Vd,Rn,type,size,align,Rm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	_UNPREDICTABLE(Rn==15);
	ASIMD_VLD_VST(JUSTPARAMS,"VST4",size,D_Vd,-1,4,type+1,Rn,(align?32<<align:0),Rm);
	return;
}

VST4_onelane_A1(D:Vd,Rn,size,index_align,Rm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	_UNPREDICTABLE(Rn==15);
	uint32_t align;
	if(index_align & (1|size))
		align = (size==2?(32<<(index_align&3)):(32<<size));
	else
		align = 0;
	ASIMD_VLD_VST(JUSTPARAMS,"VST4",size,D_Vd,index_align>>(size+1),4,((index_align&(size<<1))?2:1),Rn,align,Rm);
	return;
}

VSUB_int_A1(D:Vd,size,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_I_D_N_M(JUSTPARAMS,"VSUB",size,Q,D_Vd,N_Vn,M_Vm);
	return;
}

VSUB_fp_A1(D:Vd,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMDFP);
	ASIMD_F32_D_N_M(JUSTPARAMS,"VSUB",Q,D_Vd,N_Vn,M_Vm);
	return;
}

VSUBHN_A1(D:Vd,size,N:Vn,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_I_DD_QN_QM(JUSTPARAMS,"VSUBHN",size+1,D_Vd,N_Vn,M_Vm);
	return;
}

VSUBL_VSUBW_A1(U,D:Vd,size,N:Vn,op,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	ASIMD_LW_D_N_M(JUSTPARAMS,(op?"VSUBW":"VSUBL"),size,U,op,D_Vd,N_Vn,M_Vm);
	return;
}

VSWP_A1(D:Vd,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	const char *fmt = (Q?"VSWP%s\tQ%d,Q%d":"VSWP%s\tD%d,D%d");
	sprintf(params->buf,fmt,ASIMDCOND,D_Vd>>Q,M_Vm>>Q);
	return;
}

VTBL_VTBX_A1(D:Vd,N:Vn,len,op,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	uint32_t dn = N_Vn;
	_UNPREDICTABLE(dn+len>=32);
	sprintf(params->buf,"VTB%c%s.8\tD%d,{D%d",(op?'X':'L'),ASIMDCOND,D_Vd,dn);
	uint32_t len2=len;
	while(len2--)
		scatf(params->buf,",D%d",++dn);
	scatf(params->buf,"},D%d",M_Vm);
	return;
}

VTRN_A1(D:Vd,size,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	const char *fmt = (Q?"VTRN%s.%d\tQ%d,Q%d":"VTRN%s.%d\tD%d,D%d");
	sprintf(params->buf,fmt,ASIMDCOND,8<<size,D_Vd>>Q,M_Vm>>Q);
	return;
}

VTST_A1(D:Vd,size,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	const char *fmt = (Q?"VTST%s.%d\tQ%d,Q%d,Q%d":"VTST%s.%d\tD%d,D%d,D%d");
	sprintf(params->buf,fmt,ASIMDCOND,8<<size,D_Vd>>Q,N_Vn>>Q,M_Vm>>Q);
	return;
}

VUZP_A1(D:Vd,size,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	const char *fmt = (Q?"VUZP%s.%d\tQ%d,Q%d":"VUZP%s.%d\tD%d,D%d");
	sprintf(params->buf,fmt,ASIMDCOND,8<<size,D_Vd>>Q,M_Vm>>Q);
	return;
}

VZIP_A1(D:Vd,size,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	const char *fmt = (Q?"VZIP%s.%d\tQ%d,Q%d":"VZIP%s.%d\tD%d,D%d");
	sprintf(params->buf,fmt,ASIMDCOND,8<<size,D_Vd>>Q,M_Vm>>Q);
	return;
}
