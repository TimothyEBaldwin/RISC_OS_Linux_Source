# This source code in this file is licensed to You by Castle Technology
# Limited ("Castle") and its licensors on contractual terms and conditions
# ("Licence") which entitle you freely to modify and/or to distribute this
# source code subject to Your compliance with the terms of the Licence.
# 
# This source code has been made available to You without any warranties
# whatsoever. Consequently, Your use, modification and distribution of this
# source code is entirely at Your own risk and neither Castle, its licensors
# nor any other person who has contributed to this source code shall be
# liable to You for any loss or damage which You may suffer as a result of
# Your use, modification or distribution of this source code.
# 
# Full details of Your rights and obligations are set out in the Licence.
# You should have received a copy of the Licence with this source code file.
# If You have not received a copy, the text of the Licence is available
# online at www.castle-technology.co.uk/riscosbaselicence.htm
# 

# Actions for VFP disassembly

VABS_A2(cond,D,Vd,sz,M,Vm,nonstandard)
{
	_UNDEFINED(sz && !VFPDP);
	COMMON
	ONLY3(VFPv2,VFPv3,VFPv4);
	VFP_CC_VD_VM(JUSTPARAMS,"VABS","FABS",cond,sz,Vd,D,Vm,M);
	return;
}

VADD_fp_A2(cond,D,Vn,Vd,sz,N,M,Vm,nonstandard)
{
	_UNDEFINED(sz && !VFPDP);
	COMMON
	ONLY3(VFPv2,VFPv3,VFPv4);
	VFP_CC_VD_VN_VM(JUSTPARAMS,"VADD","FADD",cond,sz,Vd,D,Vn,N,Vm,M);
	return;
}

VCMP_VCMPE_A1(cond,D,Vd,sz,E,M,Vm,nonstandard)
{
	_UNDEFINED(sz && !VFPDP);
	COMMON
	ONLY3(VFPv2,VFPv3,VFPv4);
	VFP_CC_VD_VM(JUSTPARAMS,(E?"VCMPE":"VCMP"),(E?"FCMPE":"FCMP"),cond,sz,Vd,D,Vm,M);
	return;
}

VCMP_VCMPE_A2(cond,D,Vd,sz,E,nonstandard)
{
	_UNDEFINED(sz && !VFPDP);
	COMMON
	ONLY3(VFPv2,VFPv3,VFPv4);
	VFP_CC_VD_F(JUSTPARAMS,(E?"VCMPE":"VCMP"),(E?"FCMPEZ":"FCMPZ"),cond,sz,Vd,D,0);
	return;
}

VCVT_VCVTR_fp_int_VFP_A1(cond,D,opc2,Vd,sz,op,M,Vm,nonstandard)
{
	_UNDEFINED(sz && !VFPDP);
	COMMON
	ONLY3(VFPv2,VFPv3,VFPv4);
	const char *cc = condition(JUSTPARAMS,cond);
	if(!(opc2 & 4))
	{
		if(params->opt->vfpual)
			sprintf(params->buf,"VCVT%s.F%d.%c32\t",cc,(sz?64:32),(op?'S':'U'));
		else
			sprintf(params->buf,"F%cITO%c%s\t",(op?'S':'U'),(sz?'D':'S'),cc);
		if(sz)
			scatf(params->buf,"D%d,S%d",(D<<4)|Vd,(Vm<<1)|M);
		else
			scatf(params->buf,"S%d,S%d",(Vd<<1)|D,(Vm<<1)|M);
	}
	else
	{
		if(params->opt->vfpual)
			sprintf(params->buf,"VCVT%s%s.%c32.F%d\t",(op?"":"R"),cc,((opc2&1)?'S':'U'),(sz?64:32));
		else
			sprintf(params->buf,"FTO%cI%s%c%s\t",((opc2&1)?'S':'U'),(op?"Z":""),(sz?'D':'S'),cc);
		if(sz)
			scatf(params->buf,"S%d,D%d",(Vd<<1)|D,(M<<4)|Vm);
		else
			scatf(params->buf,"S%d,S%d",(Vd<<1)|D,(Vm<<1)|M);
	}
	return;
}

VCVT_fp_fx_VFP_A1(cond,D,op,U,Vd,sf,sx,i,imm4,nonstandard)
{
	_UNDEFINED(sf && !VFPDP);
	COMMON
	ONLY2(VFPv3,VFPv4);
	const char *cc = condition(JUSTPARAMS,cond);
	if(params->opt->vfpual)
	{
		if(op)
			sprintf(params->buf,"VCVT%s.%c%d.F%d\t",cc,(U?'U':'S'),(sx?32:16),(sf?64:32));
		else
			sprintf(params->buf,"VCVT%s.F%d.%c%d\t",cc,(sf?64:32),(U?'U':'S'),(sx?32:16));
		if(sf)
			scatf(params->buf,"D%d,D%d,#%d",(D<<4)|Vd,(D<<4)|Vd,(sx?32:16)-((imm4<<1)|i));
		else
			scatf(params->buf,"S%d,S%d,#%d",(Vd<<1)|D,(Vd<<1)|D,(sx?32:16)-((imm4<<1)|i));
	}
	else
	{
		sprintf(params->buf,(op?"FTO%c%c":"F%c%cTO"),(U?'U':'S'),(sx?'L':'H'));
		if(sf)
			scatf(params->buf,"D%s\tD%d,#%d",cc,(D<<4)|Vd,(sx?32:16)-((imm4<<1)|i));
		else
			scatf(params->buf,"S%s\tS%d,#%d",cc,(Vd<<1)|D,(sx?32:16)-((imm4<<1)|i));
	}
	return;
}

VCVT_dp_sp_A1(cond,D,Vd,sz,M,Vm,nonstandard)
{
	_UNDEFINED(!VFPDP);
	COMMON
	ONLY3(VFPv2,VFPv3,VFPv4);
	const char *cc = condition(JUSTPARAMS,cond);
	if(sz)
		sprintf(params->buf,(params->opt->vfpual?"VCVT%s.F32.F64\tS%d,D%d":"FCVTSD%s\tS%d,D%d"),cc,(Vd<<1)|D,(M<<4)|Vm);
	else
		sprintf(params->buf,(params->opt->vfpual?"VCVT%s.F64.F32\tD%d,S%d":"FCVTDS%s\tD%d,S%d"),cc,(D<<4)|Vd,(Vm<<1)|M);
	return;
}

VCVTB_VCVTT_hp_sp_VFP_A1(cond,Vd:D,op,T,Vm:M,nonstandard)
{
	COMMON
	ONLY2(VFPv3HP,VFPv4);
	// TODO - Find non-UAL syntax for this
	sprintf(params->buf,"VCVT%c%s.F%d.F%d\tS%d,S%d",(T?'T':'B'),condition(JUSTPARAMS,cond),(op?16:32),(op?32:16),Vd_D,Vm_M);
	return;
}

VDIV_A1(cond,D,Vn,Vd,sz,N,M,Vm,nonstandard)
{
	_UNDEFINED(sz && !VFPDP);
	COMMON
	ONLY3(VFPv2,VFPv3,VFPv4);
	VFP_CC_VD_VN_VM(JUSTPARAMS,"VDIV","FDIV",cond,sz,Vd,D,Vn,N,Vm,M);
	return;
}

VFMA_VFMS_A2(cond,D,Vn,Vd,sz,N,op,M,Vm,nonstandard)
{
	_UNDEFINED(sz && !VFPDP);
	COMMON
	ONLY1(VFPv4);
	VFP_CC_VD_VN_VM(JUSTPARAMS,(op?"VFMS":"VFMA"),(op?"VFMS":"VFMA"),cond,sz,Vd,D,Vn,N,Vm,M);
	return;
}

VFNMA_VFNMS_A1(cond,D,Vn,Vd,sz,N,op,M,Vm,nonstandard)
{
	_UNDEFINED(sz && !VFPDP);
	COMMON
	ONLY1(VFPv4);
	VFP_CC_VD_VN_VM(JUSTPARAMS,(op?"VFNMA":"VFNMS"),(op?"VFNMA":"VFNMS"),cond,sz,Vd,D,Vn,N,Vm,M);
	return;
}

VLDM_A1(cond,P,U,D:Vd,W,Rn,imm8,nonstandard)
{
	COMMON
	ONLY1(VFP_ASIMD_common);
	uint32_t regs = imm8>>1;
	_UNPREDICTABLE((Rn==15) && W);
	_UNPREDICTABLE(!regs || (regs > 16) || ((D_Vd+regs) > 32));
	const char *fmt;
	if(imm8 & 1)
	{
		_UNPREDICTABLE(D_Vd+regs > 16);
		fmt = "FLDM%sX%s\t%s%s,{";
	}
	else if(params->opt->vfpual)
		fmt = "VLDM%s%s\t%s%s,{";
	else
		fmt = "FLDM%sD%s\t%s%s,{";
	sprintf(params->buf,fmt,ldmmode(P,U),condition(JUSTPARAMS,cond),REG(Rn),(W?"!":""));
	if(regs > 1)
		scatf(params->buf,"D%d%cD%d}",D_Vd,(regs>2?'-':','),D_Vd+regs-1);
	else
		scatf(params->buf,"D%d}",D_Vd);
	return;
}

VLDM_A2(cond,P,U,Vd:D,W,Rn,imm8,nonstandard)
{
	COMMON
	ONLY1(VFP_ASIMD_common);
	uint32_t regs = imm8;
	_UNPREDICTABLE((Rn==15) && W);
	_UNPREDICTABLE(!regs || ((Vd_D+regs) > 32));
	sprintf(params->buf,(params->opt->vfpual?"VLDM%s%s\t%s%s,{":"FLDM%sS%s\t%s%s,{"),ldmmode(P,U),condition(JUSTPARAMS,cond),REG(Rn),(W?"!":""));
	if(regs > 1)
		scatf(params->buf,"S%d%cS%d}",Vd_D,(regs>2?'-':','),Vd_D+regs-1);
	else
		scatf(params->buf,"S%d}",Vd_D);
	return;
}

VLDR_A1(cond,U,D:Vd,Rn,imm8,nonstandard)
{
	COMMON
	ONLY1(VFP_ASIMD_common);
	sprintf(params->buf,(params->opt->vfpual?"VLDR%s\tD%d,":"FLDD%s\tD%d,"),condition(JUSTPARAMS,cond),D_Vd);
	if(Rn==15)
	{
		doldrstrlit(JUSTPARAMS,U,0,imm8<<2,true);
	}
	else
	{
		scatf(params->buf,"[%s,#%s%d]",REG(Rn),(U?"":"-"),imm8<<2);
	}
	return;
}

VLDR_A2(cond,U,Vd:D,Rn,imm8,nonstandard)
{
	COMMON
	ONLY3(VFPv2,VFPv3,VFPv4);
	sprintf(params->buf,(params->opt->vfpual?"VLDR%s\tS%d,":"FLDS%s\tS%d,"),condition(JUSTPARAMS,cond),Vd_D);
	if(Rn==15)
	{
		doldrstrlit(JUSTPARAMS,U,0,imm8<<2,true);
	}
	else
	{
		scatf(params->buf,"[%s,#%s%d]",REG(Rn),(U?"":"-"),imm8<<2);
	}
	return;
}

VMLA_VMLS_fp_A2(cond,D,Vn,Vd,sz,N,op,M,Vm,nonstandard)
{
	_UNDEFINED(sz && !VFPDP);
	COMMON
	ONLY3(VFPv2,VFPv3,VFPv4);
	VFP_CC_VD_VN_VM(JUSTPARAMS,(op?"VMLS":"VMLA"),(op?"FNMAC":"FMAC"),cond,sz,Vd,D,Vn,N,Vm,M);
	return;
}

VMOV_imm_A2(cond,D,imm4H:imm4L,Vd,sz,nonstandard)
{
	_UNDEFINED(sz && !VFPDP);
	COMMON
	ONLY2(VFPv3,VFPv4);
	VFP_CC_VD_IMM(JUSTPARAMS,"VMOV","FCONST",cond,sz,Vd,D,imm4H_imm4L);
	return;
}

VMOV_reg_A2(cond,D,Vd,sz,M,Vm,nonstandard)
{
	_UNDEFINED(sz && !VFPDP);
	COMMON
	ONLY3(VFPv2,VFPv3,VFPv4);
	VFP_CC_VD_VM(JUSTPARAMS,"VMOV","FCPY",cond,sz,Vd,D,Vm,M);
	return;
}

VMOV_arm_A1(cond,opc1,D:Vd,Rt,opc2,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	_UNPREDICTABLE(Rt==15);
	uint32_t size,index;
	const char *cc = condition(JUSTPARAMS,cond);
	if(opc1 & 2)
	{
		size = 8;
		index = ((opc1&1)<<2) | opc2;
	}
	else if(opc2 & 1)
	{
		size = 16;
		index = ((opc1&1)<<1) | (opc2>>1);
	}
	else
	{
		size = 32;
		index = (opc1 & 1);
		ONLY1(VFP_ASIMD_common);
	}
	if(params->opt->vfpual || (size != 32))
	{
		sprintf(params->buf,"VMOV%s.%d\tD%d[%d],%s",cc,size,D_Vd,index,REG(Rt));
	}
	else
	{
		sprintf(params->buf,"FMD%cR%s\tD%d,%s",(index?'H':'L'),cc,D_Vd,REG(Rt));
	}
	return;
}

VMOV_scalar_A1(cond,U,opc1,N:Vn,Rt,opc2,nonstandard)
{
	COMMON
	ONLY1(ASIMD);
	_UNPREDICTABLE(Rt==15);
	uint32_t size,index;
	const char *cc = condition(JUSTPARAMS,cond);
	if(opc1 & 2)
	{
		size = 8;
		index = ((opc1&1)<<2) | opc2;
	}
	else if(opc2 & 1)
	{
		size = 16;
		index = ((opc1&1)<<1) | (opc2>>1);
	}
	else
	{
		size = 32;
		index = (opc1 & 1);
		ONLY1(VFP_ASIMD_common);
	}
	if(params->opt->vfpual || (size != 32))
	{
		sprintf(params->buf,"VMOV%s.%s%d\t%s,D%d[%d]",cc,(size==32?"":(U?"U":"S")),size,REG(Rt),N_Vn,index);
	}
	else
	{
		sprintf(params->buf,"FMRD%c%s\t%s,D%d",(index?'H':'L'),cc,REG(Rt),N_Vn);
	}
	return;
}

VMOV_1fp_A1(cond,op,Vn:N,Rt,nonstandard)
{
	COMMON
	ONLY3(VFPv2,VFPv3,VFPv4);
	_UNPREDICTABLE(Rt==15);
	const char *cc = condition(JUSTPARAMS,cond);
	if(op)
		sprintf(params->buf,(params->opt->vfpual?"VMOV%s\t%s,S%d":"FMRS%s\t%s,S%d"),cc,REG(Rt),Vn_N);
	else
		sprintf(params->buf,(params->opt->vfpual?"VMOV%s\tS%d,%s":"FMSR%s\tS%d,%s"),cc,Vn_N,REG(Rt));
	return;
}

VMOV_2fp_A1(cond,op,Rt2,Rt,Vm:M,nonstandard)
{
	COMMON
	ONLY3(VFPv2,VFPv3,VFPv4);
	_UNPREDICTABLE((Rt==15) || (Rt2==15) || (Vm_M==31));
	const char *cc = condition(JUSTPARAMS,cond);
	if(op)
	{
		_UNPREDICTABLE(Rt==Rt2);
		sprintf(params->buf,(params->opt->vfpual?"VMOV%s\t%s,%s,S%d,S%d":"FMRRS%s\t%s,%s,{S%d,S%d}"),cc,REG(Rt),REG(Rt2),Vm_M,Vm_M+1);
	}
	else
		sprintf(params->buf,(params->opt->vfpual?"VMOV%s\tS%d,S%d,%s,%s":"FMSRR%s\t{S%d,S%d},%s,%s"),cc,Vm_M,Vm_M+1,REG(Rt),REG(Rt2));
	return;
}

VMOV_dbl_A1(cond,op,Rt2,Rt,M:Vm,nonstandard)
{
	COMMON
	ONLY1(VFP_ASIMD_common);
	_UNPREDICTABLE((Rt==15) || (Rt2==15));
	const char *cc = condition(JUSTPARAMS,cond);
	if(op)
	{
		_UNPREDICTABLE(Rt==Rt2);
		sprintf(params->buf,(params->opt->vfpual?"VMOV%s\t%s,%s,D%d":"FMRRD%s\t%s,%s,D%d"),cc,REG(Rt),REG(Rt2),M_Vm);
	}
	else
		sprintf(params->buf,(params->opt->vfpual?"VMOV%s\tD%d,%s,%s":"FMDRR%s\tD%d,%s,%s"),cc,M_Vm,REG(Rt),REG(Rt2));
	return;
}

VMUL_fp_A2(cond,D,Vn,Vd,sz,N,M,Vm,nonstandard)
{
	_UNDEFINED(sz && !VFPDP);
	COMMON
	ONLY3(VFPv2,VFPv3,VFPv4);
	VFP_CC_VD_VN_VM(JUSTPARAMS,"VMUL","FMUL",cond,sz,Vd,D,Vn,N,Vm,M);
	return;
}

VNEG_A2(cond,D,Vd,sz,M,Vm,nonstandard)
{
	_UNDEFINED(sz && !VFPDP);
	COMMON
	ONLY3(VFPv2,VFPv3,VFPv4);
	VFP_CC_VD_VM(JUSTPARAMS,"VNEG","FNEG",cond,sz,Vd,D,Vm,M);
	return;
}

VNMLA_VNMLS_VNMUL_A1(cond,D,Vn,Vd,sz,N,op,M,Vm,nonstandard)
{
	_UNDEFINED(sz && !VFPDP);
	COMMON
	ONLY3(VFPv2,VFPv3,VFPv4);
	VFP_CC_VD_VN_VM(JUSTPARAMS,(op?"VNMLA":"VNMLS"),(op?"FNMSC":"FMSC"),cond,sz,Vd,D,Vn,N,Vm,M);
	return;
}

VNMLA_VNMLS_VNMUL_A2(cond,D,Vn,Vd,sz,N,M,Vm,nonstandard)
{
	_UNDEFINED(sz && !VFPDP);
	COMMON
	ONLY3(VFPv2,VFPv3,VFPv4);
	VFP_CC_VD_VN_VM(JUSTPARAMS,"VNMUL","FNMUL",cond,sz,Vd,D,Vn,N,Vm,M);
	return;
}

VPOP_A1(cond,D:Vd,imm8,nonstandard)
{
	COMMON
	ONLY1(VFP_ASIMD_common);
	uint32_t regs = imm8>>1;
	_UNPREDICTABLE(!regs || (regs > 16) || ((D_Vd+regs) > 32));
	const char *fmt;
	if(imm8 & 1)
	{
		_UNPREDICTABLE(D_Vd+regs > 16);
		fmt = "FLDMIAX%s\t%s!,{";
	}
	else if(params->opt->vfpual)
		fmt = "VPOP%s\t{";
	else
		fmt = "FLDMIAD%s\t%s!,{";
		sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(13));
	if(regs > 1)
		scatf(params->buf,"D%d%cD%d}",D_Vd,(regs>2?'-':','),D_Vd+regs-1);
	else
		scatf(params->buf,"D%d}",D_Vd);
	return;
}

VPOP_A2(cond,Vd:D,imm8,nonstandard)
{
	COMMON
	ONLY1(VFP_ASIMD_common);
	uint32_t regs = imm8;
	_UNPREDICTABLE(!regs || ((Vd_D+regs) > 32));
	sprintf(params->buf,(params->opt->vfpual?"VPOP%s\t{":"FLDMIAS%s\t%s!,{"),condition(JUSTPARAMS,cond),REG(13));
	if(regs > 1)
		scatf(params->buf,"S%d%cS%d}",Vd_D,(regs>2?'-':','),Vd_D+regs-1);
	else
		scatf(params->buf,"S%d}",Vd_D);
	return;
}

VPUSH_A1(cond,D:Vd,imm8,nonstandard)
{
	COMMON
	ONLY1(VFP_ASIMD_common);
	uint32_t regs = imm8>>1;
	_UNPREDICTABLE(!regs || (regs > 16) || ((D_Vd+regs) > 32));
	const char *fmt;
	if(imm8 & 1)
	{
		_UNPREDICTABLE(D_Vd+regs > 16);
		fmt = "FSTMDBX%s\t%s!,{";
	}
	if(params->opt->vfpual)
		fmt = "VPUSH%s\t{";
	else
		fmt = "FSTMDBD%s\t%s!,{";
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(13));
	if(regs > 1)
		scatf(params->buf,"D%d%cD%d}",D_Vd,(regs>2?'-':','),D_Vd+regs-1);
	else
		scatf(params->buf,"D%d}",D_Vd);
	return;
}

VPUSH_A2(cond,Vd:D,imm8,nonstandard)
{
	COMMON
	ONLY1(VFP_ASIMD_common);
	uint32_t regs = imm8;
	_UNPREDICTABLE(!regs || ((Vd_D+regs) > 32));
	sprintf(params->buf,(params->opt->vfpual?"VPUSH%s\t{":"FSTMDBS%s\t%s!,{"),condition(JUSTPARAMS,cond),REG(13));
	if(regs > 1)
		scatf(params->buf,"S%d%cS%d}",Vd_D,(regs>2?'-':','),Vd_D+regs-1);
	else
		scatf(params->buf,"S%d}",Vd_D);
	return;
}

VSQRT_A1(cond,D,Vd,sz,M,Vm,nonstandard)
{
	_UNDEFINED(sz && !VFPDP);
	COMMON
	ONLY3(VFPv2,VFPv3,VFPv4);
	VFP_CC_VD_VM(JUSTPARAMS,"VSQRT","FSQRT",cond,sz,Vd,D,Vm,M);
	return;
}

VSTM_A1(cond,P,U,D:Vd,W,Rn,imm8,nonstandard)
{
	COMMON
	ONLY1(VFP_ASIMD_common);
	uint32_t regs = imm8>>1;
	_UNPREDICTABLE((Rn==15) && W);
	_UNPREDICTABLE(!regs || (regs > 16) || ((D_Vd+regs) > 32));
	const char *fmt;
	if(imm8 & 1)
	{
		_UNPREDICTABLE(D_Vd+regs > 16);
		fmt = "FSTM%sX%s\t%s%s,{";
	}
	else if(params->opt->vfpual)
		fmt = "VSTM%s%s\t%s%s,{";
	else
		fmt = "FSTM%sD%s\t%s%s,{";
	sprintf(params->buf,fmt,ldmmode(P,U),condition(JUSTPARAMS,cond),REG(Rn),(W?"!":""));
	if(regs > 1)
		scatf(params->buf,"D%d%cD%d}",D_Vd,(regs>2?'-':','),D_Vd+regs-1);
	else
		scatf(params->buf,"D%d}",D_Vd);
	return;
}

VSTM_A2(cond,P,U,Vd:D,W,Rn,imm8,nonstandard)
{
	COMMON
	ONLY1(VFP_ASIMD_common);
	uint32_t regs = imm8;
	_UNPREDICTABLE((Rn==15) && W);
	_UNPREDICTABLE(!regs || ((Vd_D+regs) > 32));
	sprintf(params->buf,(params->opt->vfpual?"VSTM%s%s\t%s%s,{":"FSTM%sS%s\t%s%s,{"),ldmmode(P,U),condition(JUSTPARAMS,cond),REG(Rn),(W?"!":""));
	if(regs > 1)
		scatf(params->buf,"S%d%cS%d}",Vd_D,(regs>2?'-':','),Vd_D+regs-1);
	else
		scatf(params->buf,"S%d}",Vd_D);
	return;
}

VSTR_A1(cond,U,D:Vd,Rn,imm8,nonstandard)
{
	COMMON
	ONLY1(VFP_ASIMD_common);
	sprintf(params->buf,(params->opt->vfpual?"VSTR%s\tD%d,[%s,#%s%d]":"FSTD%s\tD%d,[%s,#%s%d]"),condition(JUSTPARAMS,cond),D_Vd,REG(Rn),(U?"":"-"),imm8<<2);
	return;
}

VSTR_A2(cond,U,Vd:D,Rn,imm8,nonstandard)
{
	COMMON
	ONLY3(VFPv2,VFPv3,VFPv4);
	sprintf(params->buf,(params->opt->vfpual?"VSTR%s\tS%d,[%s,#%s%d]":"FSTS%s\tS%d,[%s,#%s%d]"),condition(JUSTPARAMS,cond),Vd_D,REG(Rn),(U?"":"-"),imm8<<2);
	return;
}

VSUB_fp_A2(cond,D,Vn,Vd,sz,N,M,Vm,nonstandard)
{
	_UNDEFINED(sz && !VFPDP);
	COMMON
	ONLY3(VFPv2,VFPv3,VFPv4);
	VFP_CC_VD_VN_VM(JUSTPARAMS,"VSUB","FSUB",cond,sz,Vd,D,Vn,N,Vm,M);
	return;
}

VMRS_A1(cond,reg,Rt,nonstandard)
{
	COMMON
	ONLY1(VFP_ASIMD_common);
	_UNPREDICTABLE((Rt==15) && (reg != 1));
	if(!vfp_mrs[reg].valid)
		warning(JUSTPARAMS,WARN_BAD_VFP_MRS_MSR);
	const char *rt=REG(Rt);
	const char *fmt;
	if(params->opt->vfpual)
	{
		fmt = "VMRS%s\t%s,%s";
		if(Rt==15)
			rt = "APSR_nzcv";
	}
	else
	{
		if((Rt==15) && (reg==1))
			fmt = "FMSTAT%s";
		else
			fmt = "FMRX%s\t%s,%s";
	}
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),rt,vfp_mrs[reg].str);
	return;
}

VMSR_A1(cond,reg,Rt,nonstandard)
{
	COMMON
	ONLY1(VFP_ASIMD_common);
	if(!vfp_msr[reg].valid)
		warning(JUSTPARAMS,WARN_BAD_VFP_MRS_MSR);
	sprintf(params->buf,(params->opt->vfpual?"VMSR%s\t%s,%s":"FMXR%s\t%s,%s"),condition(JUSTPARAMS,cond),vfp_msr[reg].str,REG(Rt));
	return;
}
