; This source code in this file is licensed to You by Castle Technology
; Limited ("Castle") and its licensors on contractual terms and conditions
; ("Licence") which entitle you freely to modify and/or to distribute this
; source code subject to Your compliance with the terms of the Licence.
; 
; This source code has been made available to You without any warranties
; whatsoever. Consequently, Your use, modification and distribution of this
; source code is entirely at Your own risk and neither Castle, its licensors
; nor any other person who has contributed to this source code shall be
; liable to You for any loss or damage which You may suffer as a result of
; Your use, modification or distribution of this source code.
; 
; Full details of Your rights and obligations are set out in the Licence.
; You should have received a copy of the Licence with this source code file.
; If You have not received a copy, the text of the Licence is available
; online at www.castle-technology.co.uk/riscosbaselicence.htm
; 

ExcDump_CodeVar_Template ROUT
        B       %FT10 ; Write entry point
        ; Read entry point
        ; Exit: R0 -> value, R2 = length
        Entry   "r12"
        LDR     r12, ExcDump_CodeVar_R12
        MOV     lr, pc
        LDR     pc, ExcDump_CodeVar_ReadPtr
        EXIT
10
        ; Write entry point
        ; Entry: R1 -> value, R2 = length
        Entry   "r12"
        LDR     r12, ExcDump_CodeVar_R12
        MOV     lr, pc
        LDR     pc, ExcDump_CodeVar_WritePtr
        EXIT
ExcDump_CodeVar_R12      DCD 0
ExcDump_CodeVar_ReadPtr  DCD 0
ExcDump_CodeVar_WritePtr DCD 0
ExcDump_CodeVar_Template_End

ExcDump_CodeVar_Init ROUT
        Entry   "r0-r4", ExcDump_CodeVar_Template_End - ExcDump_CodeVar_Template
        ; Use the stack as a temp buffer for constructing the code variable
        ADR     r0, ExcDump_CodeVar_Template_End
        MOV     r2, #ExcDump_CodeVar_Template_End - ExcDump_CodeVar_Template
        ADD     r1, sp, r2
10
        LDR     r3, [r0, #-4]!
        STR     r3, [r1, #-4]!
        CMP     r1, sp
        BNE     %BT10
        STR     r12, [sp, #ExcDump_CodeVar_R12-ExcDump_CodeVar_Template]
        ADR     r0, ExcDump_CodeVar_Read
        STR     r0, [sp, #ExcDump_CodeVar_ReadPtr-ExcDump_CodeVar_Template]
        ADR     r0, ExcDump_CodeVar_Write
        STR     r0, [sp, #ExcDump_CodeVar_WritePtr-ExcDump_CodeVar_Template]
        ADR     r0, ExcDump_CodeVar_Name
        MOV     r3, #0
        MOV     r4, #16
        SWI     XOS_SetVarVal
        FRAMSTR r0, VS
        EXIT

ExcDump_CodeVar_Shutdown ROUT
        Entry   "r0-r4"
        ADR     r0, ExcDump_CodeVar_Name
        MOV     r1, #0
        MOV     r2, #-1
        MOV     r3, #0
        MOV     r4, #16
        SWI     XOS_SetVarVal
        CLRV
        EXIT

; Exit: R0 -> value, R2 = length
ExcDump_CodeVar_Read ROUT
        Entry   "r1,r10"
        ADR     r0, DumpOptionsStr
        LDR     r1, DumpOptions
        TST     r1, #DumpOption_Collect
        BEQ     %FT10
        AddStr  ExcDump_CodeVar_None
        B       %FT90
10
        TST     r1, #DumpOption_HAL_Raw + DumpOption_HAL_Annotated
        BEQ     %FT20
        AddStr  ExcDump_CodeVar_HAL
        AddChar " "
        TST     r1, #DumpOption_HAL_Raw
        AddStr  ExcDump_CodeVar_Raw,NE
        TST     r1, #DumpOption_HAL_Raw
        TSTNE   r1, #DumpOption_HAL_Annotated
        AddChar ",", NE
        TST     r1, #DumpOption_HAL_Annotated
        AddStr  ExcDump_CodeVar_Annotated,NE
        TST     r1, #DumpOption_File_Raw + DumpOption_File_Annotated
        AddChar " ", NE
20
        TST     r1, #DumpOption_File_Raw + DumpOption_File_Annotated
        BEQ     %FT90
        AddStr  ExcDump_CodeVar_File
        AddChar " "
        TST     r1, #DumpOption_File_Raw
        AddStr  ExcDump_CodeVar_Raw,NE
        TST     r1, #DumpOption_File_Raw
        TSTNE   r1, #DumpOption_File_Annotated
        AddChar ",", NE
        TST     r1, #DumpOption_File_Annotated
        AddStr  ExcDump_CodeVar_Annotated,NE
90
        MOV     r10, #0
        STRB    r10, [r0]
        ADR     r2, DumpOptionsStr
        SUB     r2, r0, r2
        ADR     r0, DumpOptionsStr
        EXIT

        MACRO
        GetChar $reg
        SUBS    r2, r2, #1
        MOVLT   $reg, #0
        LDRGEB  $reg, [r1], #1
        MEND

ExcDump_CodeVar_Name
        = "Debugger$$DumpOptions", 0
ExcDump_CodeVar_HAL
        = "-hal", 0
ExcDump_CodeVar_File
        = "-file", 0
ExcDump_CodeVar_Raw
        = "raw", 0
ExcDump_CodeVar_Annotated
        = "annotated", 0
ExcDump_CodeVar_None
        = "-none", 0
        ALIGN
        ASSERT  ?DumpOptionsStr > :LEN: "-hal raw,annotated -file raw,annotated"

; Entry: R1 -> value, R2 = length
ExcDump_CodeVar_Write ROUT
        Entry   "r0-r8"
        MOV     r0, #0
10
        ; Look for an option
        GetChar r3
        CMP     r3, #" "
15
        BLT     %FT90
        BEQ     %BT10
        ADR     r4, ExcDump_CodeVar_None
        BL      MatchOption
        ORREQ   r0, r0, #DumpOption_Collect
        BEQ     %BT10
        ADR     r4, ExcDump_CodeVar_HAL
        BL      MatchOption
        MOVEQ   r8, #DumpOption_HAL_Raw+DumpOption_HAL_Annotated
        BEQ     %FT20
        ADR     r4, ExcDump_CodeVar_File
        BL      MatchOption
        BNE     %FT95        
        MOV     r8, #DumpOption_File_Raw+DumpOption_File_Annotated
20
        ; Look for flags
        GetChar r3
        CMP     r3, #" "
        BLT     %FT95
        BEQ     %BT20
25
        ADR     r4, ExcDump_CodeVar_Raw
        BL      MatchOption
        ANDEQ   r7, r8, #DumpOption_HAL_Raw+DumpOption_File_Raw
        BEQ     %FT30
        ADR     r4, ExcDump_CodeVar_Annotated
        BL      MatchOption
        BNE     %FT95
        ANDEQ   r7, r8, #DumpOption_HAL_Annotated+DumpOption_File_Annotated
30
        AND     r7, r7, r8
        ORR     r0, r0, r7
        GetChar r3
        CMP     r3, #" "
        BLE     %BT15
        CMP     r3, #","
        BNE     %FT95
        GetChar r3
        B       %BT25

90
        ; Success case
        ; Check for disallowed combinations (-none mixed with anything else)
        TST     r0, #DumpOption_Collect
        TEQNE   r0, #DumpOption_Collect
        BNE     %FT95
        LDR     r1, DumpOptions
        ; Enable/disable exception handler as appropriate
        MOVS    r2, r0
        MOVNE   r2, #1
        CMP     r1, #0
        MOVNE   r1, #1
        SUBS    r2, r2, r1
        ADR     lr, %FT92
        BGT     ExcDump_Init
        BLT     ExcDump_Shutdown
92
        STRVC   r0, DumpOptions
        FRAMSTR r0, VS
        EXIT
95
        ; Failure case
        PullEnv
        ADR     r0, ErrorBlock_DumpOptions
        B       CopyError 

; In:
; R1 -> string
; R2 = length
; R3 = first char of string
; R4 -> option string to match against
; Out:
; EQ: Success, R1, R2 updated
; NE: No match
MatchOption ROUT
        Entry   "r1-r5"
10
        LDRB    r5, [r4], #1
        CMP     r5, #0
        BEQ     %FT20
        CMP     r5, r3
        EXIT    NE
        GetChar r3
        B       %BT10
20
        ; Check the next char is space, comma, or null
        CMP     r3, #" "
        BLE     %FT90
        CMP     r3, #","
        EXIT    NE
90
        CMP     r3, r3 ; EQ
        SUB     r1, r1, #1 ; Wind back one char
        ADD     r2, r2, #1
        FRAMSTR R1
        FRAMSTR R2
        EXIT     
        
ErrorBlock_DumpOptions
        DCD     ErrorNumber_BadParameters
        DCB     "M97", 0
        ALIGN

ExcDump_Init ROUT
        Entry   "r0-r11", 12*4 + 4

        ; Allocate a buffer large enough to store the exception dump
        ; We need space for the following:
        ; * Error block (256 + 8)
        ; * Register dump (ExcDump_Reg_Count*4 + 8)
        ; * SVC, IRQ, ABT, UND stacks (??? + 12)*4
        ; * OS_Memory 16 items for the above (12 + 12*4)
        ; * IRQsema value (16)
        ; * IRQsema OS_RSI6 item (16)
        ; * Terminator (4)
        LDR     r4, =(256+8) + (ExcDump_Reg_Count*4 + 8) + (12*4) + (12+12*4) + 16 + 16 + 4
        ; Get stack details
        MOV     r5, sp
        LDR     r0, =16+(2<<8) ; IRQ
        SWI     XOS_Memory
        STMVCIA r5!, {r1-r3}
        ADDVC   r4, r4, r3

        LDRVC   r0, =16+(3<<8) ; SVC
        SWIVC   XOS_Memory
        STMVCIA r5!, {r1-r3}
        ADDVC   r4, r4, r3

        LDRVC   r0, =16+(4<<8) ; ABT
        SWIVC   XOS_Memory
        STMVCIA r5!, {r1-r3}
        ADDVC   r4, r4, r3

        LDRVC   r0, =16+(5<<8) ; UND
        SWIVC   XOS_Memory
        STMVCIA r5!, {r1-r3}
        ADDVC   r4, r4, r3

        ; Get other important info
        MOVVC   r0, #6
        MOVVC   r1, #0
        MOVVC   r2, #OSRSI6_IRQsema
        SWIVC   XOS_ReadSysInfo
        STRVC   r2, [r5]

        ; Allocate buffer
        MOVVC   r3, r4
        MOVVC   r0, #ModHandReason_Claim
        SWIVC   XOS_Module
        STRVC   r2, DumpBuffer
        STRVC   r3, DumpBufferLen
        BVS     %FT90

        ; Fill in all the block headers for the buffer
        MOV     r0, #256+8
        MOV     r1, #ExcDump_Chunk_Error
        STMIA   r2, {r0-r1}
        ADD     r2, r2, r0
        MOV     r0, #ExcDump_Reg_Count*4 + 8
        MOV     r1, #ExcDump_Chunk_Regs
        STMIA   r2, {r0-r1}
        ADD     r2, r2, r0
        MOV     r0, #12+12*4
        MOV     r1, #ExcDump_Chunk_OSMem16
        MOV     r3, #2
        STMIA   r2!, {r0-r1,r3}
        MOV     r5, sp
        LDMIA   r5, {r0-r1,r3-r11,lr} ; 12 regs 
        STMIA   r2!, {r0-r1,r3-r11,lr}
        ADD     r3, r3, #12
        MOV     r1, #ExcDump_Chunk_Memory
        STR     r3, [r2] ; Block length
        STR     r1, [r2, #4] ; Type
        STR     r0, [r2, #8] ; Base addr
        ADD     r2, r2, r3
        ADD     r0, r6, #12
        STMIA   r2, {r0, r1, r4}
        ADD     r2, r2, r0
        ADD     r0, r9, #12
        STMIA   r2, {r0, r1, r7}
        ADD     r2, r2, r0
        ADD     r0, lr, #12
        STMIA   r2, {r0, r1, r10}
        ADD     r2, r2, r0
        ; IRQsema value
        MOV     r0, #16
        LDR     r4, [sp, #12*4]
        STMIA   r2, {r0, r1, r4}
        ADD     r2, r2, r0
        ; IRQsema OSRSI6 item
        MOV     r1, #ExcDump_Chunk_OSRSI6
        MOV     r3, #OSRSI6_IRQsema
        STMIA   r2!, {r0, r1, r3, r4}
        ; Terminator
        MOV     r0, #0
        STR     r0, [r2]

        STR     r0, ExceptionBusy

        ; Claim vector
        MOV     r0, #SeriousErrorV
        ADR     r1, SeriousErrorVHandler
        MOV     r2, r12
        SWI     XOS_Claim
        EXIT    VC
        BL      ExcDump_Shutdown
        SETV
90
        FRAMSTR r0
        EXIT

ExcDump_Shutdown ROUT
        Entry   "r0-r2"
        ; Release vector
        MOV     r0, #SeriousErrorV
        ADR     r1, SeriousErrorVHandler
        MOV     r2, r12
        SWI     XOS_Release
        ; Release buffer
        MOV     r0, #ModHandReason_Free
        LDR     r2, DumpBuffer
        SWI     XOS_Module
        MOV     r2, #0
        STR     r2, DumpBuffer
        CLRV
        EXIT

        MACRO
        BankedRegs $mode, $name
        pvMSR   CPSR_c,#F32_bit+I32_bit+$mode
        pvMRS   r2, SPSR
        STMIA   r0!, {r13,r14}
        pvMSR   CPSR_c,#F32_bit+I32_bit+ABT32_mode
        STR     r2, [r0], #4
        MEND

        MACRO
        StackDump $mode
        LDR     r1, $mode.StackLimit
        LDR     r2, $mode.Stack
        SUB     r2, r2, r1
        BL      memcpy_advance
        MEND

; In:
; r2 = reason code
SeriousErrorVHandler
        CMP     r2, #SeriousErrorV_Collect
        BEQ     SeriousErrorVCollect
        CMP     r2, #SeriousErrorV_Report
        BEQ     SeriousErrorVReport
        CMP     r2, #SeriousErrorV_CustomReport
        BEQ     SeriousErrorVCustomReport
        MOV     pc, lr

; In:
; r0 -> register dump
; r1 -> error block (untranslated)
; ABT32 mode, IRQs + FIQs disabled
SeriousErrorVCollect ROUT
        Entry   "r0-r2"
        ; Check that we're meant to be doing something
        LDR     r2, DumpOptions
        CMP     r2, #0
        EXIT    EQ
        ; Avoid re-entrancy
        LDR     r2, ExceptionBusy
        CMP     r2, #0
        EXIT    NE
        MOV     r2, #1
        STR     r2, ExceptionBusy
        ; Iterate through the chunks and fill in the relevant ones
        ; The error block will be filled in in the second handler (once it's
        ; been translated)
        LDR     r0, DumpBuffer
10
        LDR     r1, [r0]
        CMP     r1, #0
        EXIT    EQ
        LDR     r2, [r0, #4]
        CMP     r2, #ExcDump_Chunk_Memory
        BEQ     %FT20
        CMP     r2, #ExcDump_Chunk_Regs
        ADDNE   r0, r0, r1
        BNE     %BT10
        ; Fill in the register dump
        ADD     r0, r0, #8
        MOV     r2, #17*4
        FRAMLDR r1,,r0
        BL      memcpy_advance
  [ PVirt > 0
        ASSERT  PVirt == 2
        Push    "r3-r5"
        MOV     r3, r0
        GetTLS
        LDR     r4, [r0, #vcpu_r13_usr]
        LDR     r5, [r0, #vcpu_r14_usr]
        STMIA   r3!, {r4, r5}
        MOV     r0, r3
        Pull    "r3-r5"
  |
        ; Grab R13-R14 from user mode
        STMIA   r0, {r13-r14}^
        ADD     r0, r0, #2*4
  ]
        ; Grab other important banked registers
        BankedRegs SVC32_mode
        BankedRegs IRQ32_mode
        BankedRegs ABT32_mode
        BankedRegs UND32_mode
        B       %BT10
20
        SUB     r2, r1, #12
        LDR     r1, [r0, #8]
        ADD     r0, r0, #12
        BL      memcpy_advance
        B       %BT10

; In:
; r0 -> dest
; r1 -> src
; r2 = length
; Out:
; r0 += r2
; r1 += r2
; r2 = 0
memcpy_advance ROUT
        Entry   "r3-r9"
05
        CMP     r2, #8*4
        BLT     %FT10
        LDMIA   r1!, {r3-r9,lr}
        SUBS    r2, r2, #8*4
        STMIA   r0!, {r3-r9,lr}
        BGT     %BT05
10
        SUBS    r2, r2, #4
        LDRGE   r3, [r1], #4
        STRGE   r3, [r0], #4
        BGT     %BT10
        EXIT

; In:
; r0 -> write function
; r1 = function param
ExcDump_WriteRaw ROUT
        Entry   "r0-r5"
        MOV     r5, r0
        MOV     r0, r1
        ; Write chunks
        LDR     r1, DumpBuffer
        LDR     r2, DumpBufferLen
        SUB     r2, r2, #4 ; No need to write terminator
        MOV     lr, pc
        MOV     pc, r5

 [ {FALSE} ; Application space
        SWI     XOS_GetEnv
        BVS     %FT90
        FRAMLDR r0
        SUBS    r4, r1, #&8000
        BEQ     %FT90
        ADD     r1, r4, #12
        MOV     r2, #ExcDump_Chunk_Memory
        MOV     r3, #&8000
        Push    "r1,r2,r3"
        MOV     r1, sp
        MOV     lr, pc
        MOV     pc, r5
        ADD     sp, sp, #12
        MOV     r1, #&8000
        MOV     r2, r4
        MOV     lr, pc
        MOV     pc, r5
 ]
90
        EXIT

; In: R0 -> error block
; Out: R0 corrupt
; Copy the error block into the dump
; n.b. assumes it's the first block!
ExcDump_CopyError ROUT
        Entry   "r1-r3"
        LDR     r1, DumpBuffer
        ADD     r1, r1, #8
        LDR     r2, [r0], #4
        STR     r2, [r1], #4
        MOV     r3, #251
        MOV     r2, #1
05
        CMP     r2, #0 ; Zero-fill the remainder of the buffer once end of message reached
        MOVNES  r2, r3 ; And ensure last byte is null
        LDRNEB  r2, [r0], #1
        STRB    r2, [r1], #1
        SUBS    r3, r3, #1
        BGE     %BT05
        EXIT

        IMPORT  ExcAnnotateAll

; In:
; r0 -> error block (translated)
; SVC mode, IRQs enabled
SeriousErrorVReport ROUT
        Entry   "r0-r12"
        ; Avoid re-entrancy
        LDR     r2, ExceptionBusy
        CMP     r2, #1
        EXIT    NE
        MOV     r2, #2
        STR     r2, ExceptionBusy

        BL      ExcDump_CopyError

        ; Check what we need to do
        LDR     r6, DumpOptions
        TST     r6, #DumpOption_HAL_Raw
        BEQ     %FT30

        MOV     r8, #OSHW_LookupRoutine
        MOV     r9, #EntryNo_HAL_DebugTX
        SWI     XOS_Hardware
        BVS     %FT30
        MOV     r2, #32
        Push    "r0,r1,r2"
        ADR     r0, ExcWriteHAL
        MOV     r1, sp
        BL      ExcDump_WriteRaw
        ADD     sp, sp, #12

30
        TST     r6, #DumpOption_HAL_Annotated
        BEQ     %FT60

        MOV     r8, #OSHW_LookupRoutine
        MOV     r9, #EntryNo_HAL_DebugTX
        SWI     XOS_Hardware
        BVS     %FT60
        Push    "r0,r1"
        ADR     r0, ExcPrintHAL
        MOV     r1, sp
        LDR     r2, DumpBuffer
        LDR     r3, DumpBufferLen
        MOV     lr, #ExcAnnotateAll_DescribeBlocks
        Push    "lr"
        ADD     sl, r12, #:INDEX:CRelocOffset ; Store workspace pointer/relocation offset in sl
        MOV     fp, #0
        BL      ExcAnnotateAll
        SUB     r12, sl, #:INDEX:CRelocOffset
        ADD     sp, sp, #12

60
        TST     r6, #DumpOption_File_Raw
        BEQ     %FT80

        MOV     r0, #OSFind_OpenOut + open_nopath
        ADR     r1, ExceptionFilename
        SWI     XOS_Find
        BVS     %FT90
        MOV     r5, r0
        MOV     r1, r0
        ADR     r0, ExcWriteFile
        BL      ExcDump_WriteRaw
        MOV     r0, #OSFind_Close
        MOV     r1, r5
        SWI     XOS_Find

80
        TST     r6, #DumpOption_File_Annotated
        BEQ     %FT90

        MOV     r0, #OSFind_OpenOut + open_nopath
        ADR     r1, ExceptionFilename2
        SWI     XOS_Find
        BVS     %FT90
        MOV     r5, r0
        MOV     r1, r0
        LDR     r2, DumpBuffer
        LDR     r3, DumpBufferLen
        ADR     r0, ExcPrintFile
        MOV     lr, #ExcAnnotateAll_DescribeBlocks
        Push    "lr"
        ADD     sl, r12, #:INDEX:CRelocOffset ; Store workspace pointer/relocation offset in sl
        MOV     fp, #0
        BL      ExcAnnotateAll
        SUB     r12, sl, #:INDEX:CRelocOffset
        ADD     sp, sp, #4
        MOV     r0, #OSFind_Close
        MOV     r1, r5
        SWI     XOS_Find
        MOV     r0, #OSFile_SetType
        ADR     r1, ExceptionFilename2
        LDR     r2, =FileType_Text
        SWI     XOS_File

90
        MOV     r2, #0
        STR     r2, ExceptionBusy
        EXIT

; In:
; r0 -> error block (translated)
; r1 = flags
; r3 = callback function
; r4 = callback R0
; SVC mode, IRQs enabled
SeriousErrorVCustomReport ROUT
        Entry   "r0-r12"
        ; Avoid re-entrancy
        LDR     r2, ExceptionBusy
        CMP     r2, #1
        EXIT    NE
        MOV     r2, #2
        STR     r2, ExceptionBusy

        BL      ExcDump_CopyError

        ; Check what we need to do
        TST     r1, #SeriousErrorV_CustomReport_Annotated
        MOV     r0, r3
        MOV     r1, r4
        BNE     %FT50
        ; Raw dump
        BL      ExcDump_WriteRaw
        B       %FT90
50
        ; Annotated dump
        LDR     r2, DumpBuffer
        LDR     r3, DumpBufferLen
        ADD     sl, r12, #:INDEX:CRelocOffset ; Store workspace pointer/relocation offset in sl
        MOV     fp, #0
        Push    "fp" ; No flags. TODO - expose flags via SeriousErrorV somehow.
        BL      ExcAnnotateAll
        SUB     r12, sl, #:INDEX:CRelocOffset
        ADD     sp, sp, #4
90
        MOV     r2, #0
        STR     r2, ExceptionBusy
        EXIT


; r0 -> HAL_DebugTX addr + sb
; r1 -> string
ExcPrintHAL
        Entry  "r4-r5,r9"
        LDMIA  r0, {r4, r9}
        MOV    r5, r1
10
        LDRB   r0, [r5], #1
        CMP    r0, #0
        EXIT   EQ
        ADR    lr, %BT10
        MOV    pc, r4

; r0 -> file handle
; r1 -> string
ExcPrintFile
        Entry  "r4"
        MOV    r3, #0
10
        LDRB   r2, [r1, r3]
        CMP    r2, #0
        ADDNE  r3, r3, #1
        BNE    %BT10
        MOV    r2, r1
        MOV    r1, r0
        MOV    r0, #OSGBPB_WriteAtPTR
        SWI    XOS_GBPB
        EXIT

; r0 -> HAL_DebugTX addr + sb + column counter
; r1 -> buffer
; r2 = length
; Out: All regs preserved
ExcWriteHAL
        Entry  "r0-r10"
        LDMIA  r0, {r4, r9, r10}
        MOV    r5, r1
        MOV    r6, r2
        ; Output in hex rather than raw binary
        ADR    r8, hextab
10
        LDRB   r7, [r5], #1
        LDRB   r0, [r8, r7, LSR #4]
        MOV    lr, pc
        MOV    pc, r4
        AND    r7, r7, #&f
        LDRB   r0, [r8, r7]
        MOV    lr, pc
        MOV    pc, r4
        SUBS   r10, r10, #1
        MOVEQ  r10, #32
        MOVEQ  r0, #10
        MOVEQ  lr, pc
        MOVEQ  pc, r4
        SUBS   r6, r6, #1        
        BNE    %BT10
        FRAMLDR r0
        STR     r10, [r0, #8]        
        EXIT

hextab
        = "0123456789abcdef"
        ALIGN

; r0 -> file handle
; r1 -> buffer
; r2 = length
; Out: All regs preserved
ExcWriteFile
        Entry  "r0-r4"
        MOV    r3, r2
        MOV    r2, r1
        MOV    r1, r0
        MOV    r0, #OSGBPB_WriteAtPTR
        SWI    XOS_GBPB
        EXIT

; __value_in_regs excresult ExcPeekMem2(exc_context_t *ctx, uint32_t addr)
        EXPORT ExcPeekMem2
ExcPeekMem2    ROUT
        Entry
        SUB     r12, sl, #:INDEX:CRelocOffset
        ; Check address directly
        BIC     a1, a2, #3
        ADD     a2, a1, #4
        SWI     XOS_ValidateAddress
        LDRCC   a1, [a1]
        MOVCC   a2, #1
        MOVCS   a1, #0
        MOVCS   a2, #0
        EXIT
90
        BIC     a3, a3, #3
        LDR     a1, [a1, a3]
        MOV     a2, #1
        EXIT

; const char *ExcGetMsg(exc_context_t *ctx, exc_msg msg)
        EXPORT  ExcGetMsg
ExcGetMsg       ROUT
        Entry   "r10"
        SUB     r12, sl, #:INDEX:CRelocOffset
        ADR     r10, ExceptionMsgs
        ADD     r10, r10, r1, LSL #2
        LDRB    r0, [r10]
        CMP     r0, #0
        BLNE    lookup_r10
        MOV     r0, r10
        EXIT

; __value_in_regs romsymtable ExcGetROMSymbols(void)
        EXPORT  ExcGetROMSymbols
ExcGetROMSymbols ROUT
        LDR     r0, [sl, #:INDEX:ROMDebugSymbols-:INDEX:CRelocOffset]
        LDR     r1, [sl, #:INDEX:ROMBaseAddr-:INDEX:CRelocOffset]
        MOV     pc, lr

ExceptionFilename = "<Debugger$$RawFile>", 0
        ALIGN

ExceptionFilename2 = "<Debugger$$AnnotatedFile>", 0
        ALIGN

ExceptionMsgs
        = 0,0,0, 0 ; EXC_MSG_NONE
        = "X00", 0 ; EXC_MSG_SWI
        = "X01", 0 ; EXC_MSG_MAYBEPSR
        = "X02", 0 ; EXC_MSG_R14_DESC
        = 0,0,0, 0 ; EXC_MSG_REGNO
        = "X03", 0 ; EXC_MSG_IRQSEMA
        = "X04", 0 ; EXC_MSG_PSR
        = "X05", 0 ; EXC_MSG_ASMCALL
        = "X06", 0 ; EXC_MSG_RETURN_2DESC
        = "X07", 0 ; EXC_MSG_APCS
        = "X08", 0 ; EXC_MSG_CMHG_R0
        = "X09", 0 ; EXC_MSG_CMHG_RN
        = "X10", 0 ; EXC_MSG_CMHG_R9
        = "X11", 0 ; EXC_MSG_RETURN_1DESC
        = "X12", 0 ; EXC_MSG_APCS_BROKEN
        = "X13", 0 ; EXC_MSG_UNKNOWN
        = "X14", 0 ; EXC_MSG_OUT_OF_ANNOT
        = "X15", 0 ; EXC_MSG_DUMP_CORRUPT
        = "X16", 0 ; EXC_MSG_BLOCK_MEM
        = "X17", 0 ; EXC_MSG_BLOCK_OSRSI6
        = "X18", 0 ; EXC_MSG_BLOCK_ERROR
        = "X19", 0 ; EXC_MSG_BLOCK_OSMEM16
        = "X20", 0 ; EXC_MSG_IRQ_STACK
        = "X21", 0 ; EXC_MSG_SVC_STACK
        = "X22", 0 ; EXC_MSG_USR_STACK
        = "X23", 0 ; EXC_MSG_END
        = "X24", 0 ; EXC_MSG_CALLTO

        END
