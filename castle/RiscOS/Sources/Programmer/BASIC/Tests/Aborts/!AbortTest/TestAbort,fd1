REM TestAbort program                  v4  Martin Avison
REM Creates all sorts of errors and aborts for Basic to handle.

ON ERROR PRINT REPORT$,ERL:END

REM Check if Reporter is available for nice test output
SYS "XOS_Module",18,"Reporter" TO ;rc%
rep% = (rc% AND1)=0           :REM TRUE is Reporter is running
IF rep% THEN
  *ReportClear
  REM Just to keep output small...
  *ReportCmdOff
  *ReportErrOff
ELSE
  MODE MODE         :REM because window is sooo small!
ENDIF


SYS "OS_Module",18,"BASIC" TO ,,,mod%
ver$ = FNz(mod%+mod%!&14)               :REM Basic module help string
PROCrep("\G","TestAbort v4 starting           "+ver$)

REM Load all assembler programs for CALL & USR...
abortNone% = FNload("<AbortTest$Dir>.abortNone")
abortUnd%  = FNload("<AbortTest$Dir>.abortUnd" )
abortIF%   = FNload("<AbortTest$Dir>.abortIF"  )
abortData% = FNload("<AbortTest$Dir>.abortData")
abortVset% = FNload("<AbortTest$Dir>.abortVset")

PROCrep("\G","Test "+FNl("Description",25)+FNr("ERL",4)+FNr("ERR",10)+"  "+"Error Message")
FOR T% = 0 TO 99
  PROCtest(T%)
NEXT
PROCrep("\G","BasicFix Test complete")
END

DEF PROCtest(t%)
LOCAL t$,h$
LOCAL ERROR
ON ERROR LOCAL PROCerror:RESTORE ERROR:    ENDPROC          :REM Recover?!
CASE t% OF
  REM Test    Description                 Action
  WHEN  0:h$="Test all works ok"
  WHEN  1:t$="CALL"                     : CALL abortNone%
  WHEN  2:t$="USR"                      : X% = USR abortNone%
  WHEN  3:t$="SYS"                      : SYS "Abort_None"
  WHEN  4:t$="CLI"                      : *abortNone
  WHEN  5:t$="OSCLI"                    : OSCLI "abortNone"

  WHEN 20:h$="Test errors - Normally ERL ok"
  WHEN 21:t$="error Basic"              : unknown
  WHEN 22:t$="error OS"                 : *unknown
  WHEN 23:t$="error SYS Vset"           : SYS "Abort_Vset"
  WHEN 24:t$="error CALL Vset"          : CALL abortVset%
  WHEN 25:t$="error USR  Vset"          : X% = USR abortVset%
  WHEN 26:t$="error Module CLI   Vset"  : *abortVset
  WHEN 27:t$="error Module OSCLI Vset"  : OSCLI "abortVset"
  WHEN 28:t$="error File CLI Vset"      : *<AbortTest$Dir>.abortVset
  WHEN 29:t$="error File OSCLI Vset"    : OSCLI "<AbortTest$Dir>.abortVset"

  WHEN 40:h$="Test aborts - Normally wrong ERL"
  WHEN 41:t$="abort SYS Und"            : SYS "Abort_Und"
  WHEN 42:t$="abort SYS IF"             : SYS "Abort_IF"
  WHEN 43:t$="abort SYS Data"           : SYS "Abort_Data"
  WHEN 44:t$="abort CALL Und"           : CALL abortUnd%
  WHEN 45:t$="abort CALL IF"            : CALL abortIF%
  WHEN 46:t$="abort CALL Data"          : CALL abortData%
  WHEN 47:t$="abort USR Und"            : X% = USR abortUnd%
  WHEN 48:t$="abort USR IF"             : X% = USR abortIF%
  WHEN 49:t$="abort USR Data"           : X% = USR abortData%
  WHEN 50:t$="abort Module CLI Und"     : *AbortUnd
  WHEN 51:t$="abort Module CLI IF"      : *AbortIF
  WHEN 52:t$="abort Module CLI Data"    : *AbortData
  WHEN 53:t$="abort Module OSCLI Und"   : OSCLI "abortUnd"
  WHEN 54:t$="abort Module OSCLI IF"    : OSCLI "abortIF"
  WHEN 55:t$="abort Module OSCLI Data"  : OSCLI "abortData"

  WHEN 80:h$="Test aborts - Normally bad r13 & END"
  WHEN 81:t$="abort Basic Data"         : SYS "OS_Module",18,"Desktop" TO ,,,A%:!A% = 123
  WHEN 82:t$="abort File CLI Und"       : *<AbortTest$Dir>.abortUnd
  WHEN 83:t$="abort File CLI IF"        : *<AbortTest$Dir>.abortIF
  WHEN 84:t$="abort File CLI Data"      : *<AbortTest$Dir>.abortData
  WHEN 85:t$="abort File OSCLI Und"     : OSCLI "<AbortTest$Dir>.abortUnd"
  WHEN 86:t$="abort File OSCLI IF"      : OSCLI "<AbortTest$Dir>.abortIF"
  WHEN 87:t$="abort File OSCLI Data"    : OSCLI "<AbortTest$Dir>.abortData"

  REM OTHERWISE Missing tests are just ignored
ENDCASE
IF h$<>"" THEN PROCrep("\Y",STRING$(20,"=")+" "+h$+" "+STRING$(50-LEN h$,"=")+"""")
IF t$<>"" THEN PROCrep("\g",FNr(STR$t%,3)+"  "+FNl(t$,25)+"no error raised")
ENDPROC

DEF PROCerror
LOCAL c$,O$
IF ERL>1000 THEN c$="\R" ELSE c$="\r" :REM Emphasise last line ERL
O$=FNr(STR$t%,3)+"  "+FNl(t$,25)+FNr(STR$ERL,4)+FNr(STR$~(ERR),10)+"  "+REPORT$
PROCrep(c$,O$)
ENDPROC

DEF FNl(A$,L%) = A$+STRING$(L%-LENA$," ")
DEF FNr(A$,L%) = STRING$(L%-LENA$," ")+A$

DEF PROCrep(C$,T$)            :REM cater for PRINT output and Reporter
IF C$<>"" THEN C$=C$+" "
IF rep%   THEN
  IF C$="\Y " THEN *Report
  OSCLI("Report "+C$++""""+T$+"""")
ELSE
  IF C$="\Y " THEN PRINT 'T$ ELSE PRINT T$
ENDIF
ENDPROC

DEF FNload(file$)             :REM load Utility to memory for CALL & USR
LOCAL obj%,len%,code%
SYS "OS_File",17,file$ TO obj%,,,,len%
IF obj% <> 1 THEN ERROR 1,"Cannnot find "+file$
DIM code% len%
SYS "OS_File",16,file$,code%,1<<31
REM *Report Loaded ~code% file$ len%
=code%

DEF FNz(A%)
LOCAL C$
WHILE ?A%<>0
  IF ?A%=9 THEN C$+=" " ELSE  C$+=CHR$(?A%)
  A%+=1
ENDWHILE
=C$

REM Last line!
