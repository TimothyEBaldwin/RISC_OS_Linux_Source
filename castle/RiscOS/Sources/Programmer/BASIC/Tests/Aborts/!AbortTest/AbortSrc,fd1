REM AbortSrc
REM For creating commands and SWIs that abort!

REM 16/11/2012 v0.01 Martin Avison created on Iyonix
REM 21/11/2012 v0.02 Tried to make fail better(!) on VRPC
REM                  Now 'works' on Iyonix, BeagleBoard, RPC(SA), & VRP
REM 28/11/2012 v0.03 Changed Path$

ON ERROR PROCerr

Ver$     = FNver("0.03")
Name$    = "Aborter"          :REM for Module name and Title
Path$    = "<AbortTest$Dir>."
Author$  = "© Martin Avison, 2012"

SwiChunk = &054F80            :REM NOT Registered!
bad12%   = &230000            :REM value to corrupt r12 with

PROCinit(FALSE,TRUE,TRUE)     :REM List, Save, Run
END

REM**********************************************************************
DEF FNver(A$) = A$ + " ("+MID$(TIME$,5,11)+")"

DEF PROCcompile
opt%=pass%  +  (1<<4)
[OPT opt%
;***********************************************************************
;***   Module Header                                                 ***
;***********************************************************************
.ModuleStart
      EQUD    0              ; Start-up code
      EQUD    0              ; Initialisation code
      EQUD    0              ; Finalisation code
      EQUD    0              ; Service call code
      EQUD    title          ; Module title
      EQUD    helpstring     ; Module help
      EQUD    commandtable   ; Keyword help
EQUD  SwiChunk
EQUD  swihandler
EQUD  SwiTable
EQUD  0                       ; SWI decoding code offset
EQUD  0                       ; Message file offset
EQUD  FlagsOffset             ;
.FlagsOffset EQUD 1           ; Indicate 32 bit compatible

.title        EQUS  Name$+CHR$0
.helpstring   EQUS  Name$+tab$+Ver$+"  "+Author$+CHR$0
ALIGN
;***********************************************************************
;***   Command Table Entry Code                                      ***
;***********************************************************************
.commandtable
      FNcmd("abortNone"    ,255,abortNone    ,0     ,0)
      FNcmd("abortUnd"     ,255,abortUnd     ,0     ,0)
      FNcmd("abortIF"      ,255,abortIF      ,0     ,0)
      FNcmd("abortData"    ,255,abortData    ,0     ,0)
      FNcmd("abortVset"    ,255,abortVset    ,0     ,0)
      EQUD    0                                   ; end of commands
ALIGN

;***********************************************************************
;***   SWI Name Table                                                ***
;***********************************************************************

.SwiTable
EQUS   "Abort"       :EQUB 0            ; base name
EQUS   "None"        :EQUB 0
EQUS   "Und"         :EQUB 0
EQUS   "IF"          :EQUB 0
EQUS   "Data"        :EQUB 0
EQUS   "Vset"        :EQUB 0
EQUB   0:ALIGN

.swihandler
CMP       r11,#(SwiTableEnd-SwiTableStart)/4
ADDLO     pc,pc,r11,LSL #2
B         swierr
.SwiTableStart
B         abortNone                      ;  0
B         abortUnd                       ;  0
B         abortIF                        ;  0
B         abortData                      ;  0
B         abortVset                      ;  0
.SwiTableEnd

.swierr
ADR       r0,NoSwi
B         SetVandReturn
.NoSwi    EQUD &1E6: EQUS Name$+" SWI unknown"
          EQUB 0
ALIGN
.SetVandReturn                          ;
TEQ       r0, r0                        ; sets Z (can omit if not User mode)
TEQ       pc, pc                        ; EQ if in a 32-bit mode, NE if 26-bit
ORRNES    pc, r14, #V_bit               ; 26 bit - return with V set
MSR       CPSR_f,#V_bit                 ; 32 bit - set V flag
MOV       pc,r14                        ; 32 bit - and return

; These 5 Module commands are also SWIs, and copied to disc as disc commands.
; Each command must be self-contained, otherwise disc commands fail nastily!
.abortNone
MOV       r12,#bad12%         ; deliberately corrupt r12
MOV       PC,r14

.abortUnd
MOV       r12,#bad12%         ; deliberately corrupt r12
EQUD      &EE123456           ; co-pro CDP ->  Undefined instruction
MOV       PC,r14

.abortData
MOV       r10,r14
MOV       r12,#bad12%         ; deliberately corrupt r12
MOV       r0,#18
ADR       r1,desktop          ; find a rom address
SWI       "OS_Module"
STR       r1,[r3]             ; try to save over ROM -> Data abort
MOV       PC,r10
.desktop  EQUS "Desktop"+CHR$0:ALIGN

.abortIF
MOV       r12,#bad12%         ; deliberately corrupt r12
MOV       r0,#&1000000        ; initial start address

.loopIF
MOV       r10,r14
ADD       r1,r0,#8
SWI       "OS_ValidateAddress"; look for an invalid address to branch to
MOVcs     pc,r0               ; invalid, branch -> Instruction Fetch Abort
ADDS      r0,r0,#&1000000
Bcc       loopIF              ; not got to zero yet, so try next
MOV       PC,r10

.abortVset
MOV       r12,#bad12%         ; deliberately corrupt r12
ADR       r0,ErrBlk
TEQ       r0, r0                        ; sets Z (can omit if not User mode)
TEQ       pc, pc                        ; EQ if in a 32-bit mode, NE if 26-bit
ORRNES    pc, r14,#V_bit                ; 26 bit - return with V set
MSR       CPSR_f,#V_bit                 ; 32 bit - set V flag
MOV       pc,r14                        ; 32 bit - and return

.ErrBlk   EQUD 123
          EQUS "V set"+CHR$0:ALIGN

.end

;***********************************************************************
]
ENDPROC

DEF FNcmd(cmd$,parms%,cmd%,syn%,help%)
[OPT opt%
      EQUS    cmd$+CHR$0
      ALIGN
      EQUD    cmd%
      EQUD    parms% << 16   ; &00FF0000
      EQUD    syn%
      EQUD    help%
]
=0

DEFPROCinit(list%,save%,run%)
 tab$ = CHR$9
 DIM code% 1024,L%-1
 sp=13:link=14:pc=15
 V_bit       = 1   << 28
 PRINT"Compiling "Name$" "Ver$'
 FOR pass%=12 TO 14+ABS(list%) STEP 2+ABS(list%)
  P%=0:O%=code%
  T%=TIME:PROCcompile:T%=TIME-T%
  PRINT "Pass ";pass%;" compiled OK, time taken : "T%
 NEXT
 PRINT'"Module size : ";P%;" bytes. (&"+STR$~P%+")"
 IF save% PROCsave:IF run% PROCrun
ENDPROC

DEFPROCsave
 SYS "OS_File",10,Path$+Name$      ,&FFA,,code%,code%+P%
 PRINT'"Module saved as '"+Path$+Name$+"'"
 SYS "OS_File",10,Path$+"abortNone",&FFC,,code%+abortNone,code%+abortUnd
 SYS "OS_File",10,Path$+"abortUnd" ,&FFC,,code%+abortUnd ,code%+abortData
 SYS "OS_File",10,Path$+"abortData",&FFC,,code%+abortData,code%+abortIF
 SYS "OS_File",10,Path$+"abortIF"  ,&FFC,,code%+abortIF  ,code%+abortVset
 SYS "OS_File",10,Path$+"abortVset",&FFC,,code%+abortVset,code%+end
 PRINT "Commands saved"
ENDPROC

DEFPROCrun
 OSCLI "Filer_Run "+Path$+Name$
 OSCLI "RMRun "    +Path$+Name$
 PRINT'"Module loaded"
ENDPROC

DEF PROCerr
PRINT REPORT$,ERL
END
