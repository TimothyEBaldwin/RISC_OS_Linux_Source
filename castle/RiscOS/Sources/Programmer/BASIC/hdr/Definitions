; This source code in this file is licensed to You by Castle Technology
; Limited ("Castle") and its licensors on contractual terms and conditions
; ("Licence") which entitle you freely to modify and/or to distribute this
; source code subject to Your compliance with the terms of the Licence.
; 
; This source code has been made available to You without any warranties
; whatsoever. Consequently, Your use, modification and distribution of this
; source code is entirely at Your own risk and neither Castle, its licensors
; nor any other person who has contributed to this source code shall be
; liable to You for any loss or damage which You may suffer as a result of
; Your use, modification or distribution of this source code.
; 
; Full details of Your rights and obligations are set out in the Licence.
; You should have received a copy of the Licence with this source code file.
; If You have not received a copy, the text of the Licence is available
; online at www.castle-technology.co.uk/riscosbaselicence.htm
; 
;> Definitions

                               TTL     Definitions used by BASIC

; BASIC's stack structure [SP,SP+4,SP+8...]:
;
; GOSUB.RETURN       is TRETURN, ADDR
; REPEAT.UNTIL       is TUNTIL, ADDR
; WHILE.ENDWHILE     is TENDWH, block start ADDR, expr start ADDR
; integer FOR.NEXT   is TNEXT, varaddr, ADDR, step, limit
; fp FOR.NEXT        is TFOR, varaddr, ADDR, step (8), limit (8)
; FN                 is n words on stack, the bottom being TFN
; PROC               is n words on stack, the bottom being TPROC
; LOCAL A(X)         is 256+{4,5,128}, linklist, address, numbytes, arraylist
; LOCAL ERROR        is TERROR, !ERRSTK, !ERRORH
; DIM var LOCAL expr is TDIM, bytes (rounded upto whole multiple of 4), linklist (going up the stack)

; BASIC VCache structure:
;
; variable   IACC, MOVEBY, CHECK, TYPE
; number     IACC, MOVEBY, CHECK, TYPE
; GOTO       R1,   MOVEBY, CHECK
; THENline   R1,         , CHECK
; FN/PROC    IACC, MOVEBY, CHECK, ( or not

 [ FPOINT=0
FACC    RN      R0
FACCX   RN      R1
FGRD    RN      R2
FSIGN   RN      R3
FWACC   RN      R4
FWACCX  RN      R5
FWGRD   RN      R6
FWSIGN  RN      R7
 ELIF FPOINT=1
FACC    FN      0
F1      FN      1
F2      FN      2
F7      FN      7
 ELIF FPOINT=2
FACC    DN      0
 |
        ! 1, "Unknown FPOINT setting"
 ]
IACC    RN      R0                     ;pointer to some data (i.e. a variable's value)
CLEN    RN      R2                     ;actually contains STRACC+CLEN
ARGP    RN      R8                     ;workspace pointer
TYPE    RN      R9                     ;type of a variable/expression
AELINE  RN      R11                    ;pointer to some interesting part of the current line
LINE    RN      R12                    ;pointer to the current position in the program (i.e. for errors)
SOURCE  RN      R1
DEST    RN      R2
MODE    RN      R3
CONSTA  RN      R4                     ;0 for none, tconst for allowed
SMODE   RN      R5

; Types...
TINTEGER                        *      &40000000              ;string TYPE is 0
TFP                             *      &80000000
TEFP                            *      &20000000
 [ FPOINT=0
TFPLV                           *      5
 |
TFPLV                           *      8
 ]

; Macros...

        ;pull and junk n items from stack
        MACRO
$L      PULLJ   $N
$L      ADD     SP,SP,#4*$N
        MEND

        ;allow space for n items from stack
        MACRO
$L      PUSHJ   $N
$L      SUB     SP,SP,#4*$N
        MEND

        ;load misaligned 5-byte value using 2 other registers
        ;and sets Z depending upon whether the value is 0
        ;$DEST1 must be below $DEST2
        MACRO
$L      LOAD5   $DEST1,$DEST2,$ADDR,$W1,$W2
$L
        ASSERT  $DEST1 < $DEST2
    [ NoARMv6 :LOR: NoUnaligned
        ; Mustn't use v6-only features. May or may not need to run on v6 processors.
        ANDS    $W1,$ADDR,#3
      [ SupportARMv6
        BIC     $W2,$ADDR,#3
        LDMIA   $W2,{$DEST1,$DEST2}
      |
        LDMIA   $ADDR,{$DEST1,$DEST2}
      ]
        MOVNE   $W1,$W1,LSL #3
        MOVNE   $DEST1,$DEST1,LSR $W1
        RSBNE   $W2,$W1,#32
        ORRNE   $DEST1,$DEST1,$DEST2,LSL $W2
        MOVNE   $DEST2,$DEST2,LSR $W1
        ANDS    $DEST2,$DEST2,#255
        TEQEQ   $DEST1,#0
    |
        ; OK to use v6-only features
      [ $DEST1 = $ADDR
        LDRB    $DEST2,[$ADDR,#4]
        LDR     $DEST1,[$ADDR]
      |
        LDR     $DEST1,[$ADDR]
        LDRB    $DEST2,[$ADDR,#4]
      ]
        TEQ     $DEST1,#0
        TEQEQ   $DEST2,#0
    ]
        MEND

 [ FPOINT=0
        ;save fp acc to address in TYPE [Format 2 only]
        MACRO
$L      FSTA    $ADDR
$L      ORR     FGRD,FSIGN,FACCX
        STMIA   $ADDR,{FACC,FGRD}
        MEND
        MACRO
$L      FPUSH
$L      ORR     FGRD,FSIGN,FACCX
        STMFD   SP!,{FACC,FGRD}
        MEND
        MACRO
$L      FLDA    $ADDR
$L      LDMIA   $ADDR,{FACC,FACCX}
        AND     FSIGN,FACCX,#&80000000
        AND     FACCX,FACCX,#255
        MEND
 ELIF FPOINT=1
        MACRO
$L      FPUSH
$L      STFD    FACC,[SP,#-8]!
        MEND
 ELIF FPOINT=2
        MACRO
$L      FPUSH
$L      FSTD    FACC,[SP,#-8]!
        MEND

        ; Check for VFP exceptions
        ; Corrupts NZ, $temp
        MACRO
        FPSCRCheck $temp, $dest
        FMRX    $temp,FPSCR
        TST     $temp,#FPSCR_IOC+FPSCR_DZC+FPSCR_OFC
        BNE     VFPException$dest
        MEND

        ;VFP FACC -> FPA F0
        MACRO
        FACCtoFPA$cc
        ASSERT  FACC=0
        FSTS$cc S0,[SP,#-4]!
        FSTS$cc S1,[SP,#-4]!
        LDF$cc.D F0,[SP],#8
        MEND

        ;FPA F0 -> VFP FACC
        MACRO
        FPAtoFACC
        ASSERT  FACC=0
        STFD    F0,[SP,#-8]!
        FLDS    S1,[SP],#4
        FLDS    S0,[SP],#4
        MEND

        MACRO
        FPAop $op
        ! 0, "TODO native $op"
        FACCtoFPA
        $op F0,F0
        FPAtoFACC
        MEND
 |
        ! 1, "Unknown FPOINT setting"
 ]

        ;do an expression
        MACRO
        EXPRCALL
        ADR     R4,AJ7
        BIC     R14,R10,#&FF000000
        ADD     PC,R4,R14,LSL #2
        MEND

                               END
