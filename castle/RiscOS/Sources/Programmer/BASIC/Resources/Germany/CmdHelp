#Untranslated: HASM

HAND:Diese Funktion führt das bitweise logische UND zwischen zwei Zahlen aus. Priorität 6.
HABS:Diese Funktion gibt den absoluten Wert einer Zahl zurück (<Faktor>).
HACS:Diese Funktion gibt den Arcuscosinus einer Zahl zurück (<Faktor>).
HADVAL:Diese Funktion gibt den Wert der angegebenen analogen Schnittstelle oder des angegebenen Puffers zurück.
HASC:Diese Funktion gibt den ASCII- bzw. ISO-Code des ersten Zeichens einer Zeichenkette zurück.
HASN:Diese Funktion gibt den Arcussinus einer Zahl zurück (<Faktor>).
HATN:Diese Funktion gibt den Arcustangens einer Zahl zurück (<Faktor>).
HAUTO:AUTO [<Erste Zeile>[,<Schrittweite>]] generiert Zeilennummern zum Eingeben eines Programms.
HAPPEND:Dieses Kommando fügt eine Datei an das Programm an und numeriert die angefügten Zeilen neu.
HBGET:BGET#<Dateireferenz> gibt das nächste Byte aus der angegebenen Datei zurück.
HBPUT:BPUT#<Dateireferenz>,<Wert> schreibt das Byte in die geöffnete Datei.BPUT#<Dateireferenz>,<Zeichenkette>[;] schreibt die Zeichenkette in die geöffnete Datei, mit [ohne] Zeilenvorschub.
HBEATS:BEATS <Ausdruck> setzt die Anzahl der Schläge pro Takt. Als Funktion gibt BEATS die aktuelle Anzahl der Schläge pro Takt zurück.
HBEAT:Diese Funktion liefert die aktuelle Zahl von Schlägen pro Takt.
HCOLOUR:COLOUR a [TINT t] setzt Vordergrundfarbe [und Helligkeit] (Hintergrund 128+a).COLOUR a,p setzt den Paletteneintrag der logischen Farbe a auf die physikalische Farbe p.COLOUR a,r,g,b setzt den Paletteneintrag für a auf die physikalische Farbe r, g, b.
HCONST:Diese Anweisung leitet eine Zeilenummerreferenz in internen Format ein.
HCALL:CALL<Ausdruck>[,<Variable>]^: Ruft Maschinencode auf.
HCASE:CASE <Ausdruck> OF ist der Beginn eines CASE..WHEN..OTHERWISE..ENDCASE-Konstrukts.
HCHAIN:Dieser Befehl lädt und startet ein neues BASIC-Programm.
HCHR$:Diese Funktion liefert eine Zeichenkette, die das Zeichen mit dem angegebenen ASCII-Code enthält.
HCLEAR:Dieser Befehl löscht alle Variablen.
HCLOSE:CLOSE#<Dateireferenz> schließt die angegebene Datei.
HCLG:Löscht den Grafikbildschirm.
HCLS:Löscht den Textbildschirm.
HCOS:Diese Funktion liefert den Cosinus einer Zahl (<Faktor>).
HCOUNT:Diese Funktion liefert die Anzahl der Zeichen, die seit dem letzten Zeilenvorschub mit PRINT ausgegeben wurden.
HCIRCLE:CIRCLE [FILL] x,y,r: Zeichnet einen [ausgefüllten] Kreis.
HCRUNCH:CRUNCH <Ausdruck> entfernt bestimmte Leerzeichen aus dem aktuellen Programm.Die Bits der Zahl haben folgende Bedeutung:0: Entfernt Leerzeichen vor Anweisungen1: Entfernt Leerzeichen in Anweisungen2: Entfernt REM-Anweisungen (bis auf die erste)3: Entfernt Leeranweisungen4: Entfernt Leerzeilen
HDATA:Leitet eine Zeile mit von READ zu lesenden Daten ein. Die Daten werden durch Komma voneinander getrennt.LOCAL DATA, RESTORE DATA: Sichert und lädt den Datenzeiger.
HDEG:Diese Funktion wandelt Werte im Bogenmaß ins Gradmaß um.
HDEF:Definiert eine Funktion oder Prozedur: DEF FN|PROC<Name>[(<Parameterliste>)].Funktionen werden mit =<Ausdruck> beendet, Prozeduren mit ENDPROC.
HDELETE:Dieses Kommando löscht alle Zeilen zwischen den angegebenen Zahlen.DELETE <Nummer der Startzeile>,<Nummer der Endzeile>
HDIV:Diese Anweisung führt ein Ganzzahldivision zwischen zwei ganzen Zahlen aus. Priorität 3.
HDIM:DIM fred(100,100): Erzeugt und initialisiert ein Feld.DIM fred% 100 alloziiert ein unstrukturiertes Stück Speicher von 100 Bytes Größe.DIM(fred()) liefert die Anzahl der Felddimensionen.DIM(fred(),n) liefert die Größe der n-ten Felddimension.
HDRAW:DRAW [BY] x,y: Zeichnet eine Linie zum [relativen] Punkt x,y.
HENDPROC:Diese Anweisung beendet eine Prozedurdefinition.
HEDIT:Dieses Kommando ruft den ARM-BASIC-Editor auf.
HENDWHILE:Diese Anweisung beendet ein WHILE-Konstrukt. Siehe WHILE.
HENDCASE:Diese Anweisung beendet ein CASE-Konstrukt am Anfang der Zeile. Siehe CASE.
HENDIF:Diese Anweisung beendet den Block eines IF-Konstrukts am Anfang der Zeile. Siehe IF.
HEND:END markiert das Ende der Programmausführung.END=<Ausdruck> setzt die Menge des für BASIC alloziierten Speichers.Als Funktion liefert END die Endadresse des benutzen Speichers.
HENVELOPE:ENVELOPE benötigt 14 numerische, durch Komma getrennte Parameter.
HELSE:Diese Anweisung ist Teil eines IF..THEN..ELSE-Konstrukts. Am Zeilenanfang stehend wird es als Teil eines IF..THEN..ELSE..ENDIF-Blocks interpretiert.ELSE kann auch in einem ON .. GOTO|GOSUB|PROC-Konstrukt verwendet werden, um die Standardaktion zu bestimmen.
HEVAL:Diese Funktion wertet eine Zeichenkette mathematisch aus: EVAL("2*X+1").
HERL:Diese Funktion liefert die Nummer der Zeile, in der der letzte Fehler aufgetreten ist.
HERROR:Diese Anweisung ist Teil von ON ERROR; LOCAL ERROR und RESTORE ERROR-Anweisungen.Verursacht einen Fehler: ERROR [EXT] <Zahl>,<Zeichenkette>.
HEOF:EOF#<Datei-Referenz> liefert TRUE, wenn das Ende einer offenen Datei erreicht ist; andernfalls gibt sie FALSE zurück.
HEOR:Diese Anweisung führt das bitweise logisches Exklusiv-Oder zwischen zwei ganzzahligen Werten aus. Priorität 7.
HERR:Diese Funktion liefert die Fehlernummer des letzten Fehlers.
HEXP:Diese Funktion liefert die Eulersche Zahl potenziert mit dem Funktionsparameter (<Faktor>).
HEXT:EXT#<Datei-Referenz> liefert die Größe einer offenen Datei.EXT#<Datei-Referenz>=<Ausdruck> setzt die Größe einer offenen Datei.
HELLIPSE:ELLIPSE [FILL] x,y,maj,min[,winkel]: Zeichnet eine [ausgefüllte] Ellipse.
HFOR:FOR <Variable> = <Startwert> TO <Grenzwert> [STEP <Schrittweite>].
HFALSE:Diese Funktion gibt den logischen Wert –falsch” zurück, d.h. 0.
HFILL:FILL [BY] x,y: Füllt am [relativen] Punkt x,y.
HFN:FNfred(x,y) ruft die Funktion fred auf. DEF FNfred(a,b) definiert die Funktion.
HGOTO:GOTO <Zeilennummer> springt zu der angegebenen Zeile.
HGET$:Diese Funktion liefert das nächste Zeichen des Eingabestroms als einstellige Zeichenkette.GET$#<Dateireferenz> liefert die nächste Zeichenkette aus einer Datei.
HGET:Diese Funktion liefert den ASCII-Code des nächsten Zeichens im Eingabestrom.
HGOSUB:GOSUB <Zeilennummer> ruft eine Unterroutine an der angegebenen Zeilennummer auf.
HGCOL:GCOL a [TINT t] setzt die Grafik-Vordergrundfarbe [und Helligkeit] (Hintergrund 128+a).GCOL <Aktion>,a [TINT t] setzt die Grafik-Vorder|Hintergrundfarbe und die Aktion.
HHIMEM:Diese Pseudo-Variable liest oder setzt die Endadresse des BASIC-Speichers.
HHELP:Dieses Kommando hilft bei der Benutzung des BASIC-Interpreters.
HHELPNO:HELP hat zu diesem Schlüsselwort keine Information
HINPUT:INPUT [LINE]['|TAB|SPC]["Eingabezeichenkette"][,|;]<Variable> läßt den Benutzer eine Eingabe machen.INPUT#<Dateireferenz>,<Variablenliste> liest Eingabedaten aus einer offenen Datei.
HIF:Einzeiliges IF: IF <Ausdruck> [THEN] <Anweisungen> [ELSE <Anweisungen>].IF mit Block: IF <Ausdruck> THEN<Zeilenvorschub><Zeilen>optional:ELSE <Zeilen>ENDIF
HINKEY$:CHR$(INKEY...): Siehe INKEY.
HINKEY:INKEY 0 bis 32767 wartet <Anzahl> Zehntelsekunden auf ein einzugebendes Zeichen.INKEY -255 bis -1: Diese Funktion prüft bestimmte Tasten ab und liefert TRUE|FALSE.INKEY -256: Diese Funktion liefert die Versionsnummer des Betriebssystems.
HINT:Diese Funktion schneidet die Nachkommastellen einer Zahl ab.
HINSTR:INSTR(<Zeichenkette>,<Teilzeichenkette>[,<Startposition>]) ermittelt die Position der Teilzeichenkette.
HINSTALL:Dieses Kommando installiert eine Bibliothek. Siehe LIBRARY LIBRARY.
HLIST:Dieses Kommando listet das Programm.LIST [<Zeilennummer>][,[<Zeilennummer>]][IF<Suchmuster>] listet einen Programmabschnitt [wenn das Suchmuster zutrifft]LISTO <Optionsnummer>. Die Bits bedeuten:0: Leerzeichen am Zeilenanfang1: Macht Strukturen durch Einrückungen sichtbar2: Splittet Zeilen bei :3: Läßt die Zeilennummern weg4: Listet Tokens in Kleinbuchstaben
HLINE:LINE x1,y1,x2,y2 zeichnet eine Linie.Die Anweisung kann auch Teil einer der Anweisungen INPUT LINE oder LINE INPUT sein.
HLOAD:Dieses Kommando lädt ein neues Programm.
HLOMEM:Diese Pseudo-Variable liest oder setzt die Startadresse des Variablenspeichers.
HLOCAL:LOCAL <Variablenliste> macht Objekte in einer Prozedur oder Funktion lokal.LOCAL DATA: Sichert den Datenzeiger auf den Stack.LOCAL ERROR: Sichert den Fehlerkontrollstatus auf den Stack.
HLEFT$:LEFT$(<Zeichenkette>,<Zahl>) liefert die angegebene Zahl von Zeichen links von der Zeichenkette.LEFT$(<Zeichenkette>) schneidet das letzte Zeichen der Zeichenkette ab.LEFT$(<Zeichenkettenvariable>[,<Zähler>])=<Zeichenkette> überschreibt die Zeichenkette von links an.
HLEN:Diese Funktion liefert die Länge einer Zeichenkette.
HLET:Diese Anweisung ist ein optionaler Teil einer Zuweisung.
HLOG:Diese Funktion liefert den Logarithmus (zur Basis 10) einer Zahl (<Faktor>).
HLN:Diese Funktion liefert den natürlichen Logarithmus (zur Basis e) einer Zahl (<Faktor>).
HLIBRARY:LIBRARY <Zeichenkette>: Stellt die Funktionen und Prozeduren des angegebenen Programms zur Benutzung bereit.
HLVAR:Dieses Kommando listet alle benutzten Variablen.
HMID$:MID$(<Zeichenkette>,<Position>): Liefert alle Zeichen der Zeichenkette ab der angegebenen Position.MID$(<Zeichenkette>,<Position>,<Zähler>): Liefert eine Anzahl von Zeichen der Zeichenkettte ab der angegebenen Position.MID$(<Zeichenkettenvariable>,<Position>[,<Zähler>])=<Zeichenkette>: Überschreibt in der Zeichenkette eine Anzahl von Zeichen an der angegebenen Position.
HMODE:MODE <Zahl> setzt den Bildschirmmodus. Als Funktion liefert MODE den aktuellen Bildschirmmodus.
HMOD:Diese Funktion liefert den Rest einer Ganzzahldivision. Priorität 3.Die MOD-Funktion liefert die Wurzel der Summe der Quadrate aller Elemente eines numerischen Felds.
HMOVE:MOVE [BY] x,y bewegt den Grafik-Cursor zum [relativen] Punkt x,y.
HMOUSE:MOUSE x,y,z[,t] setzt x,y auf die Maus-Position, z auf den Tastenstatus[, t auf die Zeit seit dem letzten Klick].MOUSE COLOUR a,r,g,b setzt den Maus-Paletteneintrag für a auf die physikalische Farbe r, g, b.MOUSE OFF schaltet den Mauszeiger aus.MOUSE ON [a] setzt den Mauszeiger 1 [oder a].MOUSE RECTANGLE x,y,Breite,Höhe: Dieses Kommando beschränkt Mausbewegungen auf das angegebene Rechteck.MOUSE STEP a[,b] setzt den Mausschritt-Multiplikator auf a,a [oder a,b].MOUSE TO x,y positioniert Maus und Mauszeiger auf x,y.
HNEXT:NEXT [<Variable>[,<Variable>]^] schließt ein oder mehrere FOR..NEXT-Konstrukte.
HNEW:Dieses Kommando löscht das aktuelle Programm.
HNOT:Diese Anweisung invertiert eine Zahl bitweise.
HOLD:Dieses Kommando stellt ein mit NEW gelöschtes Programm wieder her.
HON:ON schaltet den Textcursor an.ON ERROR [LOCAL|OFF] vereinbart eine Fehlerbehandlungsroutine.ON <Ausdruck> GOTO|GOSUB|PROC.... ELSE beschreibt einen bedingten Sprung zu einem bestimmten Punkt.
HOFF:OFF schaltet den Textcursor ab.Die Anweisung kann auch Teil der Anweisungen TRACE OFF oder ON ERROR OFF sein.
HOF:Dieses Schlüsselwort ist Teil der Anweisungen CASE <Ausdruck> OF.
HORIGIN:ORIGIN x,y setzt den Grafik-Ursprung 0,0 auf x,y.
HOR:Diese Funktion führt ein bitweises ODER zwischen zwei Zahlen aus. Priorität 7.
HOPENIN:Diese Funktion öffnet eine Datei für die Eingabe.
HOPENOUT:Diese Funktion öffnet eine Datei für die Ausgabe.
HOPENUP:Diese Funktion öffnet eine Datei für die Ein- und Ausgabe.
HOSCLI:OSCLI <Zeichenkette> übergibt die Zeichenkette an die Kommandozeile des Betriebssystems.
HOTHERWISE:Dieses Schlüsselwort leitet den Standardzweig eines CASE-Konstrukts ein. Siehe CASE.
HOVERLAY:OVERLAY <Zeichenkettenfeld> setzt ein Feld von Dateinamen für Overlay-Bibliotheken.
HPRINT:PRINT ['|TAB|SPC]["Zeichenkette"][<Ausdruck>][;] gibt Elemente von mit @% definierten Feldern aus - siehe HELP @%PRINT#<Dateireferenz>,<Liste von Ausdrücken> schreibt Daten in eine offene Datei.
HPAGE:Diese Pseudo-Variable liest oder setzt die Startadresse des Programms.
HPTR:PTR#<Dateireferenz> liefert die Position des Zeigers in eine Datei.PTR#<Dateireferenz>=<Ausdruck> setzt die Position des Zeigers in eine Datei.
HPI:Diese Funktion liefert den Wert von –pi” (3.14159265).
HPLOT:PLOT n,x,y führt die grafische Operation n aus.
HPOINT:POINT [BY] x,y setzt Pixel an der [relativen] Position x,y.POINT TO x,y setzt den Mauszeiger auf x,y, falls dieser nicht an die Maus gebunden ist.
HPOINTPAR:POINT(x,y) liefert die logische Farbe des angegebenen Pixels.
HPROC:PROCfred(x,y) ruft die mit DEF PROCfred(a,b) definierte Prozedur auf.
HPOS:Diese Funktion liefert die x-Koordinate des Textcursors.
HQUIT:QUIT beendet den BASIC-Interpreter.Als Funktion liefert QUIT TRUE, wenn BASIC mit der Option -quit aufgerufen wurde.
HRETURN:Diese Anweisung beendet eine Unterroutine bzw. eine Unterprogramm und springt zum Aufrufpunkt zurück.
HREPEAT:REPEAT: Diese Anweisung leitet ein REPEAT..UNTIL-Konstrukt ein.
HREPORT:REPORT: Dieses Kommando gibt die letzte Fehlermeldung aus.REPORT$ liefert eine Zeichenkette mit der letzten Fehlermeldung.
HREAD:READ <Variablenliste> liest die Werte von DATA-Anweisungen in die angegebenen Variablen.
HREM:Dieses Kommando macht den Rest der Zeile zum Kommentar.
HRUN:Dieses Kommando löscht alle Variablen und startet das Programm an dessen Anfang.
HRAD:Diese Funktion wandelt Werte im Gradmaß ins Bogenmaß um.
HRESTORE:RESTORE [+][<Zahl>] setzt den Datenzeiger zurück zur ersten oder angegebenen DATA-Zeile, oder bewegt ihn die angegebene Zahl von Zeilen weiter.RESTORE DATA holt den Datenzeiger vom Stack.RESTORE ERROR holt den Fehlerkontrollstatus vom Stack.
HRIGHT$:RIGHT$(<Zeichenkette>,<Zahl>): Diese Funktion liefert die angegebene Zahl von Zeichen rechts von der Zeichenkette.RIGHT$(<Zeichenkette>) liefert das rechte Zeichen.RIGHT$(<Zeichenkettenvariable>[,<Zähler>])=<Zeichenkette> überschreibt Zeichen am Ende der Zeichenkette.
HRND:RND gibt eine zufällige Ganzzahl zurück.RND(n), wobei n<0, initialisiert den Zufallszahlengenerator mit dem Startwert n.RND(0) liefert den letzten Wert von RND(1).RND(1) gibt eine zufällige Zahl zwischen 0 und 1 zurück.RND(n), wobei n>1, gibt eine zufällige Zahl zwischen 1 und INT(n) zurück.
HRECTANGLE:RECTANGLE [FILL] xlo,ylo,Breite[,Höhe] [TO xlo,ylo] zeichnet ein [ausgefülltes] Rechteck oder kopiert [verschiebt] ein Rechteck.
HRENUMBER:Dieses Kommando numeriert die Zeilen des Programms neu:RENUMBER [<Startwert>[,<Schrittweite>]]
HSTEP:Diese Anweisung ist Teil eines FOR..TO..STEP-Konstrukts.
HSAVE:Dieses Kommando speichert das aktuelle Programm.
HSGN:Diese Funktion liefert die Werte -1, 0, 1 für das Vorzeichen einer Zahl.
HSIN:Diese Funktion liefert den Sinus einer Zahl (<Faktor>).
HSQR:Diese Funktion liefert die Quadratwurzel einer Zahl (<Faktor>).
HSOUND:SOUND <Kanal>,<Lautstärke>,<Höhe>,<Dauer>[,<Startschlag>] erzeugt einen Ton.SOUND ON|OFF schaltet den Ton an oder aus.
HSPC:In PRINT- und INPUT-Anweisungen gibt SPC(n) n Leerzeichen aus.
HSTR$:STR$[~]<Zahl> liefert die Zeichenkettenrepräsentation [in hexadezimal] einer Zahl.
HSTRING$:STRING$(<Zahl>,<Zeichenkette>) gibt die Zeichenkette die angegebene Anzahl von Malen zurück.
HSTOP:Diese Anweisung stoppt ein Programm.
HSTEREO:STEREO <Kanal>,<Position> setzt die Stereoposition für einen Kanal.
HSUM:Diese Funktion gibt die Summe aller Elemente eines Feldes zurück.SUMLEN liefert die Gesamtlänge aller Elemente eines Zeichenkettenfeldes.
HSWAP:SWAP <Variable>,<Variable> tauscht den Inhalt zweier Variablen.
HSYS:SYS <Ausdruck> [,<Ausdruck>]^ [TO <Variable>[,<Variable>]^[;<Variable>]] ruft das Betriebssystem auf.
HTAN:Diese Funktion liefert den Tangens einer Zahl (<Faktor>).
HTAB:In PRINT- und INPUT-Anweisungen setzt TAB den Cursor in die Spalte n. TAB(x,y) setzt den Cursor auf die angegebene Position auf dem Bildschirm.
HTEMPO:TEMPO <Ausdruck> setzt das Tempo der Taktschläge. Als Funktion gibt TEMPO das aktuelle Takttempo zurück.
HTEXTLOAD:Dieses Kommando lädt ein neues Programm.
HTEXTSAVE:TEXTSAVE[O <Ausdruck>,] <Zeichenkette> speichert das aktuelle Programm als Text (mit einer LISTO-Option).
HTHEN:THEN ist Teil des IF..THEN-Konstrukts. Wenn THEN von einem Zeilenvorschub gefolgt wird, leitet es einen IF..THEN..ELSE..ENDIF-Block ein.
HTIME:Diese Pseudo-Variable liest oder setzt die Echtzeituhr. TIME$ liest oder setzt die Anzeigeversion der Uhr.
HTINT:TINT a,t setzt in 256-Farbmodi die Helligkeit für COLOUR/GCOL/Vordergrundfarbe/Hintergrundfarbe a auf t.Die Anweisung ist auch als Suffix für GCOL und COLOUR verfügbar.Als Funktion gibt TINT(x,y) die Helligkeit eines Punktes zurück.
HTO:TO ist Teil des FOR..TO..-Konstrukts.TOP gibt die Addresse des Programmendes zurück.
HTRACE:TRACE [STEP] ON|OFF|PROC|<Zahl> schaltet die Programmverfolgung für Zeilen, Funktionen oder Prozeduren ab der angegebenen Zeilennummer an oder aus. TRACE TO <Zeichenkette> sendet alle Ausgaben an den angegebenen Ausgabestrom.TRACE CLOSE schließt die Ausgabe in den Ausgabestrom. Ausdruck: TRACE liefert die Referenz auf den Ausgabestrom.
HTRUE:Diese Funktion liefert den logischen Wert –Wahr”, d.h. -1.
HUNTIL:UNTIL <Ausdruck> beendet ein REPEAT..UNTIL-Konstrukt.
HUSR:Diese Funktion liefert den Rückgabewert einer Maschinenroutine.
HVDU:VDU <Zahl>[;|][,<Zahl>[;|]] sendet eine Liste von Werten an die VDU., nur 8 Bits.; 16 Bits.| 8 Bytes Nullen.
HVAL:Diese Funktion liefert den numerischen Wert einer Zeichenkette, z.B. VAL"23".
HVPOS:Diese Funktion gibt die Y-Koordinate des Textcursors zurück.
HVOICES:VOICES <Ausdruck> setzt die Anzahl der Tonkanäle.
HVOICE:VOICE <Kanal>,<Zeichenkette> weist einem Tonkanal eine Stimme zu.
HWHILE:WHILE <expression> startet ein WHILE..ENDWHILE-Konstrukt.
HWHEN:WHEN <Ausdruck>[,<Ausdruck>] identifiziert einen Fallabschnitt am Zeilenanfang. Siehe CASE.
HWAIT:Dieses Kommando wartet auf den vertikalen Sync.
HWIDTH:WIDTH <Ausdruck> setzt die Breite von Textausgaben.
HASM:Assembly language is contained in [] and assembled at P%. Labels follow '.'.Syntax:SWI|SVC|DBG|HVC|SMC|SMI[<cond>] <expr>BFC[<cond>] <reg>,#<expr>,#<expr>BFI|SBFX|UBFX[<cond>] <reg>,<reg>,#<expr>,#<expr>USAT|SSAT[<cond>] <reg>,#<expr>,<shift>USAT16|SSAT16[<cond>] <reg>,#<expr>,<reg>UXTB|UXTB16|UXTH|UXTAB|UXTAB16|UXTAH|SXTB|SXTB16|SXTH[<cond>] <reg>,<shift>BKPT|HLT|UDF <expr>ADC|ADD|AND|BIC|EOR|ORR|RSB|RSC|SBC|SUB[<cond>][S] <reg>,<reg>,<shift>MOV|MVN[<cond>][S] <reg>,<shift>MOV[T|W][<cond> <reg>,#<expr>CMN|CMP|TEQ|TST[<cond>][S|P] <reg>,<shift>CLZ|RBIT|REV|REVSH|REV16[<cond>] <reg>,<reg>CRC32[C]<B|H|W> <reg>,<reg>,<reg>QADD[8|16]|QSUB[8|16]|USAD8|USADA8|QDADD|QDSUB[<cond>] <reg>,<reg>,<reg>UADD|UHADD|UQADD|UQSUB|USUB|SADD|SHADD|SSUB|SHSUB<8|16>[<cond>] <reg>,<reg>,<reg>QASX|QSAX|UQASX|UQSAX|SHASX|SHSAX|SSAX|SASX|USAX|UASX|SEL[<cond>] <reg>,<reg>,<reg>MUL[<cond>][S] <reg>,<reg>,<reg>MLA|MLS|UMULL|UMLAL|SMULL|SMLAL[<cond>][S] <reg>,<reg>,<reg>,<reg>UMAAL[<cond>] <reg>,<reg>,<reg>,<reg>SMUL<W|B|T><B|T>[<cond>] <reg>,<reg>,<reg>SMLA[L]<W|B|T><B|T>[<cond>] <reg>,<reg>,<reg>,<reg>SM<LA[L]|LS[L]|UA|US>D[X][<cond>] <reg>,<reg>,<reg>,<reg>SMM<LA|LS|UL>[R][<cond>] <reg>,<reg>,<reg>,<reg>LDR|STR[<cond>][B|T|BT|SB|SBT|H|HT|SH|SHT|D] <reg>, '[ <reg>[,<shift>] '] [,<shift>][!]LDA|STL[<cond>][B|H] <reg>, '[ <reg> ']LDREX|LDAEX|STREX|STLEX[B|H|D][<cond>] <reg>, '[ <reg> ']LDM|STM[<cond>]DA|DB|EA|ED|FA|FD|IA|IB <reg>[!],{<reg list>}[^]RFE<DA|DB|EA|ED|FA|FD|IA|IB> <reg>[!]SRS<DA|DB|EA|ED|FA|FD|IA|IB> SP[!],#<expr>SWP[<cond>][B] <reg>,<reg>, '[ <reg> ']PLD[W]|PLI '[ <reg>[,<shift>] ']PKH<BT|TB>[<cond>] <reg>,<reg>,<shift>PUSH|POP[<cond>] <reg list>B[L][<cond>] <label>BLX <label>BX|BLX|BXJ[<cond>] <reg>SDIV|UDIV[<cond>] <reg>,<reg>,<reg>WFE|WFI|SEV[L]|YIELD[<cond>]DMB|DSB|ISB [SY|SYST|ST|LD|<ISH|NSH|OSH>[ST|LD]]SETEND <BE|LE>MRC|MCR[<cond>|2] <copro>,<expr>,<reg>,<cpreg>,<cpreg> [,<expr>]MCRR|MRRC[<cond>] <copro>,<expr>,<reg>,<reg>,<cpreg>CDP[<cond>|2] <copro>,<expr>,<cpreg>,<cpreg>,<cpreg> [,<expr>]LDC|STC[<cond>|2][L] <copro>,<cpreg>, '[ <reg>[,#<expr>] '] [,#<expr>|{expr}][!]CPS<ID|IE> <iflags[,#<expr>]>CPS #<expr>CLREX|ERETMRS[<cond>] <reg>,<psr>MSR[<cond>] <psr>_[c][x][s][f],<reg>|#<expr>
HASFP:ADF|MUF|SUF|RSF|DVF|RDF|POW|RPW|RMF|FML|FDV|FRD|POL[<cond>]<prec>[<round>] <fpreg>,<fpreg>,<fpop>MVF|MNF|ABS|RND|SQT|LOG|LGN|EXP|SIN|COS|TAN|ASN|ACS|ATN|URD|NRM[<cond>]<prec>[<round>] <fpreg>,<fpop>FLT[<cond>]<prec>[<round>] <fpreg>,<reg>FIX[<cond>][<round>] <reg>,<fpreg>WFS|RFS|WFC|RFC[<cond>] <reg>CMF|CNF[E][<cond>] <fpreg>,<fpop>LDF|STF[<cond>]<prec> <fpreg>, '[ <reg>[,#<expr>] '] [,#<expr>][!]LFM|SFM[<cond>] <fpreg>,<expr>, '[ <reg>[,#<expr>] '] [,#<expr>][!]LFM|SFM[<cond>]EA|FD <fpreg>,<expr>, '[ <reg> '] [!]DCF|EQUF<prec> <expr>
HASFN:OPT|=|DCB|EQUB|DCW|EQUW|DCD|EQUD|EQUS <expr>ADR[<cond>] <reg>,<label>ALIGN|NOPwhere <shift>=<reg>|#<expr>|<reg>,ASL|LSL|LSR|ASR|ROR <reg>|#<expr>|RRXand <cond>=AL|CC|CS|EQ|GE|GT|HI|HS|LE|LS|LT|LO|MI|NE|NV|PL|VC|VSand <reg>=R0 to 15 or SP or LR or PC or <expr>and <copro>=CP0 to 15 or <expr>and <cpreg>=C0 to 15 or <expr>and <fpreg>=F0 to 7 or <expr>and <fpop>=F0 to 7 or #<expr>, where <expr>=0,0.5,1,2,3,4,5 or 10and <prec>=S|D|E|Pand <round>=P|M|Zand <psr>=CPSR|SPSRand <iflags>=A|I|F
H0:HELP kann wie folgt aufgerufen werden:–HELP .” oder –HELP A” um die Namen von Schlüsselwörtern auszugeben;–HELP PRINT” gibt Hilfe für ein bestimmtes Schlüsselwort und –HELP [” für Assembler.
H1:Mögliche Schlüsselwörter:
H@:Diese Pseudo-Variable liest oder setzt das Format für die Ausgabe von Zahlen:PRINT @% gibt eine Zahl zurück, LVAR und @%= benötigen Zeichenketten."G<Zahl.Zahl>" ist das allgemeine Formatfeld und setzt die Zahl der Ziffern"E<Zahl>.<Zahl>" ist das Exponentenformatfeld und setzt die Zahl Ziffern im Exponenten."F<Zahl>.<Zahl>" ist das Festformatfeld und setzt die Zahl der Ziffern nach dem Dezimalpunkt.Alle Teile sind optional., oder . im der Formatzeichenkette geben , oder . als Dezimaltrennzeichen aus. ein vorangestelltes + bedeutet, daß @% auch für STR$ gilt.

#{Token0=BASIC}
HBASBAS:BASIC ist der ARM-BBC-BASIC-Interpreter 
SBASBAS:Syntax: *BASIC [-help|-chain|-load|-quit] <Dateiname> 
#{Token0=BASIC64}
HBASB64:BASIC64 starts the double precision BASIC interpreter. 
SBASB64:Syntax: *BASIC64 [-help|-chain|-load|-quit] <Dateiname> 
