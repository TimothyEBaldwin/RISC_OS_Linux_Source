;
; Copyright (c) 2013-2016, Timothy Baldwin
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met:
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of RISC OS Open Ltd nor the names of its contributors
;       may be used to endorse or promote products derived from this software
;       without specific prior written permission.
;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
; POSSIBILITY OF SUCH DAMAGE.
;

 IF :LNOT: :DEF: Included_Hdr_PVOps
        GBLL    Included_Hdr_PVOps
Included_Hdr_PVOps SETL {TRUE}

 IF :LNOT: :DEF: Included_Hdr_Machine_Machine
        GET     Hdr:Machine.<Machine>
 ENDIF

        GBLA    PVOpsRelocation
PVOpsRelocation SETA 0

        MACRO
        PVOpsImports

        EXTERN  __PVirt_SetCPSR_c
        EXTERN  __PVirt_SetCPSR_cf
        EXTERN  __PVirt_SetCPSR_cs
        EXTERN  __PVirt_SetCPSR_csf
        EXTERN  __PVirt_SetCPSR_cx
        EXTERN  __PVirt_SetCPSR_cxf
        EXTERN  __PVirt_SetCPSR_cxs
        EXTERN  __PVirt_SetCPSR_cxsf

        EXTERN  __PVirt_GetCPSR
        EXTERN  __PVirt_FindMode
        EXTERN  __PVirt_MOVS_PC_LR
        EXTERN  __PVirt_LoadUsrRegisters
        EXTERN  __PVirt_syscall
        ;EXTERN  __PVirt_safe_syscall
        MEND

        MACRO
        PVJumpTable
      [ PVSys > 1
       ; FIXME - temporary hack
__PVirt_SetCPSR_csf
__PVirt_SetCPSR_cxsf MSR     cpsr_sf, r1
__PVirt_SetCPSR_cf
__PVirt_SetCPSR_cxf  MSR     cpsr_f, r1
__PVirt_SetCPSR_c
__PVirt_SetCPSR_cx   LDR     pc, =0x33000034
__PVirt_SetCPSR_cs
__PVirt_SetCPSR_cxs  MSR     cpsr_s, r1
                     LDR     pc, =0x33000038

__PVirt_GetCPSR      LDR     pc, =0x3300003C
__PVirt_FindMode     LDR     pc, =0x33000040
__PVirt_MOVS_PC_LR   LDR     pc, =0x33000044

__PVirt_LoadUsrRegisters
                     LDR     pc, =0x33000048
__PVirt_syscall      LDR     pc, =0x33000050
__PVirt_safe_syscall LDR     pc, =0x33000058

        EXPORT  __PVirt_SetCPSR_c
        EXPORT  __PVirt_SetCPSR_cf
        EXPORT  __PVirt_SetCPSR_cs
        EXPORT  __PVirt_SetCPSR_csf
        EXPORT  __PVirt_SetCPSR_cx
        EXPORT  __PVirt_SetCPSR_cxf
        EXPORT  __PVirt_SetCPSR_csf
        EXPORT  __PVirt_SetCPSR_cxsf

        EXPORT  __PVirt_GetCPSR
        EXPORT  __PVirt_FindMode
        EXPORT  __PVirt_MOVS_PC_LR
        EXPORT  __PVirt_LoadUsrRegisters
        EXPORT  __PVirt_syscall
        ;EXPORT  __PVirt_safe_syscall
      ]
        MEND

        MACRO
        InitPVOps
        MEND

        MACRO
$label  GetTLS$c
$label  MOV$c   lr, pc
        LDR$c   pc, =0xFFFF0FE0
        MEND

        MACRO
$label  pvMRS$c $reg, $psr
        ASSERT  ("$psr" = "CPSR") :LOR: ("$psr" = "SPSR")
 [ PVirt > 0
        IF      $reg = 0
$label  STR$c   lr, [sp, #-4]!
        IF     "$psr" = "CPSR"
         BL$c   __PVirt_GetCPSR + PVOpsRelocation
        ELSE
         BL$c   __PVirt_FindMode + PVOpsRelocation
         LDR$c  r0, [r0, #8]
        ENDIF
        LDR$c   lr, [sp], #4

        ELIF    $reg = 14
$label  STR$c   r0, [sp, #-4]!
        IF     "$psr" = "CPSR"
         BL$c   __PVirt_GetCPSR + PVOpsRelocation
         MOV$c  lr, r0
        ELSE
         BL$c   __PVirt_FindMode + PVOpsRelocation
         LDR$c  lr, [r0, #8]
        ENDIF
        LDR$c   r0, [sp], #4

        ELSE
$label  STM$c.FD        sp!, {r0, lr}
        IF     "$psr" = "CPSR"
         BL$c   __PVirt_GetCPSR + PVOpsRelocation
         MOV$c  $reg, r0
        ELSE
         BL$c   __PVirt_FindMode + PVOpsRelocation
         LDR$c  $reg, [r0, #8]
        ENDIF
        LDM$c.FD        sp!, {r0, lr}

        ENDIF
 |
$label  MRS$c   $reg, $psr
 ]
        MEND

        MACRO
$label  pvMSR$c $psr, $op2a, $op2b
$label
 IF PVirt < 1
        [ "$op2b" = ""
        MSR$c   $psr, $op2a
        |
        MSR$c   $psr, $op2a, $op2b
        ]
 ELIF "$psr" = "SPSR_cxsf"
        STM$c.FD sp!, {r0, r1, lr}
        [ "$op2b" = ""
        MOV$c   r1, $op2a
        |
        MOV$c   r1, $op2a, $op2b
        ]
        BL$c    __PVirt_FindMode + PVOpsRelocation
        STR$c   r1, [r0, #8]
        LDM$c.FD sp!, {r0, r1, lr}
 ELSE

        ASSERT "$psr":LEFT:5 = "CPSR_"
        ASSERT "$psr":LEFT:6 <> "CPSR_x"

  [ "$psr":LEFT:6 = "CPSR_c"
        STM$c.FD sp!, {r0-r3, ip, lr}
        [ "$op2b" = ""
        MOV$c   r1, $op2a
        |
        MOV$c   r1, $op2a, $op2b
        ]
        BL$c    __PVirt_Set$psr + PVOpsRelocation
  ]

        [ "$op2b" = ""
        MSR$c   $psr, $op2a
        |
        MSR$c   $psr, $op2a, $op2b
        ]
 ENDIF ; PVirt
        MEND

        MACRO
$label  MOVS_PC_LR $c
 [ PVirt > 0
$label  B$c     __PVirt_MOVS_PC_LR + PVOpsRelocation
 |
$label  MOV$c.S pc, lr
 ]
        MEND


                        ^       0
                        #       8 ; Reserved for ELF thread local variables.
vcpu_vectors            #       4
vcpu_irq_pending        #       1
vcpu_cpsr               #       1
                        #       2
vcpu_r13_svc            #       4
vcpu_r14_svc            #       4
vcpu_spsr_svc           #       4
vcpu_r13_usr            #       4
vcpu_r14_usr            #       4
vcpu_spsr_usr           #       4
vcpu_r13_irq            #       4
vcpu_r14_irq            #       4
vcpu_spsr_irq           #       4
vcpu_r13_fiq            #       4
vcpu_r14_fiq            #       4
vcpu_spsr_fiq           #       4
vcpu_r13_und            #       4
vcpu_r14_und            #       4
vcpu_spsr_und           #       4
vcpu_r13_abt            #       4
vcpu_r14_abt            #       4
vcpu_spsr_abt           #       4
vcpu_DFAR               #       4

 ENDIF
        END
