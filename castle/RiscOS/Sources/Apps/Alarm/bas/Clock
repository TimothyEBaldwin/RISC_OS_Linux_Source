REM This source code in this file is licensed to You by Castle Technology
REM Limited ("Castle") and its licensors on contractual terms and conditions
REM ("Licence") which entitle you freely to modify and/or to distribute this
REM source code subject to Your compliance with the terms of the Licence.
REM
REM This source code has been made available to You without any warranties
REM whatsoever. Consequently, Your use, modification and distribution of this
REM source code is entirely at Your own risk and neither Castle, its licensors
REM nor any other person who has contributed to this source code shall be
REM liable to You for any loss or damage which You may suffer as a result of
REM Your use, modification or distribution of this source code.
REM
REM Full details of Your rights and obligations are set out in the Licence.
REM You should have received a copy of the Licence with this source code file.
REM If You have not received a copy, the text of the Licence is available
REM online at www.castle-technology.co.uk/riscosbaselicence.htm
REM
REM > Clock

REM *************************************************************************
REM Clock plotting
REM *************************************************************************

DEFFNiconbar
 LOCAL I%,A%,priority%,analogue%
 PROCprepare_icon
 SYS"OS_SpriteOp",&118,icons%,"-time" TO ,,A%
 IF ictime%=-1 THEN
  REM initial placement
  !buffers%=-7
  priority% =&10000000
 ELSE
  REM subsequent replacement
  !buffers%=-4
  priority% =ictime%
 ENDIF

 analogue% = FNanalogue

 buffers%!4=0 : REM minx
 IF analogue% THEN buffers%!8=-18 ELSE buffers%!8=0 : REM miny
 buffers%!12=icon_width% : REM maxx
 IF analogue% THEN buffers%!16=buffers%!8+icon_height% ELSE buffers%!16=68 : REM maxy
 buffers%!20=%00000111000000000011000100010010
 buffers%!24=A%
 buffers%!28=icons%
 buffers%!32=0
 SYS"Wimp_CreateIcon",priority%,buffers% TO I%

 IF ictime%<>-1 THEN
  REM and delete the old one
  !buffers%=-1
  buffers%!4=ictime%
  SYS"Wimp_DeleteIcon",,buffers%
 ENDIF
=I%
:
DEFPROCreset_alarm_status
 LOCAL U%
 PROCread_first_alarm(alarms%(1))
 PROCgettime
 PROCredraw_icon(-1,ictime%)
 PROCset_timex_for_next_second
ENDPROC
:
DEFPROCprepare_icon
 LOCAL W%,X%,Y%,Z%,C%,mode%
 Q%!0=4
 Q%!4=5
 Q%!8=11
 Q%!12=12
 Q%!16=-1
 SYS"OS_ReadVduVariables",Q%,Q%+20
 dx%=(Q%!20)
 dy%=(Q%!24)
 scrx1%=(Q%!28+1) <<dx%
 scry1%=(Q%!32+1) <<dy%
 CASE ((dx% <<4) OR dy%) OF
  WHEN &22:  mode% =9  : REM 45x45
  WHEN &11:  mode% =27 : REM 90x90
  WHEN &12:  mode% =12 : REM 90x45
  OTHERWISE: mode% =(3 <<27) OR ((180 >>dx%) <<1) OR ((180 >>dy%) <<14) OR1 : REM 4bpp new type sprite
 ENDCASE
 IF FNanalogue THEN
  icon_width% =116 : REM OS unit circle
  icon_height%=116
  icons% =FNmake_4bpp_sprite("-time",icon_width% >>>dx%,icon_height% >>>dy%,mode%,TRUE)
  SYS"OS_SpriteOp",&11D,icons%,"-time"
  SYS"OS_SpriteOp",&13D,icons%,"-time",0 TO W%,X%,Y%,Z%
  GCOL 0,128
  TINT 3,0
  CLG
  GCOL 0,63
  TINT 2,&FF
  C%=icon_width% /2 : REM Circle centre
  CIRCLE FILL C%,C%,C%-1 : REM Mask slightly smaller than the clock
  SYS"OS_SpriteOp",W%,X%,Y%,Z%
 ELSE
  icon_height% =68 : REM Per style guide
  icons% =FNmake_4bpp_sprite("-time",icon_width% >>>dx%,icon_height% >>>dy%,mode%,FALSE)
 ENDIF
ENDPROC
:
DEF FNmake_4bpp_sprite(name$,x%,y%,mode%,mask%)
 LOCAL size%,pal%
 IF spr_area% >0 THEN PROCheap_free("SPRT",spr_area%)

 REM work in bits for 4bpp
 size% = x% *4
 REM round up to nearest word
 size% = (size% +31) AND NOT 31
 size% = ((size% *y%) /8)

 REM allow for a transparency mask (wastes a few bytes in new type sprites)
 IF mask% THEN size% =size% *2

 REM sprite area and header and palette
 size% +=16 +44 +(16*2*4)
 
 spr_area% =FNheap_claim("SPRT",size%)
 !spr_area%=size%:spr_area%!4=0:spr_area%!8=16:spr_area%!12=16
 SYS"OS_SpriteOp",&109,spr_area%
 SYS"OS_SpriteOp",&10F,spr_area%,name$,1,x%,y%,mode%

 REM Overwrite a VIDC1 desktop palette
 pal% =spr_area% +16 +44
 FOR x% =0 TO15
  CASE x% OF
   WHEN0,1,2,3,4,5,6:y% =(15 -(x% *2)) *&111111
   WHEN7:            y% =0
   WHEN8:            y% =&994400
   WHEN9:            y% =&00EEEE
   WHEN10:           y% =&00CC00
   WHEN11:           y% =&0000DD
   WHEN12:           y% =&BBEEEE
   WHEN13:           y% =&008855
   WHEN14:           y% =&00BBFF
   WHEN15:           y% =&FFBB00
  ENDCASE
  !(pal% +(x% *8) +0) =y% <<8
  !(pal% +(x% *8) +4) =y% <<8
 NEXT
=spr_area%
:
DEF PROCrect(colour%,x%,y%,w%,h%,thickness%)
 GCOL colour%
 RECTANGLE FILL x%,y%,thickness%,h%
 RECTANGLE FILL x%,y%,w%,thickness%
 RECTANGLE FILL x%,y% +h% -thickness%,w%,thickness%
 RECTANGLE FILL x% +w% -thickness%,y%,thickness%,h%
ENDPROC
:
DEFPROCclock(t$)
 LOCAL T%,I%,H%,M%,S%,R%,X%,Y%
 H%=VAL(LEFT$(t$,2))
 M%=VAL(MID$(t$,4,2))
 S%=VAL(RIGHT$(t$,2))
 R%=icon_width%/2-1
 X%=icon_width%/2:Y%=X%
 CLS
 IF user_alarm_set% THEN GCOL 11 ELSE GCOL 8
 IF R%>150 THEN
  T%=R%-(R%>>5)-8
  FOR I%=0 TO 59
   POINT X%+T%*sin(I%),Y%+T%*cos(I%)
  NEXT
 ENDIF
 IF R%>50 THEN
  T%=R%-(R%>>4)
  FOR I%=0 TO 59 STEP 5
   T%=R%-(R%>>4)
   RECTANGLE FILL X%+T%*sin(I%)-(R%>>5),Y%+T%*cos(I%)-(R%>>5),R%>>4
  NEXT
 ENDIF
 IF user_alarm_set% THEN GCOL 14 ELSE GCOL 15
 CIRCLE X%,Y%,R%
 PROChands(H%,M%,S%,R%,X%,Y%)
ENDPROC
:
DEFPROChands(H%,M%,S%,R%,X%,Y%)
 GCOL 4
 IF INSTR(format$,"~AH") THEN PROChand(H%*5+M%DIV 12,X%,Y%,R%-(R%>>1))
 IF INSTR(format$,"~AM") THEN PROChand(M%,X%,Y%,R%-(R%>>2))
 IF INSTR(format$,"~AS") THEN
  GCOL 11
  MOVE X%,Y%
  DRAW BY (R%-(R%>>4))*sin(S%MOD 60),(R%-(R%>>4))*cos(S%MOD 60)
  GCOL 11
  CIRCLE FILL X%,Y%,R%>>4
 ENDIF
ENDPROC
:
DEFPROChand(A%,X%,Y%,R%)
 LOCAL T%
 T%=(R%>>1)/cos(1)
 MOVE X%+sin((A%+1) MOD 60)*T%,Y%+cos((A%+1) MOD 60)*T%
 MOVE X%,Y%
 PLOT 117,X%+sin((A%+60-1) MOD 60)*T%,Y%+cos((A%+60-1) MOD 60)*T%
ENDPROC
:
DEFPROCgettime
 LOCAL t$,font%,flags%,W%,X%,Y%,Z%,maxy%,miny%

 REM Get the time, and apply the GSTran'd format to it 
 ?cur_clock%=3:SYS"OS_Word",14,cur_clock%
 t$=FNconverttime(cur_clock%,FNconvertextras(format$))
 
 textlen% =FNchksum_textlen(t$) : REM Sizeable change?

 SYS"XWimp_ReadSysInfo",8 TO font%;flags%
 IF flags% AND1 THEN font% =0 : REM No readsysinfo 8, use system font

 IF cur_format$ <> format$ OR cur_textlen% <> textlen% THEN
  REM An issue in RO6.06 with 16 colour modes makes the text 'bounce' due
  REM to changes in the y size, splitting the code this way ensures
  REM the value is recached only on a mode/font change
  IF font% =0 THEN
   icon_width%  =(16 * LENt$) +40
  ELSE
   SYS"Wimp_TextOp",1,t$,0 TO len%
   icon_width%  =len% +40

   SYS"Font_CharBBox",font%,ASC("0"),0 TO ,,miny%,,maxy%
   SYS"Font_Converttopoints",,20,68 TO ,icon_xoff_mp%,icon_height_mp%
   cur_fonty% =maxy% -miny%
  ENDIF
 
  ictime%=FNiconbar
  
  cur_format$ =format$
  cur_textlen% =textlen%
 ENDIF

 SYS"OS_SpriteOp",&13C,icons%,"-time",0 TO W%,X%,Y%,Z%
 VDU 5
 IF FNanalogue THEN
  t$=FNconverttime(cur_clock%,"%24:%MI:%SE")
  PROCclock(t$)
 ELSE
  IF user_alarm_set% THEN C%=11:D%=14 ELSE C%=8:D%=15

  PROCrect(C%,0,0,icon_width% -1,icon_height% -1,3)
  PROCrect(D%,4,4,icon_width% -1-8,icon_height% -1 -8,3)

  REM clear whole plinth
  GCOL 0
  RECTANGLE FILL 8,8,icon_width% -1 -16,icon_height% -1 -16

  IF font% =0 THEN
   GCOL 7
   VDU 23,17,7,%110,16 >>>dx%;32 >>>dy%|
   MOVE (icon_width% - (16 * LENt$)) / 2,46:PRINT t$
  ELSE
   SYS"XColourTrans_SetFontColours",font%,&ffffff00,0,14
   SYS"XFont_Paint",font%,t$,(1 << 8),icon_xoff_mp%,(icon_height_mp% - cur_fonty%) DIV 2
  ENDIF
 ENDIF
 SYS"OS_SpriteOp",W%,X%,Y%,Z%
ENDPROC
:
DEF FNanalogue
=INSTR(format$,"~AH") OR INSTR(format$,"~AM") OR INSTR(format$,"~AS")

REM *************************************************************************
REM Date internationalisation
REM *************************************************************************

DEFFNmonthsinyear(year%)
 REM catch bad years. This is safe to do here!
 IFyear%<1901 year%=1901
 IFyear%>2247 year%=2247
 REM first of all, build a five byte time
 PROCordinals_to_fivebt(buffers%,1,1,1,1,year%)
 REM now get the number of months in this year
 SYS"Territory_ReadCalendarInformation",-1,buffers%,Q2%
=Q2%!8
:
DEFFNdaysinmonth(month%,year%)
 REM catch bad years. This is safe to do here!
 IFyear%<1901 year%=1901
 IFyear%>2247 year%=2247
 REM first of all, build a five byte time
 PROCordinals_to_fivebt(buffers%,1,1,1,month%,year%)
 REM now find out how many days there are in this month
 SYS"Territory_ReadCalendarInformation",-1,buffers%,Q2%
=Q2%!12
:
DEFFNvalid_day(D%)
 D%-=1
 IF(global_weekwork% AND (1<<D%)) :=TRUE
=FALSE
:
DEFFNvalid_day_of_week(I%)
 LOCAL J%
 REM IFFNcheck_pointer PROCcheck_pointer(I%,"FNvalid_day_of_week")
 IF I%?alarm_fvdywk% THEN
  IF(global_weekwork% AND (1<<FNday_of_week(I%)))=0 =FALSE
 ENDIF
=TRUE
:
REM Territory manager returns day numbers as 1 = Sunday to
REM 7 = Saturday.
REM This function returns them as 0 = Sunday to 6 = Saturday.
DEFFNday_of_week(I%)
 REM IFFNcheck_pointer PROCcheck_pointer(I%,"FNday_of_week")
 PROCalarm_rec_to_fivebt(I%,buffers%)
 SYS"Territory_ConvertTimeToOrdinals",-1,buffers%,Q2%
=Q2%!28-1
:
DEFFNconverttime(B%,form$)
 LOCAL T%,F%,f$,tst$
 f$ =""
 WHILE form$ >""
  tst$ =LEFT$(form$,3)
  IF tst$ ="~IN" THEN
   IF VAL(FNconverttime(B%,"%SE")) MOD 2 =0 THEN
    f$ +="."
   ELSE
    f$ +=":"
   ENDIF
   form$ =MID$(form$,4)
  ELSE
   f$ +=LEFT$(form$,1)
   form$ =MID$(form$,2)
  ENDIF
 ENDWHILE
 SYS"XTerritory_ConvertDateAndTime",-1,B%,Q1%,81,f$+CHR$13+CHR$0 TO ,T%;F%
 IF(F% AND 1) THEN
  $Q1%=FNmsg_0("FrmtA4")
 ELSE
  ?T%=13
 ENDIF
=$Q1%
:
DEFPROCfivebt_to_ordinals(fivebt%,RETURN hr%,RETURN mi%,RETURN da%,RETURN mo%,RETURN yr%)
 SYS"Territory_ConvertTimeToOrdinals",-1,fivebt%,Q2%
 mi%=Q2%!8
 hr%=Q2%!12
 da%=Q2%!16
 mo%=Q2%!20
 yr%=Q2%!24
ENDPROC
:
DEFPROCalarm_rec_to_fivebt(ptr%,fivebt%)
 LOCAL hr%,mi%,da%,mo%,yr%
 REM IFFNcheck_pointer PROCcheck_pointer(ptr%,"PROCalarm_rec_to_fivebt")
 hr%=ptr%!alarm_hours%
 mi%=ptr%!alarm_minutes%
 da%=ptr%!alarm_date%
 mo%=ptr%!alarm_month%
 yr%=ptr%!alarm_year%
 PROCordinals_to_fivebt(fivebt%,hr%,mi%,da%,mo%,yr%)
ENDPROC
:
DEFPROCordinals_to_fivebt(fivebt%,hr%,mi%,da%,mo%,yr%)
 !Q2%=0
 Q2%!4=0
 Q2%!8=mi%
 Q2%!12=hr%
 Q2%!16=da%
 Q2%!20=mo%
 Q2%!24=yr%
 SYS"Territory_ConvertOrdinalsToTime",-1,fivebt%,Q2%
ENDPROC
:
DEFFNseconds_used(s$)
 LOCAL I%
 WHILE s$ >""
  cmp$ =FNupper(LEFT$(s$,4))
  IF LEFT$(cmp$,1) ="<" THEN =TRUE
  IF LEFT$(cmp$,2) ="%Z" THEN cmp$ ="%"+MID$(cmp$,3)
 
  CASE LEFT$(cmp$,3) OF
  WHEN "%SE","~AS","~IN"
   =TRUE
  ENDCASE

  s$ =MID$(s$,2)
 ENDWHILE
=FALSE
:
DEFFNwidth(s$)
 LOCAL W%,M%,I%,A%,c$
 W%=0
 WHILE s$<>""
  I%=INSTR(s$,"%")
  IFI%=0 THEN
   W%+=LENs$
   s$=""
  ELSE
   W%+=I%-1
   s$=MID$(s$,I%+1)
   IFLEFT$(s$,1)="%" THEN
    W%+=1
    s$=MID$(s$,2)
   ELSE
    IFFNupper(LEFT$(s$,1))="Z" s$=MID$(s$,2)
    c$=FNupper(LEFT$(s$,2)):s$=MID$(s$,3)
    CASE c$ OF
     WHEN "CS":W%+=2
     WHEN "SE":W%+=2
     WHEN "MI":W%+=2
     WHEN "12":W%+=2
     WHEN "24":W%+=2
     WHEN "AM":W%+=widths%(width_am%)
     WHEN "PM":W%+=widths%(width_am%)
     WHEN "WE":W%+=widths%(width_we%)
     WHEN "W3":W%+=widths%(width_w3%)
     WHEN "WN":W%+=1
     WHEN "DY":W%+=widths%(width_dy%)
     WHEN "ST":W%+=widths%(width_st%)
     WHEN "MO":W%+=widths%(width_mo%)
     WHEN "M3":W%+=widths%(width_m3%)
     WHEN "MN":W%+=2
     WHEN "CE":W%+=2
     WHEN "YR":W%+=2
     WHEN "WK":W%+=2
     WHEN "DN":W%+=3
     WHEN "TZ":W%+=widths%(width_tz%)
     WHEN "AH","AM","AS":W%=1
     OTHERWISE: PROCformat_error(FNmsg_1("FrmtA1",c$))
    ENDCASE
   ENDIF
  ENDIF
 ENDWHILE
=W%

REM *************************************************************************
REM Clock set
REM *************************************************************************

DEFPROCset_clock_from_alarm_rec(ptr%)
 REM IFFNcheck_pointer PROCcheck_pointer(ptr%,"PROCset_clock_from_alarm_rec")
 PROCalarm_rec_to_fivebt(ptr%,Q2%)
 SYS"Territory_SetTime",Q2%
ENDPROC

REM *************************************************************************
REM Clock validation
REM *************************************************************************

DEFPROCvalidate_alarm_rec(ptr%,RETURN error%)
 LOCAL hr%,mi%,da%,mo%,yr%
 REM IFFNcheck_pointer PROCcheck_pointer(ptr%,"PROCvalidate_alarm_rec")
 hr%=ptr%!alarm_hours%
 mi%=ptr%!alarm_minutes%
 da%=ptr%!alarm_date%
 mo%=ptr%!alarm_month%
 yr%=ptr%!alarm_year%
 PROCvalidate_ordinals(hr%,mi%,da%,mo%,yr%,error%)
 ptr%!alarm_hours%=hr%
 ptr%!alarm_minutes%=mi%
 ptr%!alarm_date%=da%
 ptr%!alarm_month%=mo%
 ptr%!alarm_year%=yr%
ENDPROC
:
DEFPROCvalidate_ordinals(RETURN hr%,RETURN mi%,RETURN dy%,RETURN mo%,RETURN yr%,RETURN error%)
 IFyr%>2247 yr%=2247:error%=TRUE:ENDPROC
 WHILE mo%<1 yr%-=1:mo%+=FNmonthsinyear(yr%):ENDWHILE
 WHILE mo%>FNmonthsinyear(yr%) mo%-=FNmonthsinyear(yr%):yr%+=1:ENDWHILE
 WHILE mi%<0 mi%+=60:hr%-=1:ENDWHILE
 WHILE mi%>59 mi%-=60:hr%+=1:ENDWHILE
 WHILE hr%<0 hr%+=24:dy%-=1:ENDWHILE
 WHILE hr%>23 hr%-=24:dy%+=1:ENDWHILE
 WHILE dy%<1 mo%-=1:dy%+=FNdaysinmonth(mo%,yr%):ENDWHILE
 WHILE dy%>FNdaysinmonth(mo%,yr%)
  dy%-=FNdaysinmonth(mo%,yr%)
  mo%+=1
  WHILEmo%>FNmonthsinyear(yr%) mo%-=FNmonthsinyear(yr%):yr%+=1:ENDWHILE
 ENDWHILE
 IF yr%<1901 yr%=1901
 IF yr%>2247 yr%=2247:error%=TRUE
ENDPROC
