/* This source code in this file is licensed to You by Castle Technology
 * Limited ("Castle") and its licensors on contractual terms and conditions
 * ("Licence") which entitle you freely to modify and/or to distribute this
 * source code subject to Your compliance with the terms of the Licence.
 * 
 * This source code has been made available to You without any warranties
 * whatsoever. Consequently, Your use, modification and distribution of this
 * source code is entirely at Your own risk and neither Castle, its licensors
 * nor any other person who has contributed to this source code shall be
 * liable to You for any loss or damage which You may suffer as a result of
 * Your use, modification or distribution of this source code.
 * 
 * Full details of Your rights and obligations are set out in the Licence.
 * You should have received a copy of the Licence with this source code file.
 * If You have not received a copy, the text of the Licence is available
 * online at www.castle-technology.co.uk/riscosbaselicence.htm
 */
/*
  Title:        Dir - directory enumeration.
  Status:       C Library Extension
  Copyright:    (C) 1988, Acorn Computers Ltd., Cambridge, England.
  $Revision: 1.4 $  LDS 24-May-88
  $Revision: 1.4 $  LH 31-Oct-88

  IDJ: 20-Nov-91: made PC-partitions act like directories (dir_entrytype())
*/

#include <string.h>
#include <stdlib.h>
#include "kernel.h"
#include "err.h"
#include "dir.h"
#include "host.h"
#include "wholefls.h"

#define  MAX_SB_PATH    80
#define  NAMELEN        256
#define  MAXENTRIES     8
#ifndef  NULL
# define NULL           0
#endif
/* OSGBPB10 directory entry types */
#define  FILEFOUND      1
#define  DIRFOUND       2
#define  PCPARTFOUND    3
#define  LAZY_EVAL      0xffff
/* OSGBPB10 bad return code... corresponds to V set */
#define  OSGBPB_FAILED -2
#define  SUCCESS 0

typedef struct entry {
  unsigned long load, exec, length;
  int access;
  unsigned type;
  char name[NAMELEN];
  char *parent;
} *entry;

typedef struct dir {
  _kernel_osgbpb_block a;
  unsigned pos;
  struct entry entries[MAXENTRIES];
  char names[8];                      /* actually as big as needed */
} *dir;

static int host;
static char sep_ch;
#ifdef LIB_DEBUGGING
static int debugging;
#endif


static dir get_ARTHUR_dir_chunk(dir dh)
{
  int n;
  entry de;
  struct entry dirblk[MAXENTRIES];
  char *new_path;
  int fixed, start;

  if (dh == NULL) return NULL;
  start = dh->a.fileptr; 
  new_path = netfix_check_path(dh->names, &fixed);

  dh->a.dataptr = &dirblk;
  dh->a.nbytes = MAXENTRIES;
  dh->a.buf_len = sizeof(dirblk);
#ifdef LIB_DEBUGGING
    if (debugging > 1)
      fprintf(stderr, "go for '%s', entries %d\n", new_path, dh->a.nbytes);
#endif
  if ((_kernel_osgbpb(10, (unsigned)new_path, (_kernel_osgbpb_block *)&(dh->a)) != OSGBPB_FAILED) &&
     (dh->a.fileptr != start)) {
#ifdef LIB_DEBUGGING
    if (debugging > 1)
      fprintf(stderr, "No. files read = %d, fileptr = %d\n", dh->a.nbytes, dh->a.fileptr);
#endif
    de = dirblk;
    for (n = 0;  n < dh->a.nbytes;  ++n) {
      entry e = &(dh->entries[n]);
      *e = *de;
      de = (entry) ((char *)de + sizeof(struct entry) - sizeof(de->parent) -
                                 sizeof(de->name) +
                                 ((strlen(de->name) + 4) & ~3));
#ifdef LIB_DEBUGGING
    if (debugging > 2)
      fprintf(stderr, "filename = '%s'\n", e->name);
#endif
    }
  } else {
    err_lib_error("failed to read directory '%s'", dh->names); dh = NULL;
#ifdef LIB_DEBUGGING
    if (debugging)
      fprintf(stderr, "failure to read names\n");
#endif
  }

  if (fixed) netfix_done();
  return dh;
}

static dir get_SPRINGBOARD_dir_chunk(dir dh)
{
  int n;
  int csd;
  char csd_data[MAX_SB_PATH+4];
  char csd_name[MAX_SB_PATH];
  char file_names[MAXENTRIES*(NAMELEN+1)];
  char *name_p;
  char *new_path;
  int fixed;

  if (dh == NULL) return NULL;
  new_path = netfix_check_path(dh->names, &fixed);

  csd = (((dh->names[0] == '.') && (dh->names[1] != '.')) || (dh->names[0] == 0));
  if (!csd) {
    /* get csd */
    dh->a.dataptr = csd_data;
    if (_kernel_osgbpb(6, 0, (_kernel_osgbpb_block *)&(dh->a)) >= SUCCESS) {
      /* select new csd */
      int i;
      csd_name[0] = csd_data[1]; csd_name[1] = ':';
      /* for springboard the next test is <, not <= cos the name has a trailing '\' */
      if ((host == _kernel_SPRINGBOARD) && (csd_data[2] != 1))
        for (i = 1; i < (int) csd_data[2]; i++) csd_name[i+1] = csd_data[i+2];
      else
        for (i = 1; i <= (int) csd_data[2]; i++) csd_name[i+1] = csd_data[i+2];
      csd_name[i+1] = 0;
#ifdef LIB_DEBUGGING
    if (debugging) {
      fprintf(stderr, "csd -> '%s'\n", csd_name);
    }
#endif
      strcpy(csd_data, host_select_dir()); strcat(csd_data, new_path);
      if (_kernel_oscli(csd_data) < SUCCESS) return NULL;
    } else {
      if (fixed) netfix_done();
      return NULL;
    }
  }
#ifdef LIB_DEBUGGING
  else {
    if (debugging)
      fprintf(stderr, "csd -> here now\n");
  }
#endif

  /* read filenames from directory */
  dh->a.dataptr = file_names;
  dh->a.nbytes = MAXENTRIES;
  if (_kernel_osgbpb(8, 0, (_kernel_osgbpb_block *)&(dh->a)) != OSGBPB_FAILED) {
    name_p = file_names;
    dh->a.nbytes = (MAXENTRIES - dh->a.nbytes);
#ifdef LIB_DEBUGGING
    if (debugging > 1)
      fprintf(stderr, "No. files read = %d, fileptr = %d\n", dh->a.nbytes, dh->a.fileptr);
#endif
    n = 0;
    while (n < dh->a.nbytes) {
      int i;
      entry e = &(dh->entries[n]);
      unsigned len = (unsigned) *name_p++;
      if ((*name_p == '.') && ((len == 1)
                               || ((len == 2) && (*(name_p+1) == '.')))) {
        /* ignore "." and ".." files on springboard */
        n--; dh->a.nbytes--;
      }
      for (i = 0; i < len; i++) {
        e->name[i] = *name_p++;
        if (e->name[i] == ' ') e->name[i] = 0;
      }
      e->name[i] = 0;
      e->parent = dh->names; e->type = LAZY_EVAL;
      n++;
#ifdef LIB_DEBUGGING
    if (debugging > 2)
      fprintf(stderr, "filename = '%s'\n", e->name);
#endif
    }
  } else {
    err_lib_error("failed to read directory '%s'", dh->names); dh = NULL;
#ifdef LIB_DEBUGGING
    if (debugging)
      fprintf(stderr, "failure to read names\n");
#endif
  }

  if (!csd) { /* return to start directory */
    if (*(host_select_dir()) == 'd')
      (void) _kernel_oscli("back");
    else {
      strcpy(csd_data, host_select_dir()); strcat(csd_data, csd_name);
      (void) _kernel_oscli(csd_data);
    }
  }
  if (fixed) netfix_done();
  return dh;
}

static dir get_dir_chunk(dir dh)
{
#ifdef LIB_DEBUGGING
    if (debugging)
      fprintf(stderr, "search directory '%s' from entry %d (file pattern '%s')\n",
                                        dh->names, dh->a.fileptr, dh->a.wild_fld);
#endif
  switch (host) {
    case _kernel_ARTHUR: return get_ARTHUR_dir_chunk(dh);
    default: return get_SPRINGBOARD_dir_chunk(dh);
  }
}

dir_handle dir_open(char *pathname, char *pattern)
{
  dir dh;

  if (pattern == NULL) pattern = "*";
  dh = (dir) malloc(sizeof(struct dir) + (strlen(pathname) & ~3)
                                       + (strlen(pattern)  & ~3));
  if (dh == NULL) { err_lib_error("not enough memory", ""); return NULL; }
  strcpy(dh->names, pathname);
  dh->a.fileptr = dh->pos = 0;
  dh->a.wild_fld = dh->names + (strlen(pathname) & ~3) + 4;
  strcpy(dh->a.wild_fld, pattern);
  if (get_dir_chunk(dh) == NULL) { free(dh);  dh = NULL; }
  return (dir_handle) dh;
}

void dir_close(dir_handle dh)
{
  free((dir)dh);
}

int dir_next(dir_handle dh, dir_entry *eh)
{
  dir d = (dir) dh;

  if (d != NULL) {
    if ((d->pos >= d->a.nbytes) &&
        (d->a.fileptr >= 0) &&
        (get_dir_chunk(d) != NULL)) {
      d->pos = 0;
    }
    if (d->pos < d->a.nbytes) {
      *eh = (dir_entry) (d->entries + (d->pos)++);
      return 1;
    }
  }
  return 0;
}

static void get_file_info(entry e)
{ int fixed;
  int type;
  char full_name[MAX_SB_PATH];
  char *new_path = NULL;

  int len = strlen(e->parent);
  strcpy(full_name, e->parent);
  if (len > 0) { full_name[len++] = sep_ch; full_name[len] = 0; }
  strcat(full_name, e->name);
#ifdef LIB_DEBUGGING
    if (debugging > 1)
      fprintf(stderr, "get file info for '%s'\n", full_name);
#endif
  new_path = netfix_check_path(full_name, &fixed);
  type = _kernel_osfile(5, new_path, (_kernel_osfile_block *) e);
  if (type < 0) {
    _kernel_oserror *error_blk = _kernel_last_oserror();
    err_lib_error(error_blk->errmess, "");
    e->type = 0;
  } else e->type = type;
  if (fixed) netfix_done();
}

extern char *dir_entryname(dir_entry eh)
{
  entry e = (entry) eh;
  return e->name;
}

extern int dir_entrytype(dir_entry eh)
{
  entry e = (entry) eh;
  if (e->type == LAZY_EVAL) get_file_info(e);
  switch (e->type) {
case FILEFOUND:  return DIR_FILE;
case PCPARTFOUND:
case DIRFOUND:   return DIR_DIR;
default:         return DIR_NOTANENTRY;
  }
}

extern unsigned long dir_entrylength(dir_entry eh)
{
  entry e = (entry) eh;
  if (e->type == LAZY_EVAL) get_file_info(e);
  return e->length;
}

extern unsigned long dir_entryload(dir_entry eh)
{
  entry e = (entry) eh;
  if (e->type == LAZY_EVAL) get_file_info(e);
  return e->load;
}

extern unsigned long dir_entryexec(dir_entry eh)
{
  entry e = (entry) eh;
  if (e->type == LAZY_EVAL) get_file_info(e);
  return e->exec;
}

extern void dir_init(void)
{
  host = host_init();
  sep_ch = host_dir_sep_char();
}

#ifdef LIB_DEBUGGING
extern void dir_debug(int level)
{
  debugging = level;
}
#endif
