/* This source code in this file is licensed to You by Castle Technology
 * Limited ("Castle") and its licensors on contractual terms and conditions
 * ("Licence") which entitle you freely to modify and/or to distribute this
 * source code subject to Your compliance with the terms of the Licence.
 * 
 * This source code has been made available to You without any warranties
 * whatsoever. Consequently, Your use, modification and distribution of this
 * source code is entirely at Your own risk and neither Castle, its licensors
 * nor any other person who has contributed to this source code shall be
 * liable to You for any loss or damage which You may suffer as a result of
 * Your use, modification or distribution of this source code.
 * 
 * Full details of Your rights and obligations are set out in the Licence.
 * You should have received a copy of the Licence with this source code file.
 * If You have not received a copy, the text of the Licence is available
 * online at www.castle-technology.co.uk/riscosbaselicence.htm
 */
/*
  Title:        pathmacro - process path environment variables
  Status:       C Library Extension
  Copyright:    (C) 2000, Pace Micro Technology plc.
  $Id: pathmacro,v 1.3 2010/05/19 15:03:12 bavison Exp $

*/

#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include <ctype.h>

#include "kernel.h"
#include "hash.h"
#include "host.h"
#include "wholefls.h"
#include "pathmacro.h"

/*
 * This code performs RISC OS-style system variable substitution into filenames, and
 * RISC OS path resolution on pathnames to simplify the job of the UNIX tools in building
 * RISC OS.
 *
 */

typedef struct {
  HashTable hash;
  char env_sep_str[2];
  char dir_sep_str[2];
  char path_suffix[8];
  char scratch[1024];
} pathmacro_state;

/* Function to duplicate a string (allocate memory and copy bytewise)
 *
 * Originally: sbrodie
 *
 * Parameters: const char *s1 - source string
 * Result: char * - duplicate string (or NULL on failure or s1 NULL)
 *
 *
 * Problems: None known
 *
 */

static char *Strdup(const char *s1, size_t extra)
{
        if (s1 == NULL) {
                return NULL;
        }
        else {
                const size_t length = strlen(s1) + 1;
                char *const s2 = malloc(length + extra);

                if (s2 == NULL) return NULL;
                return memcpy(s2, s1, length);
        }
}

static VoidStar pathmacro_resolve_hash(char *name, pathmacro_state *state);

static char *pathmacro_build_filename(char *prefix, char *separator, char *suffix)
{
  size_t slen = strlen(suffix);
  size_t seplen = strlen(separator);
  size_t total_extra = seplen + slen + 1;
  char *result = Strdup(prefix, total_extra);
  if (result) {
    result = strcat(strcat(result, separator), suffix);
  }

  /*
  printf("build_filename: %s | %s | %s << %s >>\n",
    prefix, separator, suffix, result?result:"");
  */

  return result;
}

static char *pathmacro_substitute(char *name, pathmacro_state *state)
{
  char *leftarrow = strchr(name, '<');

  if (leftarrow) {
    size_t varlen = strcspn(leftarrow, ">");
    if (!leftarrow[varlen]) {
      return Strdup(name, 0);
    }
    else {
      char *varval, *result;
      HashId h;
      leftarrow[varlen] = '\0';

      if (hash_enter(state->hash, leftarrow + 1, &h)) {
        hash_assoc(state->hash, h, Strdup(getenv(leftarrow+1), 0));
      }
      varval = hash_value(state->hash, h);
      leftarrow[varlen] = '>';
      *leftarrow = '\0';
      if (!varval) varval = leftarrow; /* ie. points to zero byte */
      result = pathmacro_build_filename(name, varval, leftarrow + varlen + 1);
      *leftarrow = '<';
      if (result) {
        char *newresult = pathmacro_resolve_hash(result, state);
        free(result);
        return newresult;
      }
    }
  }

  return Strdup(name, 0);
}

static VoidStar pathmacro_resolve_hash(char *name, pathmacro_state *state)
/*
 * ** Requires host_init to have been called prior to execution **
 *
 * Returns a fully-resolved version of the 'name' parameter or NULL if something went wrong.
 * Result is a block that has been allocated with malloc if non-NULL.
 *
 * Any string of letters between < and > are replaced by the value of the named environment
 * variable.
 *
 * The variadic arguments are name and value pairs which override any environment variables.
 * The list must be terminated by NULL.
 */
{
  char *result, *rel;

  /* printf("resolve: %s\n", name); */

  rel = name;
  do {
    rel =strchr(rel, ':');
    if (rel && rel[1] == ':') rel += 2;
  } while (rel && *rel != ':');
  /* Firstly, validate that we really do have string:file */
  if (rel) {
    for (result = name; rel && result != rel; ++result) {
      if (!isalnum(*result)) {
        /* Not a path variable */
        rel = NULL;
      }
    }
  }

  if (!rel) {
    /* No environment variable to chug through */
    name = Strdup(name, 0);
    if (name) {
      name = pathmacro_substitute(name, state);
      /* printf("try: %s\n", name); */
      if (wf_filesize(name) == -1) {
        free(name);
        name = NULL;
      }
      else {
        /* printf("pathmacro_resolve_hash: file exists!\n"); */
      }
    }
  }
  else {
    HashId h;
    char *varval, *pathcomp;

    memcpy(state->scratch, name, rel - name);
    strcpy(state->scratch + (rel++ - name), state->path_suffix);
    if (hash_enter(state->hash, state->scratch, &h)) {
      char *value = Strdup(getenv(state->scratch), 0);
      hash_assoc(state->hash, h, value);
    }
    if ((varval = hash_value(state->hash, h)) == NULL) {
      name = NULL;
    }
    else for (pathcomp = varval; *pathcomp;) {
      char temp, *built, *resolved, *sep;
      size_t prefixlen;

      prefixlen = strcspn(pathcomp, state->env_sep_str);
      temp = pathcomp[prefixlen];
      pathcomp[prefixlen] = '\0';
      if (pathcomp[prefixlen-1] == '.' || pathcomp[prefixlen-1] == ':') {
        sep = "";
      }
      else {
        sep = state->dir_sep_str;
      }
      built = pathmacro_build_filename(pathcomp, sep, rel);
      pathcomp[prefixlen] = temp;
      pathcomp += prefixlen;
      if (*pathcomp) ++pathcomp;
      if (built) {
        resolved = pathmacro_resolve_hash(built, state);
        free(built);
        if (resolved) {
          name = resolved;
          break;
        }
      }
    }
  }

  return name;
}

extern VoidStar pathmacro_resolve(char *name, ...)
{
  char *result = NULL;
  pathmacro_state state;

  state.hash = hash_cinew(4);
  if (state.hash) {
    char *a1;
    va_list ap;
    int os;

    va_start(ap, name);
    while ((a1 = va_arg(ap, char *)) != NULL) {
      HashId hid;
      if (hash_enter(state.hash, a1, &hid)) {
        hash_assoc(state.hash, hid, Strdup(va_arg(ap, char *), 0));
      }
    }
    va_end(ap);

    os = host_system();
    state.path_suffix[0] = (os == _kernel_SPRINGBOARD || os == _kernel_A_UNIX) ? '\0' : '$';
    state.path_suffix[1] = '\0';
    strcat(state.path_suffix, "PATH");

    state.env_sep_str[0] = host_env_var_sep_char();
    state.env_sep_str[1] = '\0';

    state.dir_sep_str[0] = host_dir_sep_char();
    state.dir_sep_str[1] = '\0';

    result = pathmacro_resolve_hash(name, &state);
    hash_destroy(state.hash, free);
  }

  return result ? result : Strdup(name, 0);
}
