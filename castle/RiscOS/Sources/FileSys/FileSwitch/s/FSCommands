; This source code in this file is licensed to You by Castle Technology
; Limited ("Castle") and its licensors on contractual terms and conditions
; ("Licence") which entitle you freely to modify and/or to distribute this
; source code subject to Your compliance with the terms of the Licence.
; 
; This source code has been made available to You without any warranties
; whatsoever. Consequently, Your use, modification and distribution of this
; source code is entirely at Your own risk and neither Castle, its licensors
; nor any other person who has contributed to this source code shall be
; liable to You for any loss or damage which You may suffer as a result of
; Your use, modification or distribution of this source code.
; 
; Full details of Your rights and obligations are set out in the Licence.
; You should have received a copy of the Licence with this source code file.
; If You have not received a copy, the text of the Licence is available
; online at www.castle-technology.co.uk/riscosbaselicence.htm
; 
        SUBT    > Sources.FSCommands - Filing system commands

; Sam says we can trash r0-r6 in module *Commands

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Access_Code Entry

        MOV     r4, #FSControl_Access

10      MOV     r1, r0                  ; First ep for below
        MOV     r2, r1                  ; Save first arg^
        BL      SkipOverNameAndSpaces
        Swap    r1, r2                  ; Reorder first and second args

30      MOV     r0, r4                  ; Restore rc. Second ep for below
        fvSWI   XOS_FSControl
        EXIT

; .............................................................................

Rename_Code ALTENTRY

        MOV     r4, #FSControl_Rename
;;;        MOV     r3, #-1
        B       %BT10

; .............................................................................

Shut_Code ALTENTRY

        MOV     r4, #FSControl_Shut
        B       %BT30

ShutDown_Code ALTENTRY

        MOV     r4, #FSControl_ShutDown
        B       %BT30

; .............................................................................
; Similar code fragments with one (optional) string arg

Cat_Code ALTENTRY

        MOV     r4, #FSControl_Cat

50      MOV     r1, r0                  ; Get arg^
        B       %BT30

Dir_Code ALTENTRY

        MOV     r4, #FSControl_Dir
        B       %BT50

Info_Code ALTENTRY

        MOV     r4, #FSControl_Info
        B       %BT50

FileInfo_Code ALTENTRY

        MOV     r4, #FSControl_FileInfo
        B       %BT50

LEx_Code ALTENTRY

        MOV     r4, #FSControl_LEx
        B       %BT50

Lib_Code ALTENTRY

        MOV     r4, #FSControl_Lib
        B       %BT50

Run_Code ALTENTRY

        MOV     r4, #FSControl_Run
        B       %BT50

LCat_Code ALTENTRY

        MOV     r4, #FSControl_LCat
        B       %BT50

Ex_Code ALTENTRY

        MOV     r4, #FSControl_Ex
        B       %BT50

Back_Code ALTENTRY

        MOV     r4, #FSControl_Back
        B       %BA50

URD_Code ALTENTRY

        MOV     r4, #FSControl_URD
        B       %BA50

NoDir_Code ALTENTRY

        MOV     r4, #FSControl_NoDir
        B       %BA50

NoURD_Code ALTENTRY

        MOV     r4, #FSControl_NoURD
        B       %BA50

NoLib_Code ALTENTRY

        MOV     r4, #FSControl_NoLib
        B       %BA50

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Construct a file consisting of name,CR ... out of the given dir

enumdir_entries * 24                    ; NB. Must be EVEN st. *6 -> WordAlign
enumdir_bsize   * enumdir_entries * 6   ; 24 names at ~5 or 6 chars each

EnumDir_Code Entry "r0-r1, r7, r9-r10" ; Low registers used sp relative

        LDR     wp, [r12]               ; Need it again !

        MOV     r1, r0
        BL      SkipOverNameAndSpaces   ; Point to output filename
        MOV     r9, r1
        MOV     r0, #open_write         ; Create for output
        BL      OpenFileWithWinge
        STRVS   r0, [sp]                ; Return error to Sam
        EXIT    VS
        MOV     r7, r1                  ; Save handle

        LDR     r14, [sp, #4]           ; Was there a supplied wildcard parm ?
        TEQ     r14, #3
        ADRNE   r1, fsw_wildstar        ; Match them all then
        MOVEQ   r1, r9
        BLEQ    SkipOverNameAndSpaces   ; Point to wildcard specifier
        MOV     r9, r1                  ; Remember space stripped w/c spec

        MOV     r4, #0                  ; Start at the beginning

        SUB     sp, sp, #enumdir_bsize  ; Create local frame

10 ; Loop geting batches of names

        BL      STestEscape             ; And ack if found. Yields r0 -> error
        BVS     %FT75

        CMP     r4, #-1                 ; Start point in dir. -1 means ended
        BEQ     %FT75                   ; Good exit

        MOV     r0, #OSGBPB_ReadDirEntries
        LDR     r1, [sp, #enumdir_bsize] ; Name^ passed in r0 stacked, not r1 !
        MOV     r2, sp
        MOV     r3, #enumdir_entries
        MOV     r5, #enumdir_bsize
        MOV     r6, r9                  ; Wild card specifier
        fvSWI   XOS_GBPB
        BVS     %FT75                   ; Close file and exit
        MOVS    r10, r3                 ; No names matched this time ?
        BEQ     %BT10                   ; Loop and get some more to match

        MOV     r1, r7                  ; Restore handle. R2 -> buffer still

20 ; Loop copying names out to file

        LDRB    r0, [r2], #1
        CMP     r0, #0                  ; Terminate string appropriately
        MOVEQ   r0, #10                 ; with a LineFeed char
        fvSWI   XOS_BPut                ; Preserves Z flag
        BVS     %FT75                   ; Close file and exit

        SUBEQS  r10, r10, #1            ; If done all chars (EQ ^) and done
        BNE     %BT20                   ; all the names we got (EQ then) then
        B       %BT10                   ; loop and get another batch


75      ADD     sp, sp, #enumdir_bsize  ; Destroy local frame

        STRVS   r0, [sp]                ; Return current error (if any) to Sam
        SavePSR r2
        MOV     r0, #0
        MOV     r1, r7
        fvSWI   XOS_Find
        STRVS   r0, [sp]                ; May modify it though
        RestPSR r2, VC                  ; V from op/Close
        EXIT

fsw_wildstar                            ; Used from all over
        DCB     "*", 0
        ALIGN

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

SetType_Code Entry "r0"

        MOV     r1, r0                  ; Get filename^
        BL      SkipOverNameAndSpaces   ; Point to string arg

        MOV     r0, #FSControl_FileTypeFromString
        fvSWI   XOS_FSControl

        MOVVC   r0, #OSFile_SetType

50      LDRVC   r1, [sp]                ; Get filename^
        fvSWIVC XOS_File                ; Entered from below
        STRVS   r0, [sp]
        EXIT

; .............................................................................

Stamp_Code ALTENTRY

        MOV     r0, #OSFile_SetStamp
        B       %BT50

; .............................................................................

CDir_Code ALTENTRY

        CMP     r1, #1                  ; Just one parm given ? VClear
        MOVEQ   r4, #0                  ; Default size parm is zero
        BEQ     %FT90

        MOV     r1, r0                  ; -> filename
        BL      SkipOverNameAndSpaces
        MOV     r0, #(1 :SHL: 31) + 10  ; Default base 10, no bad terms
        fvSWI   XOS_ReadUnsigned        ; Read numeric parm (no. of entries)
        MOVVC   r4, r2                  ; r4 for OSFile

90      MOVVC   r0, #OSFile_CreateDir   ; Will datestamp itself
        B       %BT50

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Up_Code Entry

        LDR     wp, [r12]               ; Actually need this for once !

        CMP     r1, #0                  ; No parms ? VClear
        MOVEQ   r2, #1                  ; Default number is one

        MOVNE   r1, r0                  ; Parm^
        MOVNE   r0, #(2_101 :SHL: 29) + 10 ; Decimal default, no bad terms
        MOVNE   r2, #128                ; Restrict range (256/2)
        fvSWINE XOS_ReadUnsigned
        EXIT    VS

        CMP     r2, #0                  ; Zero = stay in CSD
        EXIT    EQ                      ; VClear

; Construct string of r2 '^'s on stack

        SUB     sp, sp, #256+8          ; Compatible number of '^'s possible
        MOV     r1, sp
        MOV     r3, #"^"
        MOV     r4, #"."
51      STRB    r3, [r1], #1
        SUBS    r2, r2, #1              ; Decrement count
        MOVEQ   r4, #CR                 ; Last dot mutates into terminator !
        STRB    r4, [r1], #1
        BNE     %BT51

        MOV     r0, #FSControl_Dir
        MOV     r1, sp
        fvSWI   XOS_FSControl

        ADD     sp, sp, #256+8
        EXIT

 [ hascopy
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Copy_Code Entry "r7, r8"

        LDR     wp, [r12]               ; Really do need it

        MOV     r1, r0
        MOV     r4, r1                  ; Save first arg^
        BL      SkipOverNameAndSpaces
        MOV     r5, r1                  ; Save second arg^
        BL      SkipOverNameAndSpaces
        MOV     r6, r1

        addr    r0, CopyOptsVariableNameCR ; Options for copy read from vbl
        ADD     r3, r0, #CopyOptsVariableDefault - CopyOptsVariableNameCR
        BL      SReadVariableToBuffer

        MOVVC   r3, #util_printok + util_confirm + util_verbose
        BLVC    SussCopyOptions

        ADD     sp, sp, r2              ; Restore sp after SReadVariable

        MOVVC   r1, r6
        BLVC    SussCopyOptions         ; Modify those using passed options

        MOVVC   r0, #FSControl_Copy
        MOVVC   r2, r5                  ; Restore dest^

 ]

 [ haswipe :LOR: hascopy

50      MOVVC   r1, r4                  ; Restore name^. Entry for below (now)
        MOVVC   r4, #0                  ; Start date = 1900
        MOVVC   r5, #0
        MOVVC   r6, #&FFFFFFFF          ; End date = a long time off
        MOVVC   r7, #&000000FF
        fvSWIVC XOS_FSControl
        EXIT
 ]

 [ haswipe
; .............................................................................

Wipe_Code ALTENTRY ;ENTRY "r7"

        LDR     wp, [r12]               ; We do need it

        MOV     r1, r0
        MOV     r4, r1                  ; Save filename^
        BL      SkipOverNameAndSpaces
        MOV     r6, r1

        addr    r0, WipeOptsVariableNameCR ; Options for wipe read from vbl
        ADD     r3, r0, #WipeOptsVariableDefault - WipeOptsVariableNameCR
        BL      SReadVariableToBuffer

        MOVVC   r3, #util_printok + util_confirm + util_verbose ; NoRec,NoForce
        BLVC    SussWipeOptions

        ADD     sp, sp, r2              ; Restore sp after SReadVariable

        MOVVC   r1, r6
        BLVC    SussWipeOptions         ; Modify those using passed options

        MOVVC   r0, #FSControl_Wipe
        B       %BT50                   ; Common up for now
 ]

 [ hascount
; .............................................................................

Count_Code ALTENTRY ;ENTRY "r7"

        LDR     wp, [r12]               ; We do need it

        MOV     r1, r0
        MOV     r4, r1                  ; Save filename^
        BL      SkipOverNameAndSpaces
        MOV     r6, r1

        addr    r0, CountOptsVariableNameCR ; Options for count read from vbl
        ADD     r3, r0, #CountOptsVariableDefault - CountOptsVariableNameCR
        BL      SReadVariableToBuffer

        MOVVC   r3, #util_printok       ; NoConfirm, NoVerbose
        ORRVC   r3, r3, #util_recurse   ; Yes, it's not immediate
        BL      SussCountOptions

        ADD     sp, sp, r2              ; Restore sp after SReadVariable

        MOVVC   r1, r6
        BLVC    SussCountOptions        ; Modify those using passed options

        MOVVC   r0, #FSControl_Count
        B       %BT50                   ; Common up for now
 ]

 [ hascopy
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; In    r1 -> string

SussCopyOptions Entry

        SUBS    r8, r3, #0              ; r8 := r3. CSet

05      BL      SetAndGetUtilOption     ; Needs C from itself. Don't CMP !

        TEQ     r0, #"a"
        MOVEQ   r8, #util_noattr
        TOGPSR  C_bit, r14, EQ          ; Invert C as bit wrong way round
        BEQ     %BT05                   ; for backwrods compatabilly-T

        TEQ     r0, #"c"
        MOVEQ   r8, #util_confirm
        BEQ     %BT05

        TEQ     r0, #"d"
        MOVEQ   r8, #util_deletesrc
        BEQ     %BT05

        TEQ     r0, #"f"
        MOVEQ   r8, #util_force
        BEQ     %BT05

        TEQ     r0, #"l"
        MOVEQ   r8, #util_peekdest
        BEQ     %BT05

        TEQ     r0, #"n"
        MOVEQ   r8, #util_newer
        BEQ     %BT05

        TEQ     r0, #"p"
        MOVEQ   r8, #util_promptchange
        BEQ     %BT05

        TEQ     r0, #"q"
        MOVEQ   r8, #util_quick
        BEQ     %BT05

        TEQ     r0, #"r"
        MOVEQ   r8, #util_recurse
        BEQ     %BT05

        TEQ     r0, #"s"
        MOVEQ   r8, #util_restamp
        BEQ     %BT05

        TEQ     r0, #"t"
        MOVEQ   r8, #util_structureonly
        BEQ     %BT05

        TEQ     r0, #"v"
        MOVEQ   r8, #util_verbose
        BEQ     %BT05

        BL      TestBadOption
        EXIT
 ]

 [ haswipe
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; In    r1 -> string

SussWipeOptions Entry

        SUBS    r8, r3, #0              ; r8 := r3. CSet

05      BL      SetAndGetUtilOption     ; Needs C from itself. Don't CMP !

        TEQ     r0, #"c"
        MOVEQ   r8, #util_confirm
        BEQ     %BT05

        TEQ     r0, #"f"
        MOVEQ   r8, #util_force
        BEQ     %BT05

        TEQ     r0, #"r"
        MOVEQ   r8, #util_recurse
        BEQ     %BT05

        TEQ     r0, #"v"
        MOVEQ   r8, #util_verbose
        BEQ     %BT05

        BL      TestBadOption
        EXIT
 ]

 [ haswipe
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; In    r1 -> string

SussCountOptions Entry

        SUBS    r8, r3, #0              ; r8 := r3. CSet

05      BL      SetAndGetUtilOption     ; Needs C from itself. Don't CMP !

        TEQ     r0, #"c"
        MOVEQ   r8, #util_confirm
        BEQ     %BT05

        TEQ     r0, #"r"
        MOVEQ   r8, #util_recurse
        BEQ     %BT05

        TEQ     r0, #"v"
        MOVEQ   r8, #util_verbose
        BEQ     %BT05

        BL      TestBadOption
        EXIT
 ]

 [ hasutil
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; In    r1 -> string
;       r3 = bitset to alter
;       r8 = option to reset or set (CClear/CSet)

; Out   r0 = lowercased char
;       r1 updated past char if not term
;       CC if negated, CS otherwise

SetAndGetUtilOption Entry "r2"

        ORRCS   r3, r3, r8              ; If CSet, set option
        BICCC   r3, r3, r8              ; If CClear, clear option

        BL      FS_SkipSpaces           ; r0 = char
; ***^  LDRB    r0, [r1]
        EORS    r2, r0, #"~"            ; Negating next char ?
        LDREQB  r0, [r1, #1]!           ; Read next char and point at it
        CMP     r0, #space
        ADDHI   r1, r1, #1
        Internat_CaseConvertLoad r14,Lower
        Internat_LowerCase r0, r14
        CMP     r2, #1                  ; 0 -> negated -> CC
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; In    r0 = char

; Out   VS, r0 -> error if not space or eoln

TestBadOption ROUT

        CMP     r0, #space
 [ No26bitCode
        MOVLS   pc, lr                  ; V will be clear 'cause r0 is small
 |
        BICLSS  pc, lr, #V_bit
 ]

        Push    "lr"
        ADRL    r0, ErrorBlock_BadCommandOption
        BL      copy_error
 [ No26bitCode
        SETV
        Pull    "pc"
 |
        Pull    "lr"
        ORRS    pc, lr, #V_bit
 ]

 ]

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; *Configure/*Status FileSystem

CFS0    DCB     "CFS0",0
        ALIGN

FileSystem_Code Entry "r0-r4, fp"       ; r0 is return code if VSet. fp for err

        LDR     wp, [r12]               ; Possible errors may be composite
        MOV     fp, #0                  ; No frame, so don't set globalerror

        CMP     r0, #0                  ; *Configure<CR> ?
        BNE     %FT10

        ADR     r0, CFS0                ; FileSystem <fs name>|<fs number>
        BL      message_gswrite0

05      STRVS   r0, [sp]                ; Aaaaaaaaaaaaaaargh!
        EXIT


10      CMP     r0, #1                  ; *Status
        BNE     %FT20

        fvSWI   XOS_WriteS
        DCB     "FileSystem ", 0
        ALIGN
        BLVC    ReadFileCMOS
        BVS     %BT05

        MOV     r4, r2                  ; Remember fs number for printing

        SUB     sp, sp, #128            ; Print filing system name if present
        MOV     r0, #FSControl_ReadFSName
        MOV     r1, r2
        MOV     r2, sp
        MOV     r3, #128
        fvSWI   XOS_FSControl           ; no error returned
        LDRB    r14, [sp]               ; null -> not present
        TEQ     r14, #0
        BNE     %FT15                   ; [got fs name]

        MOV     r0, r4                  ; Print filing system number if not
        MOV     r1, sp
        MOV     r2, #8-1
        fvSWI   XOS_BinaryToDecimal
        MOVVC   r0, #0
        STRVCB  r0, [r1, r2]

15      MOVVC   r0, sp
        fvSWIVC XOS_Write0
        fvSWIVC XOS_NewLine
        ADD     sp, sp, #128
        B       %BT05                   ; Exit testing V


20      MOV     r1, r0                  ; Get command^
        LDRB    r0, [r1]                ; Do we have a parm ?
        CMP     r0, #"A"
        RSBCSS  r14, r0, #"Z"
        BCS     %FT25                   ; Lookup fs name
        CMP     r0, #"a"
        RSBCSS  r14, r0, #"z"
        BCS     %FT25                   ; Lookup fs name

        MOV     r0, #(2_11 :SHL: 30)    ; Detect naff term chars. Limit 255
        fvSWI   XOS_ReadUnsigned
        BVC     %FT30                   ; Always write number even if not there

25      MOVVC   r0, #FSControl_LookupFS
        fvSWIVC XOS_FSControl           ; Look fs name up
        BVS     %BT05
        CMP     r2, #0                  ; Found it ?
        BEQ     %FT35
        MOV     r2, r1                  ; fs number in r1

30      BL      WriteFileCMOS           ; fs number in r2
        B       %BT05                   ; Exit testing V

35      ADR     r0, MagicErrorBlock_FSDoesntExist ; Error if fs not found
        BL      MagicCopyError
        B       %BT05

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

ReadFileCMOS Entry "r0, r1"

        MOV     r0, #ReadCMOS

10      MOV     r1, #FileLangCMOS       ; We now own the whole byte
        fvSWI   XOS_Byte
        STRVS   r0, [sp]
        EXIT


WriteFileCMOS ALTENTRY

        MOV     r0, #WriteCMOS
        B       %BT10

        LTORG

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; *Configure/*Status Truncate

TruncateOnString DCB "CT0",0
TruncateOffString DCB "CT1",0
TruncateOnOffString DCB "CT2",0

Truncate_Code Entry
        LDR     wp, [r12]               ; Possible errors may be composite
        MOV     fp, #0                  ; No frame, so don't set globalerror

        CMP     R0, #1                  ; find out what we're doing
        BCC     %FT10                   ; 0 => Configure nowt
        BEQ     %FT20                   ; 1 => Status

; *Configure Truncate on or off - check syntax then set CMOS

        BL      GetOnOff
        ADRVSL  R0, ErrorBlock_BadCommand
        BLVS    copy_error
        EXIT    VS

        SavePSR R3                      ; save PSR state
        MOV     R0, #ReadCMOS
        MOV     R1, #FileSwitchCMOS
        fvSWI   XOS_Byte
        EXIT    VS
        RestPSR R3                      ; restore PSR state
        ORRNE   R2, R2, #FileSwitchTruncateNamesCMOSBit    ; EQ => off, so clear bit
        BICEQ   R2, R2, #FileSwitchTruncateNamesCMOSBit    ; NE => on, so set bit
        MOV     R0, #WriteCMOS
        fvSWI   XOS_Byte
        EXIT

; *Configure nowt - print syntax message

10
        ADR     R0, TruncateOnOffString
        BL      message_gswrite0
        EXIT

; *Status - print current CMOS state

20
        MOV     R0, #ReadCMOS
        MOV     R1, #FileSwitchCMOS
        fvSWI   XOS_Byte
        EXIT    VS
        TST     R2, #FileSwitchTruncateNamesCMOSBit
        ADRNE   R0, TruncateOnString
        ADREQ   R0, TruncateOffString
        BL      message_gswrite0
        EXIT

; *****************************************************************************
;
;       GetOnOff - Check for on or off on the command line
;
; in:   R0 -> command line (spaces skipped)
;
; out:  VS => not on or off
;       VC, EQ => off found
;       VC, NE => on found
;       R0,R1 corrupted
;

GetOnOff ROUT
 [ :LNOT:No26bitCode
        BIC     R14, R14, #V_bit        ; prepare to exit VC
 ]
        LDRB    R1, [R0], #1
        TEQ     R1, #"O"
        TEQNE   R1, #"o"
 [ No26bitCode
        BNE     %FA20
 |
        ORRNES  PC, R14, #V_bit
 ]

        LDRB    R1, [R0], #1
        TEQ     R1, #"N"
        TEQNE   R1, #"n"
        BNE     %FT10                   ; try off

        LDRB    R1, [R0], #1
        CMP     R1, #" "
 [ No26bitCode
        BHI     %FA20
        CMP     PC, #0                  ; NE: found ON
        MOV     PC, R14
20      SETV
        MOV     PC, R14
 |
        ORRHIS  PC, R14, #V_bit
        BICS    PC, R14, #Z_bit         ; found ON
 ]

10
        TEQ     R1, #"F"
        TEQNE   R1, #"f"
 [ No26bitCode
        BNE     %BA20
 |
        ORRNES  PC, R14, #V_bit
 ]

        LDRB    R1, [R0], #1
        TEQ     R1, #"F"
        TEQNE   R1, #"f"
 [ No26bitCode
        BNE     %BA20
 |
        ORRNES  PC, R14, #V_bit
 ]

        LDRB    R1, [R0], #1
        CMP     R1, #" "
 [ No26bitCode
        BHI     %BA20
        CMP     R0, R0                  ; EQ: found OFF
        MOV     PC, R14
 |
        ORRHIS  PC, R14, #V_bit
        ORRS    PC, R14, #Z_bit         ; found OFF
 ]

        END
