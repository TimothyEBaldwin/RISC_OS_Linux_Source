; This source code in this file is licensed to You by Castle Technology
; Limited ("Castle") and its licensors on contractual terms and conditions
; ("Licence") which entitle you freely to modify and/or to distribute this
; source code subject to Your compliance with the terms of the Licence.
; 
; This source code has been made available to You without any warranties
; whatsoever. Consequently, Your use, modification and distribution of this
; source code is entirely at Your own risk and neither Castle, its licensors
; nor any other person who has contributed to this source code shall be
; liable to You for any loss or damage which You may suffer as a result of
; Your use, modification or distribution of this source code.
; 
; Full details of Your rights and obligations are set out in the Licence.
; You should have received a copy of the Licence with this source code file.
; If You have not received a copy, the text of the Licence is available
; online at www.castle-technology.co.uk/riscosbaselicence.htm
; 
        SUBT    > Sources.FSShared

; Make sure these are consistent with those used in OSUtils

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; In    r0 = open mode
;       r1 -> filename

; Out   VC: r0 = r1 = handle
;       VS: r0 -> error (FilingSystemError or 'NotFound')

OpenFileWithWinge Entry

        ORR     r0, r0, #open_nodir + open_mustopen
        fvSWI   XOS_Find
        MOVVC   r1, r0
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

SetErrorEscape ; This is for utility command and should NOT go BL CopyError !

        ADR     r0, ErrorBlock_Escape
 [ No26bitCode
        SETV
        MOV     pc, lr
 |
        ORRS    pc, lr, #V_bit
 ]

ErrorBlock_Escape
        DCD     ErrorNumber_Escape
        DCB     "Escape", 0
        ALIGN

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

SkipOverNameAndSpaces EntryS

        BL      SkipToSpace

10      LDRB    r0, [r1], #1
        CMP     r0, #space      ; Leave r1 -> ~space
        BEQ     %BT10
        SUB     r1, r1, #1
        EXITS                   ; r0 = first ~space

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

SkipToSpace Entry "r0"

10      LDRB    r0, [r1], #1
        CMP     r0, #delete
        CMPNE   r0, #space      ; Leave r1 -> space or CtrlChar
        BHI     %BT10
        SUB     r1, r1, #1
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; In    r0 = number to print
;       r1 = 0 -> strip spaces
;            1 -> print leading spaces for field of 4

; Number gets printed RJ in a field of 4 if possible, or more as necessary

PrintR0Decimal Entry "r0-r3"

        SUB     sp, sp, #16
        MOV     r3, r1                  ; Save flag
        MOV     r1, sp
        MOV     r2, #16
        fvSWI   XOS_BinaryToDecimal     ; Ignore any errors from this
        CMP     r3, #0                  ; Doing spaces ?
        RSBNES  r3, r2, #4              ; How many spaces do we need ?
        BLE     %FT10

05      SWI     XOS_WriteI+" "          ; But errors in here are bad
        BVS     %FT99
        SUBS    r3, r3, #1
        BNE     %BT05

10      LDRB    r0, [r1], #1
        fvSWI   XOS_WriteC
        BVS     %FT99
        SUBS    r2, r2, #1
        BNE     %BT10

99      ADD     sp, sp, #16
        STRVS   r0, [sp]
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Report a monitor name based on OPT1 settings
; In    r2 = load addr
;       r3 = exec addr
;       r4 = length
;       r6 -> unwildcarded leafname
;       r7 = opt 1 value
;
; Out   regs preserved

ReportMonitor Entry "r0-r2, r8"
        CMP     r7, #0
        EXIT    EQ                      ; VClear

; Must copy name away in case of reentrancy (very low lifetime object anyway)

        ADR     r0, OptFilenameString
        MOV     r1, r6
        BL      SGetLinkedString_excludingspaces ; Stop on CtrlChar/space
        EXIT    VS

; Always print name. r1 -> copy of filename. r7 = OPT 1 value

        MOV     r8, #0                  ; Print name in field of 10
20      LDRB    r0, [r1], #1
        CMP     r0, #0                  ; Now zero terminated
        ADDNE   r8, r8, #1              ; Another one bites the dust
        SWINE   XOS_WriteC              ; WriteC preserves Z
        BVS     %FT95
        BNE     %BT20                   ; Loop over all of name

; OPT 1, 2 or higher ?

        CMP     r7, #1                  ; OPT 1,1 -> just filename, no trailers
        BEQ     %FT85

; Must now pad out in field of 10, 'cos here comes the info

26      CMP     r8, #10                 ; Must allow for name overflowing !
        ADDLO   r8, r8, #1              ; Finished spacing yet ?
        SWILO   XOS_WriteI+space
        BVS     %FT95
        BLO     %BT26

27      SWIVC   XOS_WriteI+space        ; Two spaces please in any case
        SWIVC   XOS_WriteI+space
        BVS     %FT95

        CMP     r7, #2                  ; OPT 1, 2 -> Hex Load/Exec/Length
        BNE     %FT50                   ; OPT 1, 4 and above identical to 3

30      MOV     r0, r2                  ; Load address in hex. Entry from below
        BL      HexR0LongWord
        SWIVC   XOS_WriteI+space

        MOVVC   r0, r3                  ; Exec address in hex
        BLVC    HexR0LongWord
        B       %FT80                   ; Print the length as well

50 ; Interpret the load and exec addresses suitably

        CMP     r2, r3                  ; Load = exec -> BBC utility
        BEQ     %BT30
        CMP     r2, #&FFF00000          ; Undated ones are given in hex
        BCC     %BT30

        Push    "r2, r3"
        MOV     r2, r2, LSR #8          ; File type in bottom 12 bits
        BL      DecodeFileType
        MOV     r0, r2
        BL      PrintR0Chars
        MOVVC   r0, r3
        BLVC    PrintR0Chars
        Pull    "r2, r3"

        SUB     sp, sp, #64
        SWIVC   XOS_WriteI+space
        MOVVC   r0, sp
        STRVC   r3, [sp]
        STRVCB  r2, [sp, #4]
        ADDVC   r1, sp, #8              ; rv^
        MOVVC   r2, #64-8
        SWIVC   XOS_ConvertStandardDateAndTime
        ADDVC   r0, sp, #8
        SWIVC   XOS_Write0
        ADD     sp, sp, #64

; Exit for OPT 1, 2 and above - print a space, then the length

80      SWIVC   XOS_WriteI+space
        MOVVC   r0, r4                  ; Length in hex
        BLVC    HexR0LongWord

; Exit for OPT 1, 1

85      SWIVC   XOS_NewLine             ; Tidy up the output line

95      BLVS    CopyErrorExternal

        ADR     r0, OptFilenameString   ; Always deallocate string
        BL      SFreeLinkedArea
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Shared output routines; present in OS version

HexR0LongWord
        Push    "R0, lr"
        MOV     R0, R0, ROR #16
        BL      HexR0Word
        MOVVC   R0, R0, ROR #32-16
        BLVC    HexR0Word
        STRVS   R0, [sp]
        Pull    "R0, PC"

HexR0Word
        Push    "R0, lr"
        MOV     R0, R0, ROR #8
        BL      HexR0Byte
        MOVVC   R0, R0, ROR #32-8
        BLVC    HexR0Byte
        STRVS   R0, [sp]
        Pull    "R0, PC"

HexR0Byte
        Push    "R0, lr"
        MOV     R0, R0, ROR #4
        BL      HexR0Nibble
        MOVVC   R0, R0, ROR #32-4
        BLVC    HexR0Nibble
        STRVS   R0, [sp]
        Pull    "R0, PC"

HexR0Nibble
        Push    "R0, lr"
        AND     R0, R0, #15
        CMP     R0, #10
        ADDCC   R0, R0, #"0"
        ADDCS   R0, R0, #"A"-10
        fvSWI   XOS_WriteC
        STRVS   R0, [sp]
        Pull    "R0, PC"

FileSwitch_ModuleEnd

        END
