; This source code in this file is licensed to You by Castle Technology
; Limited ("Castle") and its licensors on contractual terms and conditions
; ("Licence") which entitle you freely to modify and/or to distribute this
; source code subject to Your compliance with the terms of the Licence.
; 
; This source code has been made available to You without any warranties
; whatsoever. Consequently, Your use, modification and distribution of this
; source code is entirely at Your own risk and neither Castle, its licensors
; nor any other person who has contributed to this source code shall be
; liable to You for any loss or damage which You may suffer as a result of
; Your use, modification or distribution of this source code.
; 
; Full details of Your rights and obligations are set out in the Licence.
; You should have received a copy of the Licence with this source code file.
; If You have not received a copy, the text of the Licence is available
; online at www.castle-technology.co.uk/riscosbaselicence.htm
; 

; Public interface (ie interface to SoundDMA) of DMA audio controller devices

        GET     hdr:HALDevice

OldOpt  SETA    {OPT}
        OPT     OptNoList+OptNoP1List

 [ :LNOT: :DEF: Included_Hdr_AudioDevice
                         GBLL Included_Hdr_AudioDevice
Included_Hdr_AudioDevice SETL {TRUE}

; Device for each DMA controller

                                ^       0
                                #       HALDeviceSize
HALDevice_AudioMixer            #       4
HALDevice_AudioChannelsOut      #       4
HALDevice_AudioChannelsIn       #       4
HALDevice_Audio_Size            *       :INDEX: @
; Extra data for API 1
HALDevice_AudioDMAParams        #       20 ; Values of R0, R1, R2, R3, R7 to pass to DMA_RegisterChannel
HALDevice_AudioPreEnable        #       4 ; Called before DMA is enabled. R1=DMA buffer size.
HALDevice_AudioPostEnable       #       4 ; Called after DMA is enabled. R1=DMA buffer size.
HALDevice_AudioPreDisable       #       4 ; Called before DMA is disabled.
HALDevice_AudioPostDisable      #       4 ; Called after DMA is disabled.
HALDevice_AudioIRQHandle        #       4 ; IRQ handler. On exit, r0=0 for OK, r0=1 for audio reset required.
HALDevice_AudioNumRates         #       4 ; Number of supported sample rates
HALDevice_AudioRateTable        #       4 ; Pointer to sample rate table
HALDevice_AudioSetRate          #       4 ; Call with R1=0-based sample rate idx
HALDevice_Audio_Size_1          *       :INDEX: @
; Extra data for API 2
HALDevice_AudioCustomDMAEnable  #       4 ; PreEnable+PostEnable replacement for systems that don't use DMAManager. R1=DMA buffer size, R2=first buffer, R3=second buffer, SP+0=callback param, SP+4=callback func
HALDevice_AudioFlags            #       4 ; Extra flags
HALDevice_AudioMinBuffSize      #       4 ; Minimum buffer size, bytes
HALDevice_AudioBuffAlign        #       4 ; Alignment/granularity of buffer (bytes, power of 2 for API 2, non-power of 2 supported by API 3+)
HALDevice_Audio_Size_2          *       :INDEX: @

; Sample rate table format
                                ^       0
AudioRateTable_Frequency        #       4 ; Frequency in Hz*1024
AudioRateTable_Period           #       1 ; Period in usec
AudioRateTable_Reserved         #       3 ; Reserved - can be used by audio device
AudioRateTableSize              *       :INDEX: @

; Flags

AudioFlag_StereoReverse         *       1 ; If set, data needs to be supplied L-R-L-R instead of VIDC style R-L-R-L
AudioFlag_Synchronous           *       2 ; For CustomDMA mode: If set, SoundDMA should perform its processing in a synchronous manner from within the callback function, rather than postponing to an RTSupport routine (requires API 3+)

; Return values for IRQHandle entry

AudioIRQHandle_NOP              *       0 ; Do nothing further
AudioIRQHandle_RequestReset     *       1 ; Turn it off and on again

 ]

        OPT     OldOpt
        END
