; This source code in this file is licensed to You by Castle Technology
; Limited ("Castle") and its licensors on contractual terms and conditions
; ("Licence") which entitle you freely to modify and/or to distribute this
; source code subject to Your compliance with the terms of the Licence.
; 
; This source code has been made available to You without any warranties
; whatsoever. Consequently, Your use, modification and distribution of this
; source code is entirely at Your own risk and neither Castle, its licensors
; nor any other person who has contributed to this source code shall be
; liable to You for any loss or damage which You may suffer as a result of
; Your use, modification or distribution of this source code.
; 
; Full details of Your rights and obligations are set out in the Licence.
; You should have received a copy of the Licence with this source code file.
; If You have not received a copy, the text of the Licence is available
; online at www.castle-technology.co.uk/riscosbaselicence.htm
; 
; > Sources.ModHead

;;-----------------------------------------------------------------------------
;; Decompression module for squeezed AIF files with intact AIF header
;;-----------------------------------------------------------------------------

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Services
        GET     Hdr:ModHand
        GET     Hdr:MsgTrans
        GET     Hdr:FSNumbers
        GET     Hdr:NewErrors
        GET     Hdr:NdrDebug
        GET     Hdr:Proc

        GET     VersionASM

        GBLL    hostvdu
        GBLL    debugwt
debug    SETL   {FALSE}
debugwt  SETL   {FALSE}
hostvdu  SETL   {FALSE}

; ----------------------------------------------------------------------------------------------------------------------

        AREA    |!!!ModuleHeader|, CODE, READONLY, PIC

Module_BaseAddr
        DCD     0
        DCD     Initialise     - Module_BaseAddr
        DCD     0
        DCD     Service        - Module_BaseAddr        ; Service
        DCD     Title          - Module_BaseAddr
        DCD     Helpstr        - Module_BaseAddr
        DCD     0                                       ; Helptable
  [ :LNOT: No32bitCode
        DCD     0                                       ; SWIbase
        DCD     0                                       ; SWI handler code
        DCD     0                                       ; SWI decode table
        DCD     0                                       ; SWIdecode
        DCD     0                                       ; International messages
        DCD     ModuleFlags    - Module_BaseAddr        ; Module flags
  ]

; ---------------------------------------------------------------------------------------------------
Title   DCB     "UnSqueezeAIF",0
Helpstr DCB     "UnSqueezeAIF",9,"$Module_MajorVersion ($Module_Date)"
  [ Module_MinorVersion <> ""
        DCB     " $Module_MinorVersion"
  ]
        DCB     0
        ALIGN

  [ :LNOT: No32bitCode
ModuleFlags
        DCD     ModuleFlag_32bit
  ]

; ---------------------------------------------------------------------------------------------------

        GBLL    AllowNonAIF               ;if true, attempt to patch even without AIF header
AllowNonAIF SETL {TRUE}


        GBLL    ForROM                    ;if true, refuse to initialise (go dormant) if not needed
ForROM      SETL {TRUE}

        MACRO
        BackToUsr
     [ No26bitCode
        SWI     OS_LeaveOS              ; USR mode
     |
      [ No32bitCode
        TEQP    pc, #0                  ; USR mode, all ints on
      |
        SWI     XOS_LeaveOS             ; USR mode
        TEQVSP  pc, #0                  ; USR mode, all ints on
      ]
        MOV     r0, r0                  ; Avoid ARM2 bug
     ]
        MEND


Initialise
        Push    "LR"
        MOV     R0,#0
        SWI     XOS_PlatformFeatures
        MOVVS   R0,#0
        ANDS    R0,R0,#1                  ;bit 0 set if SynchroniseCodeAreas required
  [ ForROM
        ORRNE   R0,R0,#&100               ;bit 8 set to show we have initialised
        STRNE   R0,[R12]                  ;store flags word as workspace word
        ADREQ   R0,ErrorBlock_HardwareDepends
        MOVEQ   R1,#0
        MOVEQ   R2,#0                     ;lookup in global messages to internal buffer
        SWIEQ   XMessageTrans_ErrorLookup ;returns V set
  |
        ORR     R0,R0,#&100               ;bit 8 set to show we have initialised
        STR     R0,[R12]                  ;store flags word as workspace word
  ]
        Pull    "PC"

  [ ForROM
        MakeErrorBlock HardwareDepends
  ]

ServiceTable
        DCD     0                                ;flags
        DCD     UService - Module_BaseAddr
        DCD     Service_UKCompression
        DCD     0                                ;terminator
        DCD     ServiceTable - Module_BaseAddr
Service ROUT
        MOV     r0, r0                           ;magic instruction
        TEQ     r1, #Service_UKCompression
        MOVNE   pc, lr                           ;Not our service.
UService
        CMP     r0, #0                           ;Is it the pre-decompression call?
        MOVNE   pc, lr                           ;No, so we're not interested.

        Push    "r0,r2-r6,lr"

        LDR     r0,[r12]
        ANDS    r0,r0,#1
        Pull    "r0,r2-r6,pc",EQ        ; forget it if not needed

        ;Check whether the file is an AIF-headered file.
        LDR     lr, [r2, #&10]          ; We know R2 is &8000, 'cos it's an app
        EOR     r0, lr, #&EF000000      ; 'SWI'
        EORS    r0, r0, #&0011          ; 'OS_Exit'  Is the 5th word a 'SWI OS_Exit'?
        MOVEQ   r6,#1
        MOVNE   r6,#0                   ;flag AIF/non-AIF
  [ :LNOT: AllowNonAIF
        BNE     %FT01                   ; Nope, so not an AIF file
  ]

        LDR     lr, [r2]                ; Read the first word of the AIF header
        AND     lr, lr, #&FF000000      ; Clear the offset
        CMP     lr, #&EB000000          ; BL? If so, we're compressed
  [ AllowNonAIF
        CMPNE   lr, #&EA000000          ; allow B as well
  ]
        BEQ     %FT02

        ;there's nothing to do, so quit, unclaimed.
01      MOV     r1, #Service_UKCompression
        Debug   wt,"give up 1"
        Pull    "r0,r2-r6,pc"

02
        LDR     lr,[r2]
        MOVS    lr, lr, LSL #8          ;remove top 8 bits
        BMI     %BT01                   ;negative?  nasty branch - forget this code
        ADD     r0,r2,lr,ASR #6         ;add offset of branch in bytes (should be +ve)
        ADD     r0,r0,#8                ;and account for PC+8

        ADR     r4,UnsqSignature
        LDR     r5,[r4],#4

        ADD     r3,r3,r2
        ADD     r3,r3,#3
        BIC     r3,r3,#3
        SUB     r3,r3,#UnsqSigSize      ;last address to look at for start of signature

  Debug wt,"check between ",r0,r3,r5

03
        LDR     r1,[r0],#4
        CMP     r1,r5
        BEQ     %FT05
        CMP     r0,r3
        BLO     %BT03
;give up
04      MOV     r1, #Service_UKCompression
        Debug   wt,"give up 2"
        Pull    "r0,r2-r6,pc"

05      ;found 1st word of signature
        MOV     lr,#UnsqSigSize-4
06
        LDR     r5,[r4],#4
        LDR     r1,[r0],#4
        CMP     r1,r5
        BNE     %BT04
        SUBS    lr,lr,#4
        BNE     %BT06

        Debug   wt,"found 1st sig"

;this looks like a squeezed image, but what version of squeeze was it produced by?
        LDR     r5,[r0]
        LDR     r1,UnsqSignature503
        CMP     r5,r1
        BEQ     %FT50                   ;Needs our help
        LDR     r1,UnsqSignature500
        CMP     r5,r1
        BNE     %BT04                   ;Squeeze version not known OR it's a known safe version (e.g. 5.09 signature could be here)

        Debug   wt,"looking for 2nd sig"

;we've found a 5.00 signature. Is it a 5.00 squeeze or a fake signature inserted by 5.11+?
;If it's a fake signature, we'll find another signature sequence at R0+20
        ADD     lr,r0,#20
        CMP     lr,r3
        BHS     %BT04                   ;Signature too close to end of image for this to be a squeeze image
        ADR     r4,UnsqSignature
        MOV     r3,#UnsqSigSize
10
        LDR     r5,[r4],#4
        LDR     r1,[lr],#4
        CMP     r1,r5
        BNE     %FT50                   ;Second signature not detected, assume squeeze 5.00
        SUBS    r3,r3,#4
        BNE     %BT10

        Debug   wt,"found 2nd sig"
        
;we could check for a 5.09 signature here, but barring any bugs in 5.09+ the mere presence of a 2nd signature suggests that the code knows what it's doing
        B       %BT04

50
;matched whole signature - apply patch
   Debug wt,"matched"
        SUB     r2,r0,#UnsqSigSize
        LDR     r5,ComeToMeLittleChild
        STR     r5,[r2],#4
        ADR     r1,CopySyncAndGoR4
        STR     r1,[r2],#4

        ;if non-AIF, can't fix-up header to unsqueeze first, so claim and return now
        ;this means code can't really be patched after unsqueeze, but at least the
        ;unsqueeze is fixed
        ;
        ;Note that we don't OS_SynchroniseCodeAreas here for code we've just poked,
        ;because we know FileSwitch does a sychronise, after this service call (after
        ;the next service call, for patching, in fact)

        ANDS    r1, r6, #1              ; AIF bit set?  If not, set Z, R1=0
        Pull    "r0,r2-r6,pc",EQ        ; That's all folks!

        Debug   wt,"It's a squeezed AIF file which we can handle!"

        ;Synchronise the bit we just poked
        MOV     r0,#1
        SUB     r1,r2,#8
        SWI     XOS_SynchroniseCodeAreas

        ;Now place the LDR PC needed to get back here once it's unsqueezed
        LDR     r1, =&800C
        LDMIA   r1, {r0,r2}             ; Grab ImageEntryPoint + SWI OS_Exit
        Push    "r0,r2"                 ; Stuff it safe on the stack
        ADR     lr, retfrmunsq
        STMIA   r1, {r5,lr}             ; Replace it with the LDR

        ;Synchronise again
        MOV     r0,#1
        ADD     r2,r1,#8
        SWI     XOS_SynchroniseCodeAreas

        ;Now go do the unsqueeze
        BackToUsr
        MVN     r12, #0                 ; Cause address extinction if used
        MOV     r13, r12                ; (keep 1.20 compat capable)
        MOV     pc, #&8000              ; Away the noo!

retfrmunsq
        ;Tada! Unsqueeze done
        SWI     XOS_EnterOS             ; Back into SVC mode
        Pull    "r2,r4"
  Debug wt,"back from unsqueeze",r2
        LDR     r1, =&800C              ; Construct the new execution point
        STMIA   r1, {r2,r4}             ; Put the ImageEntryPoint + OS_Exit instruction back!
        MOV     r0,#1
        ADD     r2,r1,#8
        SWI     XOS_SynchroniseCodeAreas ;we've been poking again
        STR     r1,[sp,#12]             ; update the stacked r4
        MOV     r1, #0                  ; Mark it as claimed.
        Pull    "r0,r2-r6,pc"           ;That's all folks!


;code to look for
UnsqSignature
        LDMIA   R5!,{R0-R3}
        STMIA   R7!,{R0-R3}
        CMP     R5,R6
        BLT     UnsqSignature
UnsqSigSize * 4*4

; Signature tail word - differs by squeeze version

UnsqSignature500 ; StrongARM incompatible OR fake signature for ROL's unsqueeze
        MOV     PC,R4

UnsqSignature503 ; StrongARM compatible BUT buggy OS_SynchroniseCodeAreas
        MOV     R1,R7

;UnsqSignature509 ; Fixed OS_SynchroniseCodeAreas
;        MOV     R1,R4

;code to poke in
ComeToMeLittleChild
        LDR     PC,ComeToMeLittleChild+4


;code to be jumped to, instead of the signature code
CopySyncAndGoR4 ROUT
        LDMIA   R5!,{R0-R3}
        STMIA   R7!,{R0-R3}
        CMP     R5,R6
        BLT     CopySyncAndGoR4

;word copied near end should be MOV PC,R8, which should itself be patched
        SUB     R0,R7,#4
        SUB     R1,R0,#16*4
        LDR     R3,TheMOVPCR8
08
        LDR     R2,[R0],#-4
        CMP     R2,R3
        BEQ     %FT09
        CMP     R0,R1
        BGT     %BT08
        B       %FT10
09

;check if there's already an XOS_SynchroniseCodeAreas call present. If so, there's no point us patching our own one in.
        LDR     r1,[r0],#4
        LDR     r2,XOSSynchronise
        CMP     r1,r2
        BEQ     %FT10

;extra complication with 32bit machines is that limited B/BL range means we need to place two words, not one. check if there's enough space already (i.e. spare space not used by ADD/SUBs), or if we need to go back one instruction and overwrite one of the ADD/SUBs
        SUB     r2,r7,r0
        CMP     r2,#8
        SUBLT   r0,r0,#4                ;go back one more, this should leave us over an ADD/SUB R8,R8,#...
        SWI     XOS_EnterOS
        LDMIA   r0,{r1,r2}
        Push    "r0-r2"                 ;stick the old words on the SVC stack, along with where they came from
        Debug   wt,"SyncAndGoR8 with",r0,r1,r2
        BackToUsr
        LDR     r1,ComeToMeLittleChild
        ADR     r2,SyncAndGoR8
        STMIA   r0,{r1,r2}

10
        MOV     R0,#0
XOSSynchronise
        SWI     XOS_SynchroniseCodeAreas ;you've guessed it
        MOV     PC,R4


SyncAndGoR8
        SWI     XOS_EnterOS
        Pull    "r0-r2"
        STMIA   r0,{r1-r2}              ;replace the words we swapped out earlier
        BackToUsr
        MOV     lr,r0
        MOV     R0,#0
        SWI     XOS_SynchroniseCodeAreas
        MOV     pc,lr                   ;return to whence we came

TheMOVPCR8
        MOV     PC,R8

;----------------------------------------------------------------------------------------------------
; Neil's debugging routines
      [ debug
        InsertNDRDebugRoutines
      ]

        END
