; This source code in this file is licensed to You by Castle Technology
; Limited ("Castle") and its licensors on contractual terms and conditions
; ("Licence") which entitle you freely to modify and/or to distribute this
; source code subject to Your compliance with the terms of the Licence.
; 
; This source code has been made available to You without any warranties
; whatsoever. Consequently, Your use, modification and distribution of this
; source code is entirely at Your own risk and neither Castle, its licensors
; nor any other person who has contributed to this source code shall be
; liable to You for any loss or damage which You may suffer as a result of
; Your use, modification or distribution of this source code.
; 
; Full details of Your rights and obligations are set out in the Licence.
; You should have received a copy of the Licence with this source code file.
; If You have not received a copy, the text of the Licence is available
; online at www.castle-technology.co.uk/riscosbaselicence.htm
; 
;******************************************************************************
;
; Module.s
;
; Author: Mark Watson (EESOX)
;
; Description
; ===========
; This handles the module bits of the ATAPI driver.
;
; Change record
; =============
; 12-Mar-95  19:23  cpartington (Cambridge Systems Design)
; * Added code to IDENTIFY to recognise Sony CDU50E 0.3n and handle
;   incorrect data returned.
; * Added debug.
;
; 14-Mar-95  16:49  cpartington (Cambridge Systems Design)
; * Moved Sony CDU50E 0.3n recognition string to s.Strings.
; * Added code to decode the CMD DRQ bits of the configuration word and
;   update DriveFlags accordingly.
; * Removed code to save configuration word - it's not used and new
;   DriveFlags can more efficiently be checked.
;
; 19-Jun-95  15:41  cpartington (Cambridge Systems Design)
; * Added faster_startup code (don't look for more drives than are
;   configured).
;
; 21-Jun-95  15:21  cpartington (Cambridge Systems Design)
; * Added test code conditional on cdp_swi.
;
; 06-Jul-95  10:43  cpartington (Cambridge Systems Design)
; * Added code conditional on full_drive_detection to try to code around
;   Sony CDU50E sole drive problem.
;
; 09-Aug-95  15:39  cpartington (Cambridge Systems Design)
; * Removed code conditional on cdp_swi (unused).
;
;*end of change record*
;
;******************************************************************************


; ******************************************************************************
; *                                                                            *
; * Routines in here:                                                          *
; *                   Module_InitialisingCode                                  *
; *                   Module_FinalisingCode                                    *
; *                   Module_SWIHandler                                        *
; *                   Module_SWITable                                          *
; *                   Module_CallBackHandler                                   *
; *                                                                            *
; *                                                                            *
; ******************************************************************************


Module_Flags
 [ No32bitCode
        DCD     0
 |
        DCD     ModuleFlag_32bit
 ]


;***********************************************************************************************
Module_InitialisingCode ROUT
; on entry:
;          r10 -> environment string ( see page 631 )
;          r11 = I/O base or instantiation number
;          r12 -> currently preferred instantiation of module ( private word )
;          r13 -> supervisor stack
; on exit:
;          r7 - r11 and r13 preserved
;
;        Set up variables with default values
;***********************************************************************************************

 Push       r14

 [ cdebug
        CDebug_WriteS   "Initialising ATAPI version $VString ($Date)"
 ]
     MySTRIM    "Initialise"
     DisplayNewLine

;----------------------------
; Check for re-initialisation
;----------------------------
 LDR        r1, [ r12 ]
 TEQ        r1, #0
 BLNE       FreeWorkspace


;----------------------------
; Claim space from RMA
;----------------------------

     MySTRIM    "Claim space"
     DisplayNewLine

 MOV        r0, #ModHandReason_Claim
 LDR        r3, = SizeOfWorkSpace
 SWI        XOS_Module

 Pull       pc, VS


 STR        r2, [ r12 ]
 [ faster_startup
        Push    "r7,r12"
 |
        Push    r12             ; Save private word pointer in case we need it later.
 ]
 MOV        r12, r2

;----------------------------
; Clear workspace
;----------------------------

     MySTRIM    "Clear workspace"
     DisplayNewLine

 MOV        r1, #0

clear_workspace
 STR        r1, [ r2 ], #4
 SUBS       r3, r3, #4
 BGT        clear_workspace

;------------------------------------
; Set the disc changed bits
;------------------------------------
 MOV        r0, # 1
 ADR        r4, disc_changed_list
 [ HAL
 MOV        r1, #MAX_NUMBER_OF_ATAPI_DRIVES - 1
01 STRB     r0, [r4, r1]
 SUBS       r1, r1, #1
 BPL        %BT01
 |
 STRB       r0, [ r4 ]
 STRB       r0, [ r4, # 1 ]
 ]

;-----------------------------------------
; Set the default data mode to 1 (normal)
;-----------------------------------------
 ADR        r4, DriveMode
 MOV        r0, # 1
 [ HAL
 MOV        r1, #MAX_NUMBER_OF_ATAPI_DRIVES - 1
01 STRB     r0, [r4, r1]
 SUBS       r1, r1, #1
 BPL        %BT01
 |
 STRB       r0, [ r4 ]
 STRB       r0, [ r4, # 1 ]
 ]

 [ :LNOT: HAL
;-------------------------------------------------
; Default variable values
;-------------------------------------------------
 LDR        r1, =TASKFILE_BASE_ADDRESS
 STR        r1, TBA
 ]

;-------------------------------------------------
; Build the registration block
;-------------------------------------------------
 ADR        r0, register_block
 LDR        r1, =INFORMATION_WORD
 MOV        r2, #0
 MOV        r3, #DRIVE_TYPES
 STMIA      r0, { r1, r2, r3 }

;-------------------------------------------------
; Register as a soft-loadable device driver
;-------------------------------------------------

     MySTRIM    "Register with CDFSDriver"
     DisplayNewLine

 addr       r1, driver_handler_code
 MOV        r2, r12
 SWI        XCD_Register
 BVS        MIC_NoDrivesFound                 ; If failed to register then start up but with no workspace
                                              ; (CDFSDriver can then kick us into life later).

 [ :LNOT: HAL
;-------------------------------------------------
; Work out what machine I'm running on
;-------------------------------------------------

     MySTRIM    "What machine ?"
     DisplayNewLine


 MOV        r0, # 2
 SWI        XOS_ReadSysInfo
 MOVVS      r0, # 0
 TST        r0, # &ff:SHL:8                   ; i/o control chip, =0 then IOC, =1 then IOMD
 MOVEQ      r0, # IOC__IDE_INTERRUPT_BIT      ; IOC
 MOVNE      r0, # IOMD__IDE_INTERRUPT_BIT     ; IOMD
 STR        r0, IrqFlag

;----------------------------------------------------------------
; Look to see if ADFS_LockIDE is known
;----------------------------------------------------------------
 ADRL       r1, STRING__ADFS_LockIDE
 SWI        XOS_SWINumberFromString
 MOVVC      r0, # TRUE
 MOVVS      r0, # FALSE
 STRB       r0, UseLockSWI
 ]

;-------------------------------------------------
; Work out what ATAPI drives are connected
;-------------------------------------------------

 [ faster_startup
; first determine how many drives are configured so we can stop looking when
; we've found that many

        MOV     r0,#OsByte_ReadCMOS
        MOV     r1,#CDROMFSCMOS         ; location to read
        SWI     XOS_Byte
        BVS     MIC_NoDrivesFound       ; if error, no drives
        ANDS    r7,r2,#CMOSDRIVEBITS
        BEQ     MIC_NoDrivesFound       ; if no drives configured

; no need to force configured drives to be in range 0..2

 ]

 [ HAL

        ASSERT faster_startup
       
        Push    "r8-r10"
                
        MOV     r4, #0                  ; IDE physical device number
        ADR     r5, DriveRecognisedStatus
        MOV     r8, #0
        MOV     r10, #0                 ; ATAEnumerate iterator

MIC_IdentifyLoop

        MOV     r0, #ATAEnumerate_Drives
        MOV     r1, r10
        SWI     XATA_Enumerate
        ADR     r3, DriveCtlPrtDev
        BVC     MIC_IdFromEnumerate

        LDR     r0, [r0]
        LDR     r14, =ErrorNumber_NoSuchSWI
        TEQ     r0, r14
        BNE     MIC_DoneCheckForATAPI   ; ATA SWI is there, but returned an error
        B       MIC_IdFromR4

MIC_IdFromEnumerate
        MOVS    r10, r1                 ; Save iterator for next time
        BEQ     MIC_FoundAllDrives      ; No more

        ; Try this controller/port/device
        MOV     r2, r2, LSL #32-12
        MOV     r2, r2, LSR #32-12      ; Knock out flags
        MOV     r0, r2, LSL #ADFSATAPIOp_DeviceIDShift
        STR     r0, [r3, r4, LSL #2]

        MOV     r0, #ADFSIDEDeviceInfo_ByID
        MOV     r1, r2
        B       MIC_IDEDevInfo

MIC_IdFromR4
        ; Try next physical device
        ASSERT  15 - ADFSATAPIOp_DeviceIDShift = 3
        MOV     r0, r4, LSL #3+ADFSATAPIOp_DeviceIDShift ; Extra shift so b15 = device (0 or 1)
        STR     r0, [r3, r4, LSL #2]                     ;                b23..b16 = controller number

        MOV     r0, #ADFSIDEDeviceInfo_ByLegacyID
        MOV     r1, r4
MIC_IDEDevInfo
        SWI     XADFS_IDEDeviceInfo     ; on exit, if packet device, r1 = 2, r3 -> identify packet device block
        STRVSB  r8, [r5, r4]
        BVS     MIC_DoneCheckForATAPI
       
        TEQ     r1, #2
        STRNEB  r8, [r5, r4]
        BNE     MIC_DoneCheckForATAPI

; Although it's been detected as ATAPI, there'd no guarantee that it will have responded to the identify packet

        CMP     r3, #0
        STREQB  r8, [r5, r4]
        BEQ     MIC_DoneCheckForATAPI

        LDRB    r9, [r3, #ATAPIID__GENERAL_CONFIGURATION + 1]
        LDRB    r14,[r3, #ATAPIID__GENERAL_CONFIGURATION]
        ORR     r9,r14,r9,LSL # 8

; check it's got removable medium

        TST     r9,#1:SHL:7
        STREQB  r8, [r5, r4]
        BEQ     MIC_DoneCheckForATAPI   ; branch if not removable

; check it's a CD-ROM drive

        MOV     r14,r9,LSR #8
        AND     r14,r14,#2_00011111
        TEQ     r14,#5
        STRNEB  r8, [r5, r4]
        BNE     MIC_DoneCheckForATAPI

        ANDS    r6, r9, #3              ; bottom two bits determine packet size
        MOVEQ   r6, #12
        MOVNE   r6, #16                 ; currently undefined devices may need larger packets - this can still
                                        ;   be achieved by the CD_SCSIUserOp caller specifying larger size
        STRB    r6, [r5, r4]            ; flag this drive is present

; check it supports any recent ATAPI standard, emulate READ(12) otherwise

        LDRB    r9, [r3, #ATAPIID__MAJOR_VERSION + 1]
        LDRB    r14,[r3, #ATAPIID__MAJOR_VERSION]
        ORR     r9,r14,r9,LSL # 8

        ADD     r14, r9, #1
        TEQ     r14, #&10000            ; r9 == &FFFF, doesn't report version
        MOVEQ   r9, #2_10000            ; treat as ATAPI-4

        TST     r9, #2_1111:SHL:5       ; any of ATAPI-5 to ATAPI-8
        ADR     r6, DriveFlags          ; r6 -> drive flags
        MOV     r14, #0
        ORREQ   r14, r14, #DriveFlag_Read12Unreliable
        STRB    r14, [r6, r4]

; remember that I found one

        ORR     r8,r8,#1:SHL:16         ; doesn't affect bottom byte

        SUBS    r7,r7,#1                ; --(drives-to-be-found)
        BEQ     MIC_FoundAllDrives      ; all done if now 0

MIC_DoneCheckForATAPI
        ADD     r4, r4, # 1
        CMP     r4, # MAX_NUMBER_OF_ATAPI_DRIVES
        BLT     MIC_IdentifyLoop

MIC_FoundAllDrives

        TST     r8, # 1:SHL:16
        Pull    "r8-r10"

;-------------------------------------------------
; If none were found, then start up but with no workspace
;-------------------------------------------------
        BEQ     MIC_NoDrivesFound

 | ; HAL

 MOV        r0, # 0
 ADR        r1, DriveRecognisedStatus
 MOV        r2, # TRUE
 MOV        r3, # FALSE

MIC_IdentifyLoop

;---------------------------------------------------------------------------------
; Do the Identify drive command, so that I can find out some more about the drive
;---------------------------------------------------------------------------------

 [ cdebug
        CDebug_StrReg2  "Checking drive ",r0
 ]
        Push    "r0-r8"

 [ full_drive_detection
        MOV     r8,#ATAPICONTROL__CheckForDrive
        BL      ATAPI_Control                   ; VC => ATAPI detected
        Pull    "r0-r8",VS
        STRVSB  r3,[r1,r0]                      ; if not present, set flag
        BVS     MIC_DoneCheckForATAPI           ; ...and skip the rest
 ]

        ORR     r0, r0, # readdata + ATAPIOP__IDENTIFY_DEVICE + ATAPIOP__DONT_USE_R7 + ATAPIOP__DONT_RETRY
        MOV     r1, # 0
        MOV     r2, # 0
        ADR     r3, buffer
        MOV     r4, # ATAPIID__STRUCTURE_SIZE

        MOV     r8, # ATAPICONTROL__SEND_COMMAND

        BL      ATAPI_Control


        Pull    "r0-r8"

;---------------------------------------------------------------------------------

        STRVSB  r3, [ r1, r0 ]
        BVS     MIC_DoneCheckForATAPI

; Check for ATAPI CD-ROM drive with removable medium
; r0 = drive number (0/1)
; r1 -> DriveRecognisedStatus
; r2 = TRUE
; r3 = FALSE

        LDRB    r14,buffer + ATAPIID__GENERAL_CONFIGURATION
        LDRB    r8,buffer + ATAPIID__GENERAL_CONFIGURATION + 1
        ORR           r6,r14,r8,LSL # 8
 [ cdebug
        CDebug_StrReg4      "IDENTIFY complete, config=",r6
 ]

; check it's ATAPI
; r6 = configuration word

        MOV     r5,r6,LSR #14
        TEQ     r5,#2_10
        BNE     MIC_DoneCheckForATAPI   ; branch if not ATAPI

; check it's got removable medium

        TST     r6,#1:SHL:7
        BEQ     MIC_DoneCheckForATAPI   ; branch if not removable

; check it's a CD-ROM drive

        MOV     r5,r6,LSR #8
        AND     r5,r5,#2_00011111
        TEQ     r5,#5
        BNE     MIC_DoneCheckForATAPI

; check it supports any recent ATAPI standard, emulate READ(12) otherwise

        LDRB    r14,buffer + ATAPIID__MAJOR_VERSION
        LDRB    r8,buffer + ATAPIID__MAJOR_VERSION + 1
        ORR     r8,r14,r8,LSL # 8

        ADD     r14,r8,#1
        TEQ     r14,#&FFFF+1
        MOVEQ   r8,#0                   ; equate &FFFF and &0000 as not reporting version

; check the CMD DRQ type and save a flag to indicate which it is
; note: this assumes that a "microprocessor DRQ" drive can be treated like
; an "accelerated DRQ" - I've not seen one
; r0 = drive (0/1)

        AND     r6,r6,#2_01100000       ; get CMD DRQ bits
        TEQS    r6,#2_00100000          ; interrupt DRQ
        MOVEQ   r6,#DriveFlag_InterruptDRQ
        MOVNE   r6,#0                   ; treat others as accelerated DRQ
        TST     r8, #2_1111:SHL:5       ; any of ATAPI-5 to ATAPI-8
        ORREQ   r6,r6,#DriveFlag_Read12Unreliable
        ADR     r5,DriveFlags           ; r5 -> drive flags
        STRB    r6,[r5,r0]

        STRB    r2,[ r1, r0 ]           ; flag this drive is present

; remember that I found one

        ORR     r3,r3,#1:SHL:16

 [ faster_startup
        SUBS    r7,r7,#1                ; --(drives-to-be-found)
        BEQ     MIC_FoundAllDrives      ; all done if now 0
 ]


MIC_DoneCheckForATAPI
 ADD        r0, r0, # 1
 CMP        r0, # MAX_NUMBER_OF_ATAPI_DRIVES
 BLT        MIC_IdentifyLoop

 [ faster_startup
MIC_FoundAllDrives
 ]


;-------------------------------------------------
; If none were found, then start up but with no workspace
;-------------------------------------------------
 TST        r3, # 1:SHL:16
 BEQ        MIC_NoDrivesFound

 ] ; HAL

;-------------------------------------------------
; Clear the drive map list
;-------------------------------------------------

MIC_DrivesChecked

 MOV        r0, # 0
 ADR        r1, DriveMapList
 MOV        r2, # -1
 MOV        r3, # -1
 MOV        r4, # -1
 MOV        r5, # -1

MIC_ClearListLoop
 STMIA      r1!, { r2, r3, r4, r5 }
 ADD        r0, r0, # 1
 CMP        r0, # MAX_NUMBER_OF_ATAPI_DRIVES
 BLT        MIC_ClearListLoop

;-------------------------------------------------
; Exit OK
;-------------------------------------------------

 ; V is clear
 [ faster_startup
 Pull       "r7,r12,pc"
 |
 Pull       "r12,pc"
 ]

STRING__ADFS_LockIDE
 DCB        "ADFS_LockIDE", 0
 ALIGN

;-------------------------------------------------
; Exit - NoDrivesFound so free off workspace
;-------------------------------------------------

MIC_NoDrivesFound
 [ faster_startup
 Pull       "r7,r12,r14"
 |
 Pull       "r12,r14"           ; Get back private word pointer and return address.
 ]

 ; Drop through to...

;***********************************************************************************************
Module_FinalisingCode
FreeWorkspace  ROUT
;
; on entry:
;          r12 -> private word
;          r13 -> Full descending stack
; on exit:
;          r0-r2, r6 & r14 corrupted
;
;        Set up variables with default values
;***********************************************************************************************

 LDR        r2, [ r12 ]
 TEQ        r2, #0
 MOVEQ      pc, r14         ; Already unregistered and free'd earlier

 MOV        r6, r14

;---------------------------------------------------------------------------
; Unregister as a CDFS device driver
;---------------------------------------------------------------------------
 MOV        r3, r12
 ADD        r0, r2, #:INDEX:register_block
 addr       r1, driver_handler_code
 MOV        r12, r2
 SWI        XCD_Unregister
 MOV        r12, r3

;---------------------------------------------------------------------------
; Free workspace - don't report an error 'cause that really screws things up
;---------------------------------------------------------------------------
 MOV        r0, #ModHandReason_Free
 SWI        XOS_Module

 SUBS       r0, r0, r0      ; Set private word to 0 so that Kernel doesn't try to free it again!
 STR        r0, [r12]

 ; V is clear
 MOV        pc, r6

;***********************************************************************************************
;
Module_SWIHandler ROUT
;
; on entry:
;          r11 = SWI number MOD 64
;          r12 = private word pointer
;          r13 = supervisor stack
;          r14 = return register
; on exit:
;          r10 - r12 corrupted
;
;    This performs the ATAPI_.. SWI
;
;***********************************************************************************************

      MACRO__ENTER_DRIVER

;---------------------------
; Load the workspace pointer
;---------------------------
      LDR         r12, [ r12 ]

;---------------------------
; Jump to the SWI
;---------------------------
      TEQ         r11, # ATAPI_GetDrives - ATAPISWI_Base
      ADRNE       r0, not_supported_error                  ; [ swi not known - so exit ]
      BNE         swi_error_lookup

      ; Allow to fall through 'cause there's only one SWI

;***********************************************************************************************
;
SWI__ATAPI_GetDrives
;
; on entry:
;          r11 =  0
;          r12 -> workspace
;          r13 =  supervisor stack
;          r14 =  return register
; on exit:
;          r0  =  number of drives found by ATAPI driver
;          r10 - r12 corrupted
;
;    This performs the ATAPI_GetDrives SWI
;
;***********************************************************************************************

;---------------------------
; Do the ATAPI_GetDrives SWI
;---------------------------

      MOV         r0, # 0

      TEQ         r12, #0               ; If no workspace then no drives.
      BEQ         %FT10

 [ HAL
      ADR         r11, DriveRecognisedStatus
      MOV         r10, #MAX_NUMBER_OF_ATAPI_DRIVES - 1
01    LDRB        r14, [r11, r10]
      TEQ         r14, #0
      ADDNE       r0, r0, #1
      SUBS        r10, r10, #1
      BPL         %BT01
 |
      LDRB        r14, DriveRecognisedStatus + 0
      TEQ         r14, # TRUE
      ADDEQ       r0, r0, # 1
      LDRB        r14, DriveRecognisedStatus + 1
      TEQ         r14, # TRUE
      ADDEQ       r0, r0, # 1
 ]
10
      MACRO__EXIT_DRIVER_WITH_R0 , noexit
      CMP         pc, pc
      MOVEQ       pc, r14
      BICS        pc, r14, # V_bit


swi_error_lookup ; based on error_handler_lookup, but has to be different because of the
                 ; SWI handler's requirement to preserve NZC flags on a 26-bit OS
;
; on entry:
;          r0  -> error block to be looked up
;          r12 -> workspace
;          r13 -> full descending stack with r0 and r14 stacked
;------------------------------------------------------------------------------

     SUB           r13, r13, #16             ; Local workspace for MessageTrans file block
     Push          "r0"                      ; Save error we need to look up.

     ADD           r0, r13, #4               ; Open Messages file.
     ADRL          r1, message_filename
     MOV           r2, #0
     SWI           XMessageTrans_OpenFile
     ADDVS         r13, r13, #20
     BVS           %FT90

     Pull          "r0"                      ; Get back error to look up.
     MOV           r1, r13
     SWI           XMessageTrans_ErrorLookup

     MOV           r2, r0                    ; Definitely have some sort of error here so save it.
     MOV           r0, r13
     SWI           XMessageTrans_CloseFile
     MOV           r0, r2                    ; Ignore any error from CloseFile.

     ADD           r13, r13, #16             ; Free local workspace.
90
     MACRO__EXIT_DRIVER_WITH_R0 , noexit
     TEQ           pc, pc
     MSREQ         CPSR_f, #Z_bit :OR: V_bit
     MOVEQ         pc, r14
     ORRS          pc, r14, #V_bit

;******************************************************************************
;
Module_SWITable
;
;******************************************************************************

      =           "ATAPI", 0               ; Group name

      =           "GetDrives", 0           ; ATAPI SWI + 0

      =           0                        ; Terminator
      ALIGN

;******************************************************************************

memcmp ROUT
;
; Compare two lumps of memory
;
; Entry:
;    r0 -> string
;    r1 -> string
;    r2 = length > 0
;
; Exit:
;    r0,r1 preserved
;    r2 undefined
;    EQ => strings equal

        Push    "r3,r14"
01
        SUBS    r2,r2,#1
        BMI     %F02
        LDRB    r3,[r0,r2]
        LDRB    r14,[r1,r2]
        TEQS    r3,r14
        BEQ     %B01

; NE => strings don't match

        Pull    "r3,pc"

;;;;;;;;;;;;;;;;;

02

; return EQ => strings match

        TEQS    r0,r0
        Pull    "r3,pc"

;******************************************************************************

 LTORG
 END
