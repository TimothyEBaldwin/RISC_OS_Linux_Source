; This source code in this file is licensed to You by Castle Technology
; Limited ("Castle") and its licensors on contractual terms and conditions
; ("Licence") which entitle you freely to modify and/or to distribute this
; source code subject to Your compliance with the terms of the Licence.
; 
; This source code has been made available to You without any warranties
; whatsoever. Consequently, Your use, modification and distribution of this
; source code is entirely at Your own risk and neither Castle, its licensors
; nor any other person who has contributed to this source code shall be
; liable to You for any loss or damage which You may suffer as a result of
; Your use, modification or distribution of this source code.
; 
; Full details of Your rights and obligations are set out in the Licence.
; You should have received a copy of the Licence with this source code file.
; If You have not received a copy, the text of the Licence is available
; online at www.castle-technology.co.uk/riscosbaselicence.htm
; 
;******************************************************************************
;
; hdr.IDEdefs
;
; Author: Mark Watson (EESOX)
;
; Description
; ===========
; This file contains hash defines for the IDE interface.
; 06-Sept-94  MEW Eesox
;
; Change record
; =============
; 12-Mar-95  11:16  cpartington (Cambridge Systems Design)
; * Added ATAPI__READ_DATA_10, used in s.DriverCode.
;
; 12-Jun-95  11:29  cpartington (Cambridge Systems Design)
; * Added TIMEOUT__COMMAND_COMPLETE and added alternative values for other
;   timeouts dependent on test_long_timeouts.
;
; 16-Jun-95  15:06  cpartington (Cambridge Systems Design)
; * Added new timeout values for faster_startup.
; * Added TIMEOUT__RESET_RECOVERY.
;
; 06-Jul-95  10:57  cpartington (Cambridge Systems Design)
; * Added ATAPICONTROL_CheckForDrive, ATAPI_Signature and IDE__IDENTIFY.
;
;*end of change record*


 [ HAL
MAX_NUMBER_OF_ATAPI_DRIVES        *   4
 |
MAX_NUMBER_OF_ATAPI_DRIVES        *   2
 ]

 [ :LNOT: HAL
IRQ__INTERRUPT_CLEAR              * &03200014
IRQA__INTERRUPT_STATUS            * &03200010
IRQA__INTERRUPT_REQUEST           * &03200014
IRQA__INTERRUPT_MASK              * &03200018
IRQB__INTERRUPT_STATUS            * &03200020
IRQB__INTERRUPT_REQUEST           * &03200024
IRQB__INTERRUPT_MASK              * &03200028


IOC__IDE_INTERRUPT_BIT            * 1:SHL:3
IOMD__IDE_INTERRUPT_BIT           * 1:SHL:1

TASKFILE_BASE_ADDRESS             * &30107C0


; Task file registers when read from
TASKFILE__R_DATA                  * &0000    ; The lower 16 bits are used when reading
TASKFILE__R_ERROR                 * &0004
TASKFILE__R_INTERRUPT_REASON      * &0008
TASKFILE__R_RESERVED              * &000C
TASKFILE__R_BYTE_COUNT_LOW        * &0010
TASKFILE__R_BYTE_COUNT_HIGH       * &0014
TASKFILE__R_DRIVE_SELECT          * &0018
TASKFILE__R_STATUS                * &001C
TASKFILE__R_ALTERNATE_STATUS      * &0818
TASKFILE__R_DRIVE_ADDRESS         * &081C


; Task file registers when written to
TASKFILE__W_DATA                  * &0000    ; The upper 16 bits are used when writing
TASKFILE__W_FEATURES              * &0004
TASKFILE__W_INTERRUPT_REASON      * &0008
TASKFILE__W_RESERVED              * &000C
TASKFILE__W_BYTE_COUNT_LOW        * &0010
TASKFILE__W_BYTE_COUNT_HIGH       * &0014
TASKFILE__W_DRIVE_SELECT          * &0018
TASKFILE__W_COMMAND               * &001C
TASKFILE__W_DIGITAL_OUTPUT        * &0818
TASKFILE__W_UNUSED                * &081C
 ]


; ATAPI feature register
FEATUREBITS__DMA                  * 1:SHL:0
FEATUREBITS__PIO                  * 0

; ATAPI interrupt reason register
IRR__COMMAND                      * 1:SHL:0
IRR__DATA                         * 0
IRR__INPUT                        * 1:SHL:1
IRR__OUTPUT                       * 0


; ATAPI drive select register
DRIVESELECTBITS__DEVICE0          * 0
DRIVESELECTBITS__DEVICE1          * 1:SHL:4
DRIVESELECT__ALWAYS               * (1:SHL:7) + (1:SHL:5)  ; These bits must always be set

; IDE Device Control Register (command)
DCR__nIEN                         * (1:SHL:1)
DCR__SRST                         * (1:SHL:2)
DCR__ALWAYS                       * (1:SHL:3)

; ATAPI status register bits
STATUSFLAGS__CHECK                * 1:SHL:0
STATUSFLAGS__CORR                 * 1:SHL:2
STATUSFLAGS__DRQ                  * 1:SHL:3
STATUSFLAGS__DSC                  * 1:SHL:4
STATUSFLAGS__DRDY                 * 1:SHL:6
STATUSFLAGS__BSY                  * 1:SHL:7


; Error status register bits
ZERRORFLAGS__ILI                   * 1:SHL:0
ZERRORFLAGS__EOM                   * 1:SHL:1
ZERRORFLAGS__ABRT                  * 1:SHL:2
ZERRORFLAGS__MCR                   * 1:SHL:3
ZERRORFLAGS__SENSEKEY_SHIFT        * 4
ZERRORFLAGS__SENSEKEY_MASK         * 2_1111:SHL:ZERRORFLAGS__SENSEKEY_SHIFT

; *********************************************************************************************
; ** IDE command codes                                                                       **
; *********************************************************************************************
IDE__ATAPI_PACKET_COMMAND         * &A0
IDE__ATAPI_IDENTIFY_DEVICE        * &A1
IDE__ATAPI_SOFT_RESET             * &08
 [ full_drive_detection
IDE__IDENTIFY           *       &EC
 ]


 [ full_drive_detection
; Signature provided in cylinder registers
ATAPI_Signature *       &EB14
 ]


; ATAPI commands sent within the IDE packet command
ATAPI__INQUIRY                    * &12
ATAPI__START_STOP_EJECT_UNIT      * &1B
ATAPI__PREVENT_ALLOW              * &1E
ATAPI__READ_DATA_10               * &28
ATAPI__SEEK                       * &2B
ATAPI__READ_SUB_CHANNEL           * &42
ATAPI__READ_TOC                   * &43
ATAPI__READ_HEADER                * &44
ATAPI__PAUSE_RESUME               * &4B
ATAPI__MODE_SELECT                * &55
ATAPI__MODE_SENSE                 * &5A
ATAPI__PLAY_AUDIO_12              * &A5
ATAPI__READ_DATA_12               * &A8
ATAPI__PLAY_TRACK_RELATIVE_12     * &A9
ATAPI__READ_CD_MSF                * &B9
ATAPI__SET_CDROM_SPEED            * &BB
ATAPI__READ_CD                    * &BE

; Internal error messages

TARGETERROR__BASE                 *  0
DRIVERERROR__BASE                 * 16

TARGETERROR__NO_SENSE             *  (0 + TARGETERROR__BASE):SHL:ZERRORFLAGS__SENSEKEY_SHIFT
TARGETERROR__RECOVERED_ERROR      *  (1 + TARGETERROR__BASE):SHL:ZERRORFLAGS__SENSEKEY_SHIFT
TARGETERROR__NOT_READY            *  (2 + TARGETERROR__BASE):SHL:ZERRORFLAGS__SENSEKEY_SHIFT
TARGETERROR__MEDIUM_ERROR         *  (3 + TARGETERROR__BASE):SHL:ZERRORFLAGS__SENSEKEY_SHIFT
TARGETERROR__HARDWARE_ERROR       *  (4 + TARGETERROR__BASE):SHL:ZERRORFLAGS__SENSEKEY_SHIFT
TARGETERROR__ILLEGAL_REQUEST      *  (5 + TARGETERROR__BASE):SHL:ZERRORFLAGS__SENSEKEY_SHIFT
TARGETERROR__UNIT_ATTENTION       *  (6 + TARGETERROR__BASE):SHL:ZERRORFLAGS__SENSEKEY_SHIFT
TARGETERROR__DATA_PROTECT         *  (7 + TARGETERROR__BASE):SHL:ZERRORFLAGS__SENSEKEY_SHIFT
TARGETERROR__ABORTED_COMMAND      * (&B + TARGETERROR__BASE):SHL:ZERRORFLAGS__SENSEKEY_SHIFT
TARGETERROR__MISCOMPARE           * (&E + TARGETERROR__BASE):SHL:ZERRORFLAGS__SENSEKEY_SHIFT
 [ HAL
TARGETERROR__UNKNOWN              * (&10 + TARGETERROR__BASE):SHL:ZERRORFLAGS__SENSEKEY_SHIFT
 ]

DRIVERERROR__UNKNOWN_REASON       * (&2 + DRIVERERROR__BASE):SHL:ZERRORFLAGS__SENSEKEY_SHIFT
DRIVERERROR__INVALID_PARAMETER    * (&4 + DRIVERERROR__BASE):SHL:ZERRORFLAGS__SENSEKEY_SHIFT
DRIVERERROR__SELECTION_TIMEOUT    * (&A + DRIVERERROR__BASE):SHL:ZERRORFLAGS__SENSEKEY_SHIFT
DRIVERERROR__OTHER_TIMEOUT        * (&B + DRIVERERROR__BASE):SHL:ZERRORFLAGS__SENSEKEY_SHIFT
 [ HAL
DRIVERERROR__UK_SCSI_ERROR        * (&C + DRIVERERROR__BASE):SHL:ZERRORFLAGS__SENSEKEY_SHIFT
 ]


 [ long_command_timeout
TIMEOUT__COMMAND_COMPLETE       *       10*100
 ]
 [ test_long_timeouts
TIMEOUT__SELECTION_PHASE        *       16*100
TIMEOUT__OTHER                  *       16*100
 |
  [ faster_startup
TIMEOUT__SELECTION_PHASE        *       5       ; centiseconds
TIMEOUT__OTHER                  *       5       ; centiseconds to wait for DRQ for CDB
  |
TIMEOUT__SELECTION_PHASE        *       5*100
TIMEOUT__OTHER                  *       1*100
  ]
 ]

TIMEOUT__RESET_RECOVERY         *       10*100  ; centiseconds

LARGEST_DATA_CHUNK_PLUS_ONE       * 2800 ; The reason for this small size is Sony (again)
                                         ; - see ReadUserData

; *********************************************************************************************
; ** Reason codes to IDE_Control                                                             **
; *********************************************************************************************
ATAPICONTROL__SEND_COMMAND        *     0
ATAPICONTROL__SOFT_RESET          *     1
 [ full_drive_detection
ATAPICONTROL__CheckForDrive       *     2
 ]
 [ HAL ; could be implemented for non-HAL case, but would be a waste of time
ATAPICONTROL__RAW_OP              *     3
 ]

; *********************************************************************************************
; ** CDFS Driver errors                                                                      **
; *********************************************************************************************

                                ^ &00803400

CDFSDRIVERERROR__UNUSED                        #         1               ;  0
CDFSDRIVERERROR__BAD_ALIGNMENT                 #         1               ;  1
CDFSDRIVERERROR__DRIVE_NOT_SUPPORTED           #         1               ;  2
CDFSDRIVERERROR__BAD_MODE                      #         1               ;  3
CDFSDRIVERERROR__INVALID_PARAMETER             #         1               ;  4
CDFSDRIVERERROR__NOT_AUDIO_TRACK               #         1               ;  5
CDFSDRIVERERROR__NO_CADDY                      #         1               ;  6
CDFSDRIVERERROR__NO_DRIVE                      #         1               ;  7
CDFSDRIVERERROR__INVALID_FORMAT                #         1               ;  8
CDFSDRIVERERROR__BAD_MINUTES                   #         1               ;  9
CDFSDRIVERERROR__BAD_SECONDS                   #         1               ; 10
CDFSDRIVERERROR__BAD_BLOCKS                    #         1               ; 11
CDFSDRIVERERROR__PHYSICAL_BLOCK_ERROR          #         1               ; 12
CDFSDRIVERERROR__DRAWER_LOCKED                 #         1               ; 13
CDFSDRIVERERROR__WRONG_DATA_MODE               #         1               ; 14
CDFSDRIVERERROR__CHANNEL_NOT_SUPPORTED         #         1               ; 15
CDFSDRIVERERROR__BAD_DEVICE_ID                 #         1               ; 16
CDFSDRIVERERROR__BAD_CARD_NUMBER               #         1               ; 17
CDFSDRIVERERROR__BAD_LUN_NUMBER                #         1               ; 18
CDFSDRIVERERROR__NO_SUCH_TRACK                 #         1               ; 19
CDFSDRIVERERROR__FAULTY_DISC                   #         1               ; 20
CDFSDRIVERERROR__NO_SUCH_BLOCK                 #         1               ; 21
CDFSDRIVERERROR__DRIVE_DOES_NOT_SUPPORT_THAT   #         1               ; 22
CDFSDRIVERERROR__DRIVER_NOT_PRESENT            #         1               ; 23
CDFSDRIVERERROR__SWI_NOT_SUPPORTED             #         1               ; 24
CDFSDRIVERERROR__TOO_MANY_DRIVERS              #         1               ; 25
CDFSDRIVERERROR__NOT_REGISTERED                #         1               ; 26

; *********************************************************************************************
; ** Flags for ATAPI_Op                                                                      **
; *********************************************************************************************

nodata                     *      2_00:SHL:24
readdata                   *      2_01:SHL:24
writedata                  *      2_10:SHL:24

ATAPIOP__COMMAND_PACKET    *    0:SHL:26
 [ :LNOT: HAL
ATAPIOP__IDENTIFY_DEVICE   *    1:SHL:26
ATAPIOP__DONT_USE_R7       *    1:SHL:27
ATAPIOP__DONT_RETRY        *    1:SHL:28
 ]

; *********************************************************************************************
; ** ATAPI identify device structure                                                         **
; ** This is a series of 2 byte 'words' in high byte/low byte format                         **
; *********************************************************************************************

ATAPIID__GENERAL_CONFIGURATION  *    (2*  0)
ATAPIID__MODEL_NUMBER           *    (2* 27)
ATAPIID__MAJOR_VERSION          *    (2* 80)
ATAPIID__MINOR_VERSION          *    (2* 81)

ATAPIID__STRUCTURE_SIZE         *    (2*256)

; there are more, but I can't be bothered to type them in 'cause I don't need them

; *********************************************************************************************
; **                                                                                         **
; *********************************************************************************************
; *********************************************************************************************
; **                                                                                         **
; *********************************************************************************************
; *********************************************************************************************
; **                                                                                         **
; *********************************************************************************************
; *********************************************************************************************
; **                                                                                         **
; *********************************************************************************************

 END
