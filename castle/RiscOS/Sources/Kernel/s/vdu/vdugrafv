; This source code in this file is licensed to You by Castle Technology
; Limited ("Castle") and its licensors on contractual terms and conditions
; ("Licence") which entitle you freely to modify and/or to distribute this
; source code subject to Your compliance with the terms of the Licence.
; 
; This source code has been made available to You without any warranties
; whatsoever. Consequently, Your use, modification and distribution of this
; source code is entirely at Your own risk and neither Castle, its licensors
; nor any other person who has contributed to this source code shall be
; liable to You for any loss or damage which You may suffer as a result of
; Your use, modification or distribution of this source code.
; 
; Full details of Your rights and obligations are set out in the Licence.
; You should have received a copy of the Licence with this source code file.
; If You have not received a copy, the text of the Licence is available
; online at www.castle-technology.co.uk/riscosbaselicence.htm
; 
; > $.Source.VduGrafV
;
; ARTHUR OPERATING SYSTEM - Vdu Drivers
; =======================
;
; Vdu driver code - Default GraphicsV claimant
;
; Author K J Bracey
; Date   30.8.02
;

        MACRO
        GVEntry $name
        ASSERT  . - MOSGraphicsV_Table = GraphicsV_$name * 4
        B       GV_$name
        MEND

MOSGraphicsV ROUT
        ; We only care about VSync events, and only for the current driver
        LDR     WsPtr, [WsPtr, #CurrentGraphicsVDriver]
        ADD     WsPtr, WsPtr, #GraphicsV_VSync :SHL: 8
        TEQ     r4, WsPtr, ROR #8
        MOVNE   pc, lr
; Switch to interrupt mode to process this.
        LDR     WsPtr, =ZeroPage+OsbyteVars
        pvMRS   r4, CPSR
        Push    "lr"
        pvMSR   CPSR_c, #I32_bit + IRQ32_mode
        Push    "r4, lr"
        Push    "pc"
        B       VsyncIRQ_ExtEntry
        NOP
        Pull    "r4, lr"
        pvMSR   CPSR_c, r4
        MOV     r4, #0
        Pull    "pc"

CallGraphicsV
        Push    "r10,r12,lr"
        MOV     r10, #GraphicsV
        BL      CallVector
        Pull    "r10,r12,pc"

; Corrupts R9-R11
; returns EQ if acceleration valid
CheckAcceleration
        ASSERT  Log2BPP = Log2BPC +4
        ADD     R9, WsPtr, #Log2BPC
        LDMIA   R9, {R9, R10}                   ; R9 = Log2BPC; R10 = Log2BPP
        LDR     R11, [WsPtr, #VduSprite]
        TEQ     R9, R10                         ; BPC must equal BPP
        TEQEQ   R11, #0                         ; Must not be redirected
        MOV     PC, R14

        END
