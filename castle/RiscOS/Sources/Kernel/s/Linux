; This source code in this file is licensed to You by Castle Technology
; Limited ("Castle") and its licensors on contractual terms and conditions
; ("Licence") which entitle you freely to modify and/or to distribute this
; source code subject to Your compliance with the terms of the Licence.
;
; This source code has been made available to You without any warranties
; whatsoever. Consequently, Your use, modification and distribution of this
; source code is entirely at Your own risk and neither Castle, its licensors
; nor any other person who has contributed to this source code shall be
; liable to You for any loss or damage which You may suffer as a result of
; Your use, modification or distribution of this source code.
;
; Full details of Your rights and obligations are set out in the Licence.
; You should have received a copy of the Licence with this source code file.
; If You have not received a copy, the text of the Licence is available
; online at www.castle-technology.co.uk/riscosbaselicence.htm
;

        IMPORT  doMoveMemory
        IMPORT  do_IMB
        IMPORT  MakeTempFile
        IMPORT  do_AMBControlSWI
        IMPORT  do_CheckMemoryAccess
        IMPORT  do_DynArea_AlterFile

        EXPORT  __rt_udiv
        EXPORT  CheckAppSpace
        EXPORT  VariformInternal
        EXPORT  __PVirt_syscall

        GET     Hdr:CPU.PVSyms

; Unimplemnted paged memory SWIs
ReadMemMapEntries_Code  *       NoSuchSWI
SetMemMapEntries_Code   *       NoSuchSWI
FindMemMapEntries_Code  *       NoSuchSWI
MMUControlSWI           *       NoSuchSWI

; More stubs
RISCOS_AccessPhysicalAddress
        MOV     a1, a2
RISCOS_ReleasePhysicalAddress
RISCOS_MapInIO
RISCOS_InitARM
RISCOS_AddRAM
RISCOS_LogToPhys
LookForHALCacheController
NullOp
        MOV     pc, lr

DAbPreVeneer
        SUB     sp, sp, #4
        Push    "r0-r3, lr"
        MOV     r1, lr
        BL      __PVirt_GetVCPU
        LDR     r2, [r0, #vcpu_spsr_abt]
        LDR     r3, [r0, #vcpu_DFAR]
        LDR     r0, =ZeroPage + Abort32_dumparea
        STMIA   r0, {r1, r2, r3}
        LDR     r1, [r0, #DAbHan - Abort32_dumparea]
        STR     r1, [sp, #5 * 4]
        Pull    "r0-r3, lr"
        Pull    "pc"


        IMPORT  Init_MapInRAM2
Init_MapIn
        MOV     a1, a2
        MOV     a2, a3
        MOV     a3, a4
Init_MapInRAM
Init_MapInRAM_DMA
        LDR     pc, =Init_MapInRAM2


SyncCodeAreasSWI
        Push    "lr"
        BL      SyncCodeAreas
        Pull    "lr"                    ; no error return possible
        B       SLVK

SyncCodeAreas
        TST     r0, #1                  ; range variant of SWI?
        BEQ     SyncCodeAreasFull

SyncCodeAreasRange
        Push    "a1-a4, ip, lr"
        ADD     a3, a3, #4
        MOV     lr, pc
        LDR     pc, =do_IMB
        Pull    "a1-a4, ip, pc"

do_IMB_Range
        Push    "a1-a4, ip, lr"
        MOV     lr, pc
        LDR     pc, =do_IMB
        Pull    "a1-a4, ip, pc"

SyncCodeAreasFull
do_IMB_Full
        Push    "a1-a4, ip, lr"
        MOV     a2, #0
        MOV     a3, #0xFFFFFFFC
        MOV     lr, pc
        LDR     pc, =do_IMB
        Pull    "a1-a4, ip, pc"

UND_Op
        DebugTX "Bad ARMOp"
        UND

ARM_Analyse
        LDR     a2, =__HAL_hwcap
        LDR     a2, [a2]

        LDR     a1, =CPUFlag_SynchroniseCodeAreas | CPUFlag_BaseRestored | CPUFlag_SplitCache | CPUFlag_32bitOS | CPUFlag_NoDCacheDisable |CPUFlag_NoWBDrain | CPUFlag_HiProcVecs | CPUFlag_ExtraReasonCodesFixed
        ; FIXME Cache?

        TST     a2, #ix_HWCAP_26BIT
        ORR     a1, a1, #CPUFlag_No26bitMode ; FIXME Support 26 bit?

        TST     a2, #ix_HWCAP_THUMB
        ORRNE   a1, a1, #CPUFlag_Thumb

        TST     a2, #ix_HWCAP_EDSP
        ORRNE   a1, a1, #CPUFlag_DSP

        TST     a2, #ix_HWCAP_SWP
        ORREQ   a1, a1, #CPUFlag_NoSWP

        ; Check store of PC
30      STR     pc, [sp, #-4]!
        ADR     a3, %BT30 + 8
        LDR     a4, [sp], #4
        TEQ     a4, a3
        ORREQ   a1, a1, #CPUFlag_StorePCplus8

        ; THe HAL will skip the next instruction if in an undefined instruction is encounterwe.

        UMULL   a3, a4, a1, a2
        ORR     a1, a1, #CPUFlag_LongMul

        LDREX   a3, [sp]
        ORR     a1, a1, #CPUFlag_LoadStoreEx

        LDREXB  a3, [sp]
        ORR     a1, a1, #CPUFlag_LoadStoreClearExSizes

        LDR     a2, =ZeroPage
        STR     a1, [a2, #ProcessorFlags]

        ADR     a1, NullOp
        STR     a1, [a2, #Proc_Cache_CleanAll]
        STR     a1, [a2, #Proc_Cache_CleanInvalidateAll]
        STR     a1, [a2, #Proc_Cache_InvalidateAll]
        STR     a1, [a2, #Proc_Cache_RangeThreshold]
        STR     a1, [a2, #Proc_TLB_InvalidateAll]
        STR     a1, [a2, #Proc_TLB_InvalidateEntry]
        STR     a1, [a2, #Proc_DSB_Write]

        ADR     a1, UND_Op
        STR     a1, [a2, #MMU_PCBTrans]
        STR     a1, [a2, #Proc_MMU_ChangingEntries]
        STR     a1, [a2, #Proc_MMU_ChangingEntry]
        STR     a1, [a2, #Proc_MMU_ChangingUncachedEntries]
        STR     a1, [a2, #Proc_MMU_ChangingUncachedEntry]
        STR     a1, [a2, #Proc_MMU_ChangingUncached]
        STR     a1, [a2, #Proc_MMU_Changing]

        ADR     a1, do_IMB_Range
        STR     a1, [a2, #Proc_IMB_Range]

        ADR     a1, do_IMB_Full
        STR     a1, [a2, #Proc_IMB_Full]

        MOV     a1, #0x1000
        STR     a1, [a2, #Page_Size]

        MOV     a1, #0x40000000
        STR     a1, [a2, #RAMLIMIT]

        MOV     a1, #0x1000000
        STR     a1, [a2, #VideoSizeFlags]

        MOV     ip, lr
        ADD     a3, a2, #ProcVec_UndInst
        BL      __PVirt_GetVCPU
        STR     a3, [a1, #vcpu_vectors]
        MOV     pc, ip



ARM_PrintProcessorType
AMBControl_Init
        MOV     pc, lr

DynArea_PMP_PhysOp
        DebugTX "DynArea_PMP_PhysOp"
        UND
DynArea_PMP_LogOp
        DebugTX "DynArea_PMP_LogOp"
        UND
DynArea_PMP_Resize
        DebugTX "DynArea_PMP_Resize"
        UND
DynArea_PMP_GetPages
        DebugTX "DynArea_PMP_GetPages"
        UND

DynArea_AlterFile
        Push    "r2, r6-r8, lr"
        BL      QCheckAreaNumber        ; check area exists
        BCC     UnknownDyn              ; [it doesn't]
        MOV     r3, r10
        MOV     lr, pc
        LDR     pc, =do_DynArea_AlterFile
        Pull    "r2, r6-r8, pc"

PageShifts
        =       12, 13, 0, 14           ; 1 2 3 4
        =       0,  0,  0, 15           ; 5 6 7 8

        GBLL    DebugAborts
DebugAborts SETL {FALSE}

AMBControlSWI
        Push    "r4, ip, lr"
        MOV     lr, pc
        LDR     pc, =do_AMBControlSWI
        Pull    "r4, ip, lr"
        BIC     lr, lr, #V_bit
        B       SLVK

CheckMemoryAccess
        Push    "r0, r2, r3, r12"
        MOV     lr, pc
        LDR     pc, =do_CheckMemoryAccess
        MOV     r1, r0
        Pull    "r0, r2, r3, r12, lr"
        B       SLVK


        END
