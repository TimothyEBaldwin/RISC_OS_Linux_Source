/* This source code in this file is licensed to You by Castle Technology
 * Limited ("Castle") and its licensors on contractual terms and conditions
 * ("Licence") which entitle you freely to modify and/or to distribute this
 * source code subject to Your compliance with the terms of the Licence.
 *
 * This source code has been made available to You without any warranties
 * whatsoever. Consequently, Your use, modification and distribution of this
 * source code is entirely at Your own risk and neither Castle, its licensors
 * nor any other person who has contributed to this source code shall be
 * liable to You for any loss or damage which You may suffer as a result of
 * Your use, modification or distribution of this source code.
 *
 * Full details of Your rights and obligations are set out in the Licence.
 * You should have received a copy of the Licence with this source code file.
 * If You have not received a copy, the text of the Licence is available
 * online at www.castle-technology.co.uk/riscosbaselicence.htm
 */
/************************************************************************/
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <time.h>
#include <stdarg.h>

/* CLX */
#include "host.h"
#include "prgname.h"
#include "err.h"

/* Local */

#include "srcbuild.h"
#include "build.h"
#include "parse.h"
#include "riscos.h"


/* local variables */
static char *base_address = NULL;

/*
 * globals
 */
char progname[32]; /* Magic number required by CLX library */
char *build_name = NULL;
char *build_dir = NULL;
char *image_filename = NULL;
char *log_filename = NULL;
char *messages_filename = NULL;
char *joiner = NULL;
char *joiner_format = NULL;
char *image_size = NULL;
podule_info_t podule_info =
{NULL, NULL, NULL, NULL, NULL, NULL, NULL};
char *sigstr = NULL;
char *signum = NULL;
char *module_type_names[] =
{ALL_MODULE_TYPES(ARRAY_ENTRY)};
char *image_type_names[] = {
  "rom", "exprom", "extrom", "other"
};
int verbose = FALSE;
static int strict = FALSE;

#define MAX_JOIN_ENTRIES 256
HashTable join_db;
HashId join_entries[256];
int join_db_hwm = 0;

image_type_t image_type = image_type_unset;


/* Create an array in which territories defined in the Env file can be stored.
 * Extra entry allows to BBE builds to add UK to the resource list.
 */
char* supported_territories[MAX_TERRITORIES + 1] = { NULL };
unsigned int num_of_territories = 0;

/* Create some linked lists... */
module_entry_t *module_database = NULL;
component_entry_t *component_database = NULL;            /* Pointer to list head */
static component_entry_t *component_database_end = NULL; /* Pointer to list tail */
static error_entry_t *error_database = NULL;

static const action_t action_tbl[] =
{
  { build_clean, "clean", "clean the build" },
  { build_clean_all, "clean_all", "full clean for major libraries" },
  { build_export_hdrs, "export_hdrs", "export headers" },
  { build_export_libs, "export_libs", "export libraries" },
  { build_resources, "resources", "export resources" },
  { build_bbe, "bbe", "export binary build structure" },
  { build_rom, "rom", "make modules for rom" },
  { build_install_rom, "install_rom", "install components" },
  { build_install, "install", "create RAM versions of the components" },
  { build_join, "join", "join modules to construct rom" },
  { build_list, "list", "list all modules to appear in rom" },
  { build_release_autobuild, "release_autobuild", "release the results of this build to the autobuild system" },
  { 0, 0, 0 }
};

static void show_phases_csv(void)
{
  const action_t *action;

  for (action = &action_tbl[0]; action->call; action++)
    sb_printf("%s,%s\n", action->name, action->help);
}

/*
 * Set the system variables as appropriate on program finalisation.
 */
static void set_sys_vars(int success)
{
#ifdef RISCOS
  char buffer[BUFFER_LEN];
  sb_buildfilename(BUFFER_LEN, buffer, build_dir, BUILDSYS_DIR, LOGS_DIR, log_filename, NULL);
  sb_setenv(ENV_LOGFILE_LOCATION, buffer);
  sb_buildfilename(BUFFER_LEN, buffer, build_dir, IMAGES_DIR, image_filename, NULL);
  sb_setenv(ENV_IMAGE_LOCATION, buffer);
  sprintf(buffer, "%d", success);
  sb_setenv(ENV_RETURN_CODE, buffer);
#else
  /* Pointless - environment variables are not visible to parent processes */
  (void) success;
#endif
}



/*
 * send error message to stderr
 */
void
error(int fatal, char *format,...)
{
  va_list list;
  char buffer[BUFFER_LEN];
  error_entry_t *entry, *this;

  va_start(list, format);
  vsprintf(buffer, format, list);
  va_end(list);

  if ((this = malloc(sizeof(error_entry_t))) == NULL)
    error(1, "%s: memory allocation error.", progname);

  this->message = sb_strdup(buffer);
  this->next = NULL;
  sb_printf("Error %s\n", this->message);

  if (error_database == NULL)
    error_database = this;
  else {
    entry = error_database;
    while (entry->next)
      entry = entry->next;
    entry->next = this;
  }

  if (fatal || strict) {
    sb_system_sync();
    sb_fprintf(stderr, "Fatal error ");
    strcat(buffer, "\n");
    sb_fprintf(stderr, buffer);
    exit(EXIT_FAILURE);
  }

}

/*
 * look an entry by name and return its structure
 */
module_entry_t *
lookup_module(char *name)
{
  module_entry_t *entry = module_database;

  while (entry) {
    if (strcmp(entry->name, name) == 0)
      return (entry);
    entry = entry->next;
  }


  return (NULL);
}

/*
 * look an component entry by name and return its structure
 */
component_entry_t *
lookup_component(char *name)
{
  component_entry_t *entry = component_database;

  while (entry) {
    if (strcmp(entry->name, name) == 0)
      return (entry);
    entry = entry->next;
  }

  return (NULL);
}

///*
// * look an component entry by name and return its structure
// * - this checks the components list from tail to head
// */
//component_entry_t *
//reverse_lookup_component(char *name)
//{
//  component_entry_t *entry = component_database_end;
//
//  while (entry) {
//    if (strcmp(entry->name, name) == 0)
//      return (entry);
//    entry = entry->prev;
//  }
//
//  return (NULL);
//}

static void srcbuild_rewrite_path_in_host_syntax(char **path)
{
  const char dir_sep = host_dir_sep_char();
  char *newpath;
  char *rpath = *path;
  size_t length = strlen(rpath);
  size_t i, j;

  /* On RISC OS, the directory separator will be correct - otherwise we have to fix it */
  if (dir_sep == '.') return;

  if (strchr(rpath, '^')) {
    /* Oh dear - parent directory specifiers - need to reallocate the memory */
    newpath = malloc(2*length);
    if (!newpath)
      error(1, "Unable to allocate memory for component path");
  }
  else {
    newpath = rpath;
  }

  for (i = j = 0; i <= length; ++i, ++j) {
    newpath[j] = rpath[i];
    if (newpath[j] == '.') {
      newpath[j] = dir_sep;
    }
    else if (newpath[j] == '^') {
      newpath[j++] = '.';
      newpath[j] = '.';
    }
  }

  if (newpath != rpath) {
    free(rpath);
    *path = realloc(newpath, 1 + strlen(newpath));
  }
}

/*
 * read the database into a linked list of records.
 */
static int
read_module_database(void)
{
  FILE *file = NULL;
  char buffer[BUFFER_LEN];
  char *cp, *word = NULL;
  module_entry_t *entry, *this;
  int i, line_number = 0;

  /*
   * work out filename
   */
  sb_buildfilename(BUFFER_LEN, buffer, build_dir, BUILDSYS_DIR, MODULE_DB_FILE, NULL);
  if ((file = fopen(buffer, "r")) == NULL)
    error(1, "cannot open module database file %s.", buffer);

  if (verbose)
    sb_printf("Using module database '%s'.\n", buffer);

  while (!feof(file)) {
    fgets(buffer, sizeof(buffer), file);
    if (!feof(file)) {
      line_number++;
      chop_newline(buffer);
      if (buffer[0] != '#') {   /* ignore comments */
        cp = buffer;
        cp = extract_word(cp, &word, FALSE);    /* extract the name */
        if (word != NULL) {     /* ignore null lines */
          if (lookup_module(word) != NULL) {
            error(1, "duplicate '%s' entry in module database line %d.",
                  word, line_number);
          }
          /* allocate a new entry */
          if ((this = malloc(sizeof(module_entry_t))) == NULL)
            error(1, "memory allocation error.");

          this->name = word;
          word = NULL;
          this->path = NULL;
          this->output = NULL;
          this->filename = NULL;
          this->switch_on = NULL;
          this->type = UNDEF;
          this->next = module_database;
          module_database = this;
          entry = this;

          cp = extract_word(cp, &word, FALSE);
          for (i = 0; i < sizeof(module_type_names) / sizeof(char *); i++) {
            if (cstrcmp(word, module_type_names[i]) == 0) {
              entry->type = (module_type_t) i;
              free(word);
              word = NULL;
              break;
            }
          }
          if (word != NULL) {   /* module type not found */
            error(1, "unknown module type '%s' in module database line %d.",
                  word, line_number);
          }
          cp = extract_word(cp, &(entry->path), FALSE);
          cp = extract_word(cp, &(entry->output), FALSE);
          cp = extract_word(cp, &(entry->filename), FALSE);
          cp = extract_word(cp, &(entry->switch_on), TRUE);

          srcbuild_rewrite_path_in_host_syntax(&(entry->path));
        }
      }
    }
  }

  if (file)
    fclose(file);
  if (word)
    free(word);

  return (0);
}

/*
 * read the shadow components file
 */
static int
read_shadow_component_database(char *filename)
{
  FILE *file;
  char buffer[BUFFER_LEN];
  char *cp;
  char *name = NULL;
  char *options = NULL;
  char *switch_on = NULL;
  char *word = NULL;
  int options_same;
  int switch_same;
  component_entry_t *component;
  module_entry_t *module;

  /*
   * work out shadow components filename
   */
  sb_buildfilename(BUFFER_LEN, buffer, build_dir, BUILDSYS_DIR, SHADOW_DIR, filename, NULL);
  if ((file = fopen(buffer, "r")) == NULL)
    return (0);

  if (verbose)
    sb_printf("Using shadow components file '%s'.\n", buffer);

  while (!feof(file)) {
    fgets(buffer, sizeof(buffer), file);
    if (!feof(file)) {
      name = options = switch_on = NULL;

      chop_newline(buffer);
      cp = buffer;
      cp = extract_word(cp, &name, FALSE);      /* extract the name */

      if ((component = lookup_component(name)) != NULL) {

        while (cp) {            /* while there is still text on line */
          /* get the options word */
          cp = extract_word(cp, &word, FALSE);
          if (cstrcmp(word, "-options") == 0) {
            options = sb_strdup(cp);    /* rest of line */
          } else if (cstrcmp(word, "-switch") == 0) {
            cp = extract_word(cp, &switch_on, TRUE);
          }
        }

        options_same = FALSE;
        switch_same = FALSE;
        /* do we have any options */
        if (!component->options && !options)
          options_same = TRUE;

        /* check out options first */
        if (component->options)
          if (cstrcmp(component->options, options) == 0)
            options_same = TRUE;

        /* now check out switches */
        if (component->switch_on) {
          if (cstrcmp(component->switch_on, switch_on) == 0)
            switch_same = TRUE;
        } else {
          if ((module = lookup_module(name)) != NULL) {
            if (module->switch_on) {
              if (cstrcmp(component->switch_on, switch_on) == 0)
                switch_same = TRUE;
            } else {
              if (!switch_on)
                switch_same = TRUE;
            }
          }
        }
        /* mark the module for not needing clean */
        if (!component->always_clean && switch_same && options_same)
          component->force_clean = FALSE;

        /* If there were options, and now there are none, we must clean */
        if (!component->options && options)
          component->force_clean = TRUE;
      }
    }
  }
  fclose(file);

  if (name)
    free(name);
  if (options)
    free(options);
  if (switch_on)
    free(switch_on);
  if (word)
    free(word);

  return (0);
}


static image_type_t srcbuild_parse_format(const char *f)
{
  int i;

  for (i=0; (i+1)<(sizeof(image_type_names)/sizeof(*image_type_names)); ++i) {
    if (cstrcmp(f, image_type_names[i]) == 0) break;
  }

  return (image_type_t) i;
}

static void srcbuild_add_option(char *option, char *value)
{
  if (!hash_enter(join_db, option, &join_entries[join_db_hwm])) {
    free(hash_value(join_db, join_entries[join_db_hwm]));
  }
  hash_assoc(join_db, join_entries[join_db_hwm], value);
  if (++join_db_hwm == MAX_JOIN_ENTRIES) {
    error(1, "Too many joiner options in components file");
  }
}

/*
 * read the components file into a linked list of records.
 */
int
read_component_database(char *filename)
{
  FILE *file;
  char buffer[BUFFER_LEN];
  char *cp, *word = NULL, *dependancy = NULL;
  component_entry_t *entry, *this, *prev = NULL;
  int i, dup, line_number = 0, component_count = 0;

  /*
   * work out components filename
   */
  sb_buildfilename(BUFFER_LEN, buffer, build_dir, BUILDSYS_DIR, COMPONENTS_DIR, filename, NULL);
  if ((file = fopen(buffer, "r")) == NULL)
    error(1, "cannot open component database file '%s'.", buffer);

  if (verbose)
    sb_printf("Using components file '%s'.\n", buffer);

  if (1) {
    while (fgets(buffer, sizeof(buffer), file)) {
      line_number++;
      chop_newline(buffer);
      if (buffer[0] != '#') {   /* ignore comments */
        dependancy = NULL;

        cp = extract_word(buffer, &word, FALSE);      /* extract the name */

        if (word != NULL) {     /* ignore null lines */
          if (cstrcmp(word, "%log") == 0) {     /* deal with log file */
            cp = extract_word(cp, &log_filename, TRUE);
          } else if (cstrcmp(word, "%image") == 0) {
            /* deal with image file */
            cp = extract_word(cp, &image_filename, TRUE);
          } else if (cstrcmp(word, "%messages") == 0) {
            /* deal with messages */
            cp = extract_word(cp, &messages_filename, FALSE);
            if (messages_filename) {
              srcbuild_rewrite_path_in_host_syntax(&messages_filename);
            }
          } else if (cstrcmp(word, "%joiner") == 0) {
            /* deal with BigSplit et al */
            cp = extract_word(cp, &joiner, FALSE);
          } else if (cstrcmp(word, "%joinerformat") == 0) {
            /* deal with format */
            cp = extract_word(cp, &joiner_format, FALSE);
          } else if (cstrcmp(word, "%include") == 0) {
            /* deal with includes */
            cp = extract_word(cp, &word, FALSE);
            if (cstrcmp(word, filename) == 0)
              error(1, "cannot recursively include '%s'.", filename);
            if (read_component_database(word))  /* recurse */
              goto exit_gracefully;
          } else if (cstrcmp(word, "%format") == 0) {
            cp = extract_word(cp, &word, FALSE);
            image_type = srcbuild_parse_format(word);
          } else if (*word == '%') {
            /* Pass this option to romlinker */
            char *data = NULL, *full = sb_strdup(cp);
            cp = extract_word(cp, &data, FALSE);
            srcbuild_add_option(word + 1, data?data:"");
            if (cstrcmp(word, "%poduleproduct") == 0) {
              podule_info.product = data;
            } else if (cstrcmp(word, "%poduledescription") == 0) {
              podule_info.descript = full;
              full = NULL;
            } else if (cstrcmp(word, "%poduleserial") == 0) {
              podule_info.serial = data;
            } else if (cstrcmp(word, "%podulestatus") == 0) {
              podule_info.status = data;
            } else if (cstrcmp(word, "%podulemanufacture") == 0) {
              podule_info.manuf = data;
            } else if (cstrcmp(word, "%podulepart") == 0) {
              podule_info.part = data;
            } else if (cstrcmp(word, "%poduledate") == 0) {
              podule_info.date = data;
            } else if (cstrcmp(word, "%sigstr") == 0) {
              /* deal with the signature word+1 eg NCOS */
              sigstr = data;
              if (signum && sigstr) {
                error(0, "dual signature declaration, using sigstr.");
              }
            } else if (cstrcmp(word, "%signum") == 0) {
              signum = data;
              if (signum && sigstr) {
                error(0, "dual signature declaration, using sigstr.");
              }
            } else if (cstrcmp(word, "%baseaddress") == 0) {
              base_address = data;
              rom_base_address = strtoul(base_address, NULL, 0);
              if (rom_base_address == 0) {
                rom_base_address = 0x03800000;
              }
            }
            else {
              /* Don't free data - we've got a hash table pointer to it */
            }
            free(full);
          } else {
            if ((dependancy = strchr(word, ':')) != NULL) {
              *dependancy = 0;
              dependancy++;
              if (lookup_component(dependancy) == NULL) {
                error(1, "attempt to depend '%s' on a non existent component "
                      "'%s' (line %d).", word, dependancy, line_number);
              }
            }
            if (word[0] == '-') {       /* module to remove */
              component_entry_t *last = NULL;
              if ((entry = lookup_component(word + 1)) == NULL) {
                error(1, "attempt to remove non existent component '%s' "
                      "(line %d).", word + 1, line_number);
              }
              entry = component_database;
              last = NULL;
              while (strcmp(entry->name, word + 1) != 0) {
                last = entry;
                entry = entry->next;
              }

              if (last == NULL)
                component_database = entry->next;
              else
                last->next = entry->next;

              if (entry->next == NULL) prev = entry->prev;

              release_component(entry);

            } else {
              if (lookup_module(word) == NULL) {
                error(1, "'%s' entry (line %d) not found in module database.",
                      word, line_number);
              }

              /* look to see if entry exists already */
              dup = 0;
              if ((entry = lookup_component(word)) != NULL) {
                if (image_type == image_type_other) {
                  /* Perhaps we don't want to warn about this */
                }
                else {
                  /* This warning is no longer much use, commented-out
                   error(0, "srcbuild: Duplicate component detected: %s", entry->name);
                   */
                  dup = 1;
                }
              }

              /* allocate a new entry */
              if ((this = malloc(sizeof(component_entry_t))) == NULL)
                error(1, "memory allocation error.");

              this->name = word;
              this->options = NULL;
              this->switch_on = NULL;
              this->install = NULL;
              this->next = NULL;
              this->type = UNDEF;
              this->prev = prev;
              this->next = NULL;
              this->duplicate = dup;
              this->always_clean = FALSE;             /* default state */
              this->force_clean = FALSE;              /* default state */
              this->no_component_sources = false;     /* default state */
              this->install_after_rom    = false;     /* default state */
              this->created_bbe_makefile = false;     /* default state */
              this->force_position = 0;
              /* Set the Resources directory inside Messages to use for this component */
              this->resource_sfx         = (component_count++ / 64) + 1;

              /* This feature isn't used in any components file I can find... ho hum */
              if (dependancy) {                       /* we have some dependancy */
                component_entry_t *follow, *tmp = lookup_component(dependancy);
                /* The new component gets inserted into the list just
                 * after the first instance of the component upon which
                 * it is dependent.
                 */
                follow     = tmp->next;
                this->next = follow;
                tmp->next  = this;
                this->prev = tmp;
                if (follow == NULL) {
                  prev = this;
                } else {
                  follow->prev = this;
                }
              } else {
                if (component_database == NULL) {
                  component_database = this;
                } else {
                  prev->next = this;
                }
                prev = this;
              }
              entry = this;
              word  = NULL;

              while (cp) {      /* while there is still text on line */
                /* get the options word */
                cp = extract_word(cp, &word, FALSE);
                if ((cstrcmp(word, "-options") == 0) && (cp)) {
                  entry->options = sb_strdup(cp);       /* rest of line */
                  entry->force_clean = TRUE;
                } else if (cstrcmp(word, "-switch") == 0) {
                  cp = extract_word(cp, &(entry->install), TRUE);
                  entry->force_clean = TRUE;
                } else if (cstrcmp(word, "-clean") == 0) {
                  entry->always_clean = TRUE;
                } else if (cstrcmp(word, "-nosources") == 0) {
                  entry->no_component_sources = true;
                } else if (cstrcmp(word, "-install_after_rom") == 0) {
                  entry->install_after_rom = true;
                } else if (cstrcmp(word, "-nosources") == 0) {
                  entry->no_component_sources = true;
                } else if (cstrcmp(word, "-install") == 0) {
                  cp = extract_word(cp, &(entry->install), TRUE);
                  if (entry->install) {
                    srcbuild_rewrite_path_in_host_syntax(&(entry->install));
                  }
                } else if (cstrcmp(word, "-type") == 0) {
                  cp = extract_word(cp, &word, FALSE);
                  for (i = 0; i < sizeof(module_type_names) / sizeof(char *); i++) {
                    if (cstrcmp(word, module_type_names[i]) == 0) {
                      entry->type = (module_type_t) i;
                      free(word);
                      word = NULL;
                      break;
                    }
                  }
                  if (word != NULL) {   /* module type not found */
                    error(1, "unknown module type '%s' in module database "
                          "line %d.", word, line_number);
                  }
                } else if (cstrcmp(word, "-address") == 0) {
                  cp = extract_word(cp, &word, FALSE);
                  entry->force_position = (unsigned) strtoul(word, NULL, 16);
                  if (entry->force_position)
                    entry->type = DATA;
                } else if (cstrcmp(word, "-at") == 0) {
                  cp = extract_word(cp, &word, FALSE);
                  entry->force_position = (unsigned) strtoul(word, NULL, 16);
                }
              }
            }
          }
        } /* if (word != NULL) */
      } /* if (buffer[0] != '#') */
    } /* while */
    component_database_end = prev;
  } /* if (1) */

exit_gracefully:
  if (file)
    fclose(file);
  if (word)
    free(word);

  return (0);
}

/*
 * make sure the force_clean flag hasn't been cleared for any
 * component which had -clean specified in the components file
 */
static void
update_force_clean_states(void)
{
  component_entry_t *entry = component_database;

  while (entry)
  {
    if (entry->always_clean) entry->force_clean = TRUE;
    entry = entry->next;
  }
}

/*
 * free up any mallocs
 */
static void
release_module_database(void)
{
  module_entry_t *entry, *this;

  entry = module_database;
  while (entry) {
    if (entry->name)
      free(entry->name);
    if (entry->path)
      free(entry->path);
    if (entry->output)
      free(entry->output);
    if (entry->filename)
      free(entry->filename);
    if (entry->switch_on)
      free(entry->switch_on);
    this = entry;
    entry = entry->next;
    free(this);
  }
}

void
release_component(component_entry_t * entry)
{
  if (entry->name)
    free(entry->name);
  if (entry->options)
    free(entry->options);
  if (entry->switch_on)
    free(entry->switch_on);
  if (entry->install)
    free(entry->install);
}

static void
release_component_database(void)
{
  component_entry_t *entry, *this;

  entry = component_database;
  while (entry) {
    release_component(entry);
    this = entry;
    entry = entry->next;
    free(this);
  }
}

static void
release_error_database(void)
{
  error_entry_t *entry, *this;

  entry = error_database;
  while (entry) {
    if (entry->message)
      free(entry->message);
    this = entry;
    entry = entry->next;
    free(this);
  }
}

/*
 * print a banner of characters
 */
void
banner(char c)
{
  char buffer[BUFFER_LEN];
  memset(buffer, c, BUFFER_LEN);
  buffer[78] = 0;
  sb_printf("%s\n", buffer);
}

/*
 * display usage info
 */
static void
usage(void)
{
  const action_t *action;

  sb_printf("Pace '%s' version " APP_VERSION "\n\n", progname);

  sb_printf("Usage: %s [options] <action>\n", progname);
  sb_printf("Options:\n");
  sb_printf("   -h, -help    : display this message\n");
  sb_printf("   -v, -verbose : display more progress info\n");
  sb_printf("   -s, -strict  : abort on non-fatal errors\n");
  sb_printf("   -p, -phases  : show phases supported by this build\n");
  sb_printf("Actions:\n");

  for (action = &action_tbl[0]; action->call; action++)
    sb_printf("   %-12s : %s\n", action->name, action->help);
}

/*
 * tidy up before quiting
 */
static void
doexit(void)
{
  error_entry_t *entry;
  int error = 0;

  release_module_database();
  release_component_database();

  entry = error_database;
  while (entry) {
    if (error == 0)
      sb_printf("Batched errors...\n");
    error++;
    sb_printf("Error %s\n", entry->message);
    entry = entry->next;
  }

  if (error)
  {
    banner('-');
    set_sys_vars(0); /* Inform other programs that the build failed */
  }
  else
  {
    set_sys_vars(1); /* Inform other programs that the build was successful */
  }

  spool_close(log_filename);

  release_error_database();
  if (build_name)
    free(build_name);
  if (build_dir)
    free(build_dir);
  if (image_filename)
    free(image_filename);
  if (log_filename)
    free(log_filename);
  if (image_size)
    free(image_size);
  if (sigstr)
    free(sigstr);
  if (signum)
    free(signum);
  if (messages_filename)
    free(messages_filename);
  if (joiner)
    free(joiner);
  if (joiner_format)
    free(joiner_format);
  if (base_address)
    free(base_address);

  if (podule_info.product)
    free(podule_info.product);
  if (podule_info.descript)
    free(podule_info.descript);
  if (podule_info.serial)
    free(podule_info.serial);
  if (podule_info.status)
    free(podule_info.status);
  if (podule_info.manuf)
    free(podule_info.manuf);
  if (podule_info.part)
    free(podule_info.part);
  if (podule_info.date)
    free(podule_info.date);
}




int main(int argc, char *argv[])
{
  const action_t *action;
  time_t now;
  int i, found, first;
  char* locale_list = NULL;
  int loop = 0;
  char* sys_var = NULL;

  /* Core CLX library initialisation is done immediately to ensure that all
   * the host-specific values are set correctly.
   */
  err_init(program_name(argv[0], progname, sizeof(progname)));
  host_init();
  sb_init();
  join_db = hash_new(MAX_JOIN_ENTRIES);
  for (i=0; i<sizeof(join_entries)/sizeof(*join_entries); ++i) {
    join_entries[i] = NULL;
  }

  atexit(doexit);

  /*
   * sort out flags etc
   */
  for (i = 1; i < argc; i++) {
    if (argv[i][0] != '-')
      break;
    if ((cstrcmp(argv[i], "-h") == 0) || (cstrcmp(argv[i], "-help") == 0)) {
      usage();
      exit(EXIT_FAILURE);
    } else if ((cstrcmp(argv[i], "-v") == 0) || (cstrcmp(argv[i], "-verbose") == 0))
      verbose = TRUE;
    else if ((cstrcmp(argv[i], "-s") == 0) || (cstrcmp(argv[i], "-strict") == 0))
      strict = TRUE;
    else if ((cstrcmp(argv[i], "-p") == 0) || (cstrcmp(argv[i], "-phases") == 0)) {
      show_phases_csv();
      exit(EXIT_SUCCESS);
    }
  }

  /*
   * check for action
   */
  if (argc < 2 || i >= argc) {
    usage();
    exit(EXIT_FAILURE);
  }
  first = i;                    /* record first non flag argument */

  /* If we don't have a list, but do have a single locale, set the locale list to be the single locale */
  if (!sb_getenv(ENV_LOCALE_LIST) && sb_getenv(ENV_LOCALE)) {
    sb_setenv(ENV_LOCALE_LIST, sb_getenv(ENV_LOCALE));
  }

  /* We need to see if a locale_list has been defined. If it has, we need to split it into a list of locales. */
  if ((locale_list = sb_strdup(sb_getenv(ENV_LOCALE_LIST))) != NULL)
  {
    if (!parse_territories(locale_list))
    {
      /* An error occured whilst parsing the locale list. */
      error (0, "Malformed Locale list detected.");
    }
    free (locale_list);
    locale_list = NULL; /* locale_list is no longer needed */
  }

  /* Create a system variable based on the country codes. */
  /* Allocate 2 bytes per territory plus one forthe terminator */
  if ((sys_var = malloc((MAX_TERRITORIES)*2+1)) == NULL)
  {
    error (1, "Could not allocate memory for temporary list.");
  }
  *sys_var = '\0';
  for (loop=0; loop < num_of_territories; loop++)
  {
    int num = 0;
    char *varname;
    char tempstr[5];
    num = sb_return_country_number(supported_territories[loop]);
    sb_printf("Country %s has a code of %d\n", supported_territories[loop], num);
    if (num < 0)
    {
      error (1, "Country %s is not a recognised territory.", supported_territories[loop]);
    }
    if (num > 99)
    {
      error (1, "Country %s has a territory number which is too high (%d > 99)", num);
    }
    sprintf(tempstr, "%02d", num);
    strcat(sys_var, tempstr);
    sprintf(tempstr, "%d", num);
    varname = malloc(strlen(supported_territories[loop]) + sizeof(TERR_NUM_PFX));
    if (varname)
    {
      sprintf(varname, "%s%s", TERR_NUM_PFX, supported_territories[loop]);
      sb_setenv(varname, tempstr);
      sprintf(varname, "%s%s", TERR_NAME_PFX, tempstr);
      sb_setenv(varname, supported_territories[loop]);
      free(varname);
    }
  }
  sb_setenv(ENV_NUM_LOCALE, sys_var);
  sb_printf("Numeric territory string is %s\n", sys_var);
  free (sys_var);
  sys_var=NULL;

  /*
   * we need to know Build$Dir and Build environment variables
   */
  if ((build_dir = sb_strdup(sb_getenv(ENV_BUILD_DIR))) == NULL)
    error(1, "cannot locate build directory, please run a !Env file.");

  if ((build_name = sb_strdup(sb_getenv(ENV_BUILD_NAME))) == NULL)
    error(1, "cannot identify build name, please run a !Env file.");

  if ((image_size = sb_strdup(sb_getenv(ENV_IMAGE_SIZE))) == NULL)
    error(1, "cannot establish a image size, please run a !Env file.");

  /* Call an initialision function for the build sequence */
  build_init();


  /*
   * read in our main files
   */
  read_module_database();
  read_component_database(build_name);
  if (image_type == image_type_unset) {
    image_type = image_type_main_rom;
  }
  read_shadow_component_database(build_name);
  update_force_clean_states();
  build_dirs();
  /*
   * start spooling
   */
  spool_open(log_filename);
  banner('-');

  /*
   * display some banner info
   */
  now = time(NULL);
  sb_printf("Started %s build : %s", build_name, asctime(localtime(&now)));


  if (verbose) {
    sb_printf("Log filename       : %s\n", CHK_STR(log_filename));
    sb_printf("Image filename     : %s\n", CHK_STR(image_filename));
    sb_printf("Messages location  : %s\n", CHK_STR(messages_filename));
    sb_printf("Image size         : %s\n", CHK_STR(image_size));
    sb_printf("Joiner application : %s\n", CHK_STR(joiner));
    sb_printf("Joiner format      : %s\n", CHK_STR(joiner_format));
    if (cstrcmp(joiner_format, "makeexprom") == 0) {
      sb_printf("Podule info ...\n");
      sb_printf("  Product code         : %s\n", CHK_STR(podule_info.product));
      sb_printf("  Description          : %s\n", CHK_STR(podule_info.descript));
      sb_printf("  Serial               : %s\n", CHK_STR(podule_info.serial));
      sb_printf("  Mod Status           : %s\n", CHK_STR(podule_info.status));
      sb_printf("  Place of manufacture : %s\n", CHK_STR(podule_info.manuf));
      sb_printf("  Part number          : %s\n", CHK_STR(podule_info.part));
      sb_printf("  Date                 : %s\n", CHK_STR(podule_info.date));
    }
  }
  /*
   * dispatch the action
   */
  banner('-');
  for (i = first; i < argc; i++) {
    found = FALSE;
    for (action = &action_tbl[0]; action->call; action++) {
      if (cstrcmp(action->name, argv[i]) == 0) {
        found = TRUE;
        break;
      }
    }
    if (!found) {
      usage();
      exit(EXIT_FAILURE);
    }
    sb_printf("Starting phase %s ...\n", action->name);
    (*(action->call)) ();
    banner('=');
  }

  now = time(NULL);
  sb_printf("Finished %s build : %s", build_name, asctime(localtime(&now)));
  banner('-');

  return error_database != NULL;
}



