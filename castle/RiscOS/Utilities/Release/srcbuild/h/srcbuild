/* This source code in this file is licensed to You by Castle Technology
 * Limited ("Castle") and its licensors on contractual terms and conditions
 * ("Licence") which entitle you freely to modify and/or to distribute this
 * source code subject to Your compliance with the terms of the Licence.
 *
 * This source code has been made available to You without any warranties
 * whatsoever. Consequently, Your use, modification and distribution of this
 * source code is entirely at Your own risk and neither Castle, its licensors
 * nor any other person who has contributed to this source code shall be
 * liable to You for any loss or damage which You may suffer as a result of
 * Your use, modification or distribution of this source code.
 *
 * Full details of Your rights and obligations are set out in the Licence.
 * You should have received a copy of the Licence with this source code file.
 * If You have not received a copy, the text of the Licence is available
 * online at www.castle-technology.co.uk/riscosbaselicence.htm
 */
/************************************************************************/
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/

#ifndef srcbuild_srcbuild_h
#define srcbuild_srcbuild_h

#include <stdarg.h>
#include <stdbool.h>
#include "VersionNum"

/* From CLX */
#include "hash.h"

#ifdef RISCOS
#define AMUMACHINEVAR   "Alias$amu_machine"
#define ENV_BUILD_DIR   "Build$Dir"     /* directory containing build */
#define ENV_NUM_LOCALE  "Build$LocaleListNumeric" /* A numeric variant of the locale list. */
#define ENV_RES_DIR     "Resource$Dir"  /* Where the export resources are held */
#define BBE_BS_MAKEFILE "BBEExport"     /* The Makefile containing the BBE rules */
#define BBE_BS_TOOLS    "StdTools"      /* The Makefile containing the standard tool definitions */
#else
#define AMUMACHINEVAR   "AMUMACHINE"
#define ENV_BUILD_DIR   "BUILDDIR"      /* directory containing build */
#define ENV_NUM_LOCALE  "BuildLocaleListNumeric" /* A numeric variant of the locale list. */
#define ENV_RES_DIR     "RESOURCEDIR"   /* Where the export resources are held */
#define BBE_BS_MAKEFILE "BBEExport"     /* The Makefile containing the BBE rules */
#define BBE_BS_TOOLS    "StdTools"      /* The Makefile containing the standard tool definitions */
#endif

#ifdef RISCOS
/* These variables are only ever set by RISC OS builds - variable scoping rules mean that
 * it is pointless setting them on other OSes as the variables aren't visible to the parent process.
 */
#define ENV_LOGFILE_LOCATION "SrcBuild$LogfileLocation"
#define ENV_IMAGE_LOCATION   "SrcBuild$ImageLocation"
#define ENV_RETURN_CODE      "SrcBuild$ReturnCode"
#endif

extern FILE *standard_output, *standard_error;

#define APP_VERSION Module_HelpVersion

#define ENV_BUILD_NAME  "Build"         /* name of build */
#define ENV_IMAGE_SIZE  "ImageSize"     /* size of image to be created */
#define BUILDSYS_DIR    "BuildSys"      /* directory off build root */
#define EXPORT_DIR      "Export"        /* directory containing the exported data */
#define SHADOW_DIR      "Shadow"        /* srcbuild state information */
#define LOGS_DIR        "Logs"          /* log info */
#define INSTALL_DIR     "Install"       /* directory for built modules */
#define IMAGES_DIR      "Images"        /* directory for final images */
#define COMPONENTS_DIR  "Components"    /* directory for component files */
#define MODULE_DB_FILE  "ModuleDB"      /* name of module database file */
#define ENV_LOCALE_LIST "LocaleList"    /* name of env var holding the comma-seperated list of locales */
#define ENV_LOCALE      "Locale"        /* The single locale as defined inthe env file. */
#define BBE_DIR         "BBE"           /* Binary Build Environment installation directory */
#define BBE_TMP_RES     "BBE_Res"       /* Temporary directory for resource export scripts */
#define BBE_TMP_ROM     "BBE_ROM"       /* Temporary directory for rom link export scripts */
#define AOF_DIR         "aof"           /* Directory holding partially linked module */
#define RESOURCES_DIR   "Resources"     /* Name of resource directories */

/* Territory mapping system variables, used to remove reliance on the International module */
#define TERR_NAME_PFX   "TerritoryName$"    /* TerritoryName$1 is set to UK, for example */
#define TERR_NUM_PFX    "TerritoryNumber$"  /* TerritoryNumber$UK is set to 1, for example */

#define BUFFER_LEN      1024    /* used for reading in strings */

/*
 * Neil's funky double macro thing
 */
#define ENUM_ENTRY(y) y
#define ARRAY_ENTRY(y) #y
#define ALL_MODULE_TYPES(x) x(RES),x(ASM),x(C),x(EXP),x(BAS),x(KERNEL),x(HAL),x(DATA),x(LOADER),x(BBE),x(UNDEF)

typedef enum {ALL_MODULE_TYPES(ENUM_ENTRY)} module_type_t;

typedef struct s_module_entry {
  char *name;
  char *path;
  char *output;
  char *filename;
  module_type_t type;
  char *switch_on;
  struct s_module_entry *next;
} module_entry_t;

typedef struct s_component_entry {
  char *name;
  char *options;
  char *switch_on;
  char *install;
  bool no_component_sources; /* If set then does not perform a ROM phase, even if ROM phase called. */
  bool install_after_rom;    /* If set then it does an install phase after the ROM phase */
  bool created_bbe_makefile; /* If set then this component has created its own BBE makefile */
  unsigned int resource_sfx; /* suffix for Resources: Resources or Resources2 or Resources3 ... */
  int  always_clean;         /* -clean will ensure that force_clean is always TRUE for this component */
  int  force_clean;
  int  duplicate;
  module_type_t type;
  unsigned long int  position;
  long size;
  struct s_component_entry *next;
  struct s_component_entry *prev;
  unsigned long int force_position;
} component_entry_t;

typedef struct s_error_entry {
  char *message;
  struct s_error_entry *next;
} error_entry_t;

typedef struct {
  char *product;
  char *descript;
  char *serial;
  char *status;
  char *manuf;
  char *part;
  char *date;
} podule_info_t;

typedef struct {
        int (*call)(void);
        char    *name;
        char    *help;
} action_t;


/* Remember the type of object we are building, rather than relying on the name of
 * the joiner and the joiner format (which will both be "romlinker" in future).
 */
typedef enum {
  image_type_rom,
  image_type_main_rom = image_type_rom,
  image_type_exprom,
  image_type_expansion_rom = image_type_exprom,
  image_type_extrom,
  image_type_extension_rom = image_type_extrom,
  image_type_other,
  image_type_unset
} image_type_t;

extern image_type_t image_type;

#define MAX_TERRITORIES 10
extern char* supported_territories[];
extern unsigned int num_of_territories;

/* Base address for ROM images */
extern unsigned long rom_base_address;

#define TRUE  (1)
#define FALSE (0)

#define CHK_STR(x) (x==NULL?"(null)":x)
/*
 * prototypes
 */
int  read_component_database(char *filename);
void release_component(component_entry_t *entry);
void error(int fatal, char *format, ...);
void banner(char c);

module_entry_t *lookup_module(char *name);
component_entry_t *lookup_component(char *name);

/*
 * global variables
 */
extern char progname[32]; /* Magic number required by CLX library */
extern char *module_type_names[];
extern char *image_type_names[];
extern char *build_name;
extern char *build_dir;
extern char *image_filename;
extern char *log_filename;
extern char *image_size;
extern char *messages_filename;
extern char *joiner;
extern char *joiner_format;
extern char *sigstr;
extern char *signum;
extern int verbose;
extern module_entry_t *module_database;
extern component_entry_t *component_database;
extern HashTable join_db;
extern HashId join_entries[];
extern int join_db_hwm;
extern podule_info_t podule_info;
extern error_entry_t *error_database;

#endif
