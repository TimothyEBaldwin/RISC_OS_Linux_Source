/* This source code in this file is licensed to You by Castle Technology
 * Limited ("Castle") and its licensors on contractual terms and conditions
 * ("Licence") which entitle you freely to modify and/or to distribute this
 * source code subject to Your compliance with the terms of the Licence.
 * 
 * This source code has been made available to You without any warranties
 * whatsoever. Consequently, Your use, modification and distribution of this
 * source code is entirely at Your own risk and neither Castle, its licensors
 * nor any other person who has contributed to this source code shall be
 * liable to You for any loss or damage which You may suffer as a result of
 * Your use, modification or distribution of this source code.
 * 
 * Full details of Your rights and obligations are set out in the Licence.
 * You should have received a copy of the Licence with this source code file.
 * If You have not received a copy, the text of the Licence is available
 * online at www.castle-technology.co.uk/riscosbaselicence.htm
 */
/************************************************************************/
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/

#ifndef srcbuild_riscos_h
#define srcbuild_riscos_h
#include <stdbool.h>

extern int  sb_chdir(const char *dir);
extern int  sb_mkdir(const char *dir, const int mode);
extern int  sb_mkdir_p(const char *dir, const int mode);
extern void spool_open(char *file);
extern void spool_close(char *file);
extern long sb_file_size(const char *file);
extern int  sb_copy_objects(const char *destination, const char *source);
extern int  sb_wipe_objects(const char *base, int recurse);
extern int  sb_buildfilename(int, char *,...);
extern int  sb_return_country_number(const char* country);

extern int  sb_setenv(const char *name, const char *value);
extern char *sb_getenv(const char *name);
extern char **sb_putenv(void);
extern char *sb_strdup(const char *str);

extern int  sb_parallel_start(bool ok);
extern void sb_parallel_end(int flag);
extern void sb_parallel_lock_csd(void);

extern int  sb_system(char *command);
static inline void sb_system_sync(void) { sb_parallel_start(0); }

extern void sb_init(void);

#ifdef __CC_NORCROFT
#  pragma check_printf_formats
#endif
extern int sb_printf(const char *, ...);
extern int sb_fprintf(FILE *, const char *, ...);
#ifdef __CC_NORCROFT
#  pragma -v0
#endif


#define PARALLEL(OK) for(int sb_parallel_flag = sb_parallel_start(OK); sb_parallel_flag; sb_parallel_end(sb_parallel_flag), sb_parallel_flag = 0)


#endif
