/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   auxiliary.c
 * Purpose: support functions for the ColourDbox object class
 * Author:  TGR
 * History: 8-Mar-94: TGR: created
 *
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"

#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"
#include "twimp.h"
#include "style.h"
#include "objects/toolbox.h"
#include "objects/window.h"
#include "objects/colourdbox.h"
#include "colpicker.h"

#include "auxiliary.h"
#include "object.h"
#include "task.h"

ObjectID                global_menu;
ColourDboxInternal     *global_next;

/*
EventInterest   menu_messages_of_interest[] = {
                 {-1                                 , -1},
                };
*/
EventInterest   normal_messages_of_interest[] = {
                 {wimp_MMENUS_DELETED                , -1},
                 {colourpicker_MCOLOURCHANGED        ,  0},
                 {wimp_MHELP_REQUEST                 ,  0},
                 {colourpicker_MCLOSEDIALOGUEREQUEST ,  0},
                 {colourpicker_MPICKERCHOICE         ,  0},
                 {colourpicker_MRESETCOLOURREQUEST   ,  0},
                 {-1                                 , -1}
                };

EventInterest   events_of_interest[] = {
                 {wimp_EREDRAW        ,  0},
                 {wimp_EKEY           ,  0},
                 {wimp_ETOOLBOX_EVENT ,  0},
                 {wimp_ECLOSE         ,  0},
                 {-1                  , -1}
                };

EventInterest   toolbox_events_of_interest[] = {
                 {ColourDbox_AboutToBeShown   , ColourDbox_ObjectClass},
                 {-1                          ,                     -1}
                };


static void aux_update_xy(int *left, int *top);

extern _kernel_oserror *dialogue_completed (ObjectID object_id) {

   _kernel_oserror    *e;
   _kernel_swi_regs    regs;
   ToolboxEvent        toolbox_event;

   DEBUG debug_output ("e","ColourDbox: sending dialogue completed\n");

   regs.r[0] = 0;
   regs.r[1] = (int) object_id;
   regs.r[2] = -1;
   regs.r[3] = (int) &toolbox_event;

   toolbox_event.hdr.size       = sizeof (ColourDbox_DialogueCompleted_Event);
   toolbox_event.hdr.event_code = ColourDbox_DialogueCompleted;
   toolbox_event.hdr.flags      = 0;

   if ((e = _kernel_swi (Toolbox_RaiseToolboxEvent, &regs, &regs)) != NULL)
      return e;

   return NULL;
}

extern _kernel_oserror *close_dialogue (ColourDboxInternal *internal, TaskDescriptor *t) {

   _kernel_oserror     *e;
   _kernel_swi_regs     regs;
   wimp_GetWindowState  wind_state;

   DEBUG debug_output ("e","ColD: closing dialogue box dh = 0x%x\n",internal->dialogue_handle);

   wind_state.open.window_handle = internal->window_handle;

   regs.r[1] = (int) &wind_state;

   DEBUG debug_output ("e","ColourDbox: getting window state (coords)\n");

   if ((e = _kernel_swi (Wimp_GetWindowState, &regs, &regs)) != NULL) {
      if (e->errnum == 0x288) {
         DEBUG debug_output ("e","failed - invliad window handle\n");
         dialogue_hidden (internal);
      } else {
         return e;
      }
   } else {
      internal->x = wind_state.open.visible_area.xmin;
      internal->y = wind_state.open.visible_area.ymax;
   }
   regs.r[0] = 0;
   regs.r[1] = (int) internal->dialogue_handle;

/*
   if (*(int*)(internal->dialogue_handle) == *(int*)"CPD ") {
*/
   if ((e = _kernel_swi (ColourPicker_CloseDialogue, &regs, &regs)) != NULL) {
      if (e->errnum != 0x20d02) {
         DEBUG debug_output ("e","ColourDbox: close dialogue returned '%s'\n",e->errmess);
         return e;
      } else {
         dialogue_hidden (internal);
      }
   }
/*
   } else {
      debug_output ("s","ColourDbox: invalid_handle\n");
   }
*/
   IGNORE(t);

   return dialogue_hidden (internal);
}

extern _kernel_oserror *dialogue_hidden (ColourDboxInternal *internal) {

   ObjectID            object_id = internal->object_id;

   if (~internal->flags & ColourDboxInternal_IsShowing)
      return NULL;

   internal->flags &= ~ColourDboxInternal_IsShowing;

/*
   if (!(--t->window_count) && ((e = deregister_task(t)) != NULL))
      return e;
*/
   DEBUG debug_output ("e","ColourDbox: about to zero global_menu, dh and wh\n");

   internal->dialogue_handle =
   internal->window_handle   = 0;

   if (object_id == global_menu) global_menu = 0;

   return (internal->flags & ColourDboxInternal_GenerateHideEvent) ? dialogue_completed (object_id) : NULL;
}

extern _kernel_oserror *register_task (TaskDescriptor *t) {

   _kernel_oserror    *e;
   _kernel_swi_regs    regs;

      DEBUG debug_output ("s","ColD: registering for normal messages\n");

      regs.r[0] = 0;
      regs.r[1] = ColourDbox_PostFilter;
      regs.r[2] = (int) t;
      regs.r[3] = Toolbox_RegisterPostFilter_WimpMessage;
      regs.r[4] = (int) normal_messages_of_interest;

      if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL)
         return e;

      DEBUG debug_output ("s","ColD: registering for toolbox events\n");

      regs.r[0] = 0;
      regs.r[1] = ColourDbox_PostFilter;
      regs.r[2] = (int) t;
      regs.r[3] = Toolbox_RegisterPostFilter_ToolboxEvent;
      regs.r[4] = (int) toolbox_events_of_interest;

      if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL)
         return e;

      DEBUG debug_output ("s","ColD: registering for events\n");

      regs.r[0] = 0;
      regs.r[1] = ColourDbox_PostFilter;
      regs.r[2] = (int) t;
      regs.r[3] = Toolbox_RegisterPostFilter_WimpEvent;
      regs.r[4] = (int) events_of_interest;

      if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL)
         return e;

      DEBUG debug_output ("s","ColD: registering for prefilter\n");

      regs.r[0] = 0;
      regs.r[1] = ColourDbox_PreFilter;
      regs.r[2] = (int) t;

      return _kernel_swi (Toolbox_RegisterPreFilter, &regs, &regs);
}

extern _kernel_oserror *deregister_task (TaskDescriptor *t) {

   _kernel_oserror    *e;
   _kernel_swi_regs    regs;

   regs.r[0] = 1;
   regs.r[1] = ColourDbox_PostFilter;
   regs.r[2] = (int) t;
   regs.r[3] = Toolbox_RegisterPostFilter_WimpMessage;
   regs.r[4] = (int) normal_messages_of_interest;

   if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL)
      return e;

   regs.r[0] = 1;
   regs.r[1] = ColourDbox_PostFilter;
   regs.r[2] = (int) t;
   regs.r[3] = Toolbox_RegisterPostFilter_WimpEvent;
   regs.r[4] = (int) events_of_interest;

   if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL)
       return e;

   regs.r[0] = 1;
   regs.r[1] = ColourDbox_PostFilter;
   regs.r[2] = (int) t;
   regs.r[3] = Toolbox_RegisterPostFilter_ToolboxEvent;
   regs.r[4] = (int) toolbox_events_of_interest;

   if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL)
       return e;

   regs.r[0] = 1;
   regs.r[1] = ColourDbox_PreFilter;
   regs.r[2] = (int) t;

   if ((e = _kernel_swi (Toolbox_RegisterPreFilter, &regs, &regs)) != NULL)
      return e;

   return NULL;
}

extern ColourDboxInternal *find_internal_d (int dialogue_handle, TaskDescriptor *t) {

   ColourDboxInternal *i = t->object_list,
                      *j;

   DEBUG debug_output ("e","ColD: find internal, searching for dh = 0x%x\n",dialogue_handle);

   if (!i) return NULL;

   /* Search through the object list until we find the one with the required dialogue handle */

   do {
      j = i->forward;
      DEBUG debug_output ("e","ColD: internal = 0x%x, dh = 0x%x\n",i,i->dialogue_handle);
      if (i->dialogue_handle == dialogue_handle) return i;
   } while ((i=j) != t->object_list);

   return NULL;
}

extern ColourDboxInternal *find_internal_w (int window_handle, TaskDescriptor *t) {

   ColourDboxInternal *i = t->object_list,
                      *j;

   if (!i) return NULL;

   /* Search through the object list until we find the one with the required window handle */

   do {
      j = i->forward;
      DEBUG debug_output ("e","ColD: internal = 0x%x, wh = 0x%x\n",i,i->window_handle);
      if (i->window_handle == window_handle) return i;
   } while ((i=j) != t->object_list);

   return NULL;
}

_kernel_oserror *show_actual           (void) {

   _kernel_oserror        *e;
   _kernel_swi_regs        regs;
   ColourPickerExtended    picker;

   DEBUG debug_output ("show","ColD: attempting to actually show window\n");

   global_next->flags         |= ColourDboxInternal_IsShowing;
   global_next->reset_on_close = 0;

   /* set up colour picker block */

   picker.hdr.flags
      = (1<<5) | ((global_next->flags & ColourDboxInternal_IncludeNoneButton)
                                              ? ColourPickerFlags_IncludeNoneButton    : 0)
      | ((global_next->flags & ColourDboxInternal_SelectNoneButton)
                                              ? ColourPickerFlags_SelectNoneButton     : 0)
      | ColourPickerFlags_AllChangeInfo;
/*
      | ((global_next->flags & ColourDboxInternal_ChangeInfoExceptDrag)
                                              ? ColourPickerFlags_ChangeInfoExceptDrag : 0)
      | ((global_next->flags & ColourDboxInternal_AllChangeInfo)
                                              ? ColourPickerFlags_AllChangeInfo        : 0);
*/
/* removed owing to bug in colour picker
      | ((global_next->help_message)
                                              ? ColourPickerFlags_IgnoreHelpRequest    : 0);
*/

   DEBUG if (global_next->title) debug_output ("e","ColD: title = '%s'\n",global_next->title);

   picker.hdr.title       = global_next->title;
   picker.hdr.x           = global_next->x;
   picker.hdr.y           = global_next->y;
   picker.hdr.reserved0   = 0x80000000;
   picker.hdr.reserved1   = 0x7fffffff;
   picker.hdr.reserved2   = 0;
   picker.hdr.reserved3   = 0;

   if (global_next->show_type == Toolbox_ShowObject_Centre) {
           aux_update_xy(&picker.hdr.x, &picker.hdr.y);
   }

   if (global_next->colour_block_extd) {
      size_t reqdsize = 2 * sizeof(int) + global_next->colour_block_extd->hdr.extension_size;

      DEBUG debug_output ("e","ColD: using extended colour block\n");
      memcpy (&picker.hdr.descriptor_hdr, global_next->colour_block_extd, reqdsize);

      if (global_next->colour_block_ini) mem_freek (global_next->colour_block_ini);
      global_next->colour_block_ini = NULL;

      if ((global_next->colour_block_ini = mem_alloc (reqdsize)) == NULL)
         return make_error (ColourDbox_AllocFailed, 0);

      memcpy (global_next->colour_block_ini, global_next->colour_block_extd, reqdsize);
      global_next->ini_flags = global_next->flags;
   } else {
      DEBUG debug_output ("e","ColD: using RGB word only = 0x%x\n",global_next->colour);
      memcpy (&picker.hdr.descriptor_hdr, &global_next->colour, sizeof(int));
      picker.hdr.descriptor_hdr.extension_size = 0;
   }
   regs.r[0] = (global_next->flags & ColourDboxInternal_MenuSemantics) ? ColourPickerType_Menu
             : (global_next->flags & ColourDboxInternal_SubMenuSemantics) ? ColourPickerType_SubMenu
             : ColourPickerType_Normal;

   regs.r[1] = (int) &picker;

   DEBUG debug_dump (&picker, sizeof picker.hdr);

   if ((e = _kernel_swi (ColourPicker_OpenDialogue, &regs, &regs)) != NULL) {
      global_next = NULL;
      return e;
   }

   DEBUG debug_output ("a","ColourDbox: new dh = 0x%x, wh = 0x%x\n",regs.r[0], regs.r[1]);

   global_next->dialogue_handle = regs.r[0];
   global_next->window_handle   = regs.r[1];

   global_next->flags |= ColourDboxInternal_IsShowing;

   global_next = NULL;

   return NULL;
}

extern _kernel_oserror *reset_colour (ColourDboxInternal *internal) {
   size_t reqdsize;

   if (!internal->colour_block_ini)
      return NULL;

   if (internal->colour_block_extd) mem_freek (internal->colour_block_extd);
   internal->colour_block_extd = NULL;

   reqdsize = 2 * sizeof(int) + internal->colour_block_ini->hdr.extension_size; /* palette entry + extension size + extension */

   if ((internal->colour_block_extd = mem_alloc (reqdsize)) == NULL)
      return make_error (ColourDbox_AllocFailed, 0);

   memcpy (internal->colour_block_extd, internal->colour_block_ini, reqdsize);

   internal->flags          = internal->ini_flags;
   internal->reset_on_close = 0;

   return NULL;
}

/*
_kernel_oserror *fetch_state (ColourDboxInternal *internal) {

   _kernel_oserror    *e;
   _kernel_swi_regs    regs;
   ColourPickerHeader *colourpicker_block;

   if (internal->colour_model_block) mem_freek (internal->colour_model_block);
   if (internal->colour_block_extd)  mem_freek (internal->colour_block_extd);
   internal->colour_model_block  = NULL;
   internal->colour_block_extd   = NULL;

   DEBUG debug_output ("e","ColourDbox: about to call _ReadDialogue(1)\n");

   regs.r[0] = 0;
   regs.r[1] = internal->dialogue_handle;
   regs.r[2] = 0;

   if ((e = _kernel_swi (ColourPicker_ReadDialogue, &regs, &regs)) != NULL) {
      DEBUG debug_output ("e","ColourDbox: _ReadDialogue return '%s'\n", e->errmess);
      return e;
   }
   if ((colourpicker_block = mem_alloc (regs.r[2])) == NULL)
      return make_error (ColourDbox_AllocFailed, 0);

   DEBUG debug_output ("e","ColourDbox: about to call _ReadDialogue(2)\n");

   regs.r[1] = internal->dialogue_handle;
   regs.r[2] = (int) colourpicker_block;

   if ((e = _kernel_swi (ColourPicker_ReadDialogue, &regs, &regs)) != NULL) {
      DEBUG debug_output ("e","ColourDbox: _ReadDialogue return '%s'\n", e->errmess);
      return e;
   }
   if ((internal->colour_block_extd = mem_alloc (sizeof (ColourDescriptorHeader) + colourpicker_block->descriptor_hdr.extension_size)) == NULL)
      return make_error (ColourDbox_AllocFailed, 0);

   internal->x = colourpicker_block->x;
   internal->y = colourpicker_block->y;

   memcpy (internal->colour_block_extd, &colourpicker_block->descriptor_hdr, sizeof (ColourDescriptorHeader) + colourpicker_block->descriptor_hdr.extension_size);

   mem_freek (colourpicker_block);

   DEBUG debug_output ("e","ColourDbox: completed fetch_state\n");

   return NULL;
}
*/

static int aux_picker_width, aux_picker_height;

_kernel_oserror *auxiliary_find_size (const char *templatefile)
{
        char name[12];
        int win_size, ws_size;
        _kernel_oserror *e;
        aux_picker_width = 816;
        aux_picker_height = 508;
        e = _swix(Wimp_OpenTemplate, _IN(1), templatefile);
        if (e) return e;
        strcpy(name, "Picker");
        e = _swix(Wimp_LoadTemplate, _INR(1,6)|_OUTR(1,2), 0, 0, 0, -1, name, 0, &win_size, &ws_size);
        if (!e) {
                char *data = malloc(win_size + ws_size);
                if (data) {
        		e = _swix(Wimp_LoadTemplate, _INR(1,6), data, data+win_size, data+win_size+ws_size, -1, name, 0);
        		if (!e) {
                                wimp_Window *w = (wimp_Window *) data;
                        	aux_picker_width = w->ex.xmax - w->ex.xmin;
                        	aux_picker_height = w->ex.ymax - w->ex.ymin;
                        }
                        free(data);
                }
        }
        (void) _swix(Wimp_CloseTemplate, 0);
        return 0;
}

static void aux_update_xy(int *left, int *top)
{
        static const int nums[] = { 4, 5, 11, 12, -1 };
        int vars[sizeof(nums)/sizeof(int)];

	(void) _swix(OS_ReadVduVariables, _INR(0,1), nums, vars);
	*left = (((vars[2] + 1) << vars[0]) - aux_picker_width) >> 1;
	*top = (((vars[3] + 1) << vars[1]) + aux_picker_height) >> 1;
}
