/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   show.c
 * Purpose: show a ColourDbox Object
 * Author:  TGR
 * History: 4-Mar-94: TGR: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"

#include "objects/toolbox.h"
#include "objects/colourdbox.h"

#include "object.h"
#include "auxiliary.h"
#include "task.h"

#include "show.h"


extern _kernel_oserror *show_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * request to show an object
     * R0 = 3
     * R1 = Object ID
     * R2 = internal handle returned when Object was created
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 =  flags
     *      R1 =  Object ID
     *      R2 =  "show type"
     *            0 => default place
     *            1 => R3 points to buffer with full data for showing
     *            2 => R3 points to buffer with coordinates
     *      R3 = 0
     *   OR R3 -> buffer giving Object-specific data for showing this
     *            Object
     *      R4 =  Parent Object ID
     *      R5 =  Parent Component ID
     */

    /*
     * Function to "display" an Object on the screen.  If R2 == 0, then
     * display in default place.
     * If Object has bit set to say warn before show, then we should just
     * send Toolbox Event, and wait for the next call to Wimp_Poll after
     * the event is delivered before the Object is actually shown
     * (ie catch it in the prefilter).
     *
     */

   _kernel_oserror        *e;
   _kernel_swi_regs       *user_regs    = (_kernel_swi_regs *) r->r[4],
                           regs;
   ColourDboxInternal     *internal     = (ColourDboxInternal *) r->r[2],
                          *old_internal = internal;
   ColourDbox_AboutToBeShown_Event
                          *about_to_be_shown;
   ObjectID                object_id    = (ObjectID) r->r[1],
                           old_menu     = global_menu;
   ToolboxEvent            toolbox_event;

   DEBUG debug_output ("s","ColD: entering show, task = 0x%x, internal=0x%x, object_id=0x%x\n",t,internal,object_id);

   DEBUG debug_output ("s","ColourDbox: current global_menu = 0x%x\n",global_menu);

/*
   if (!global_menu && ((global_menu =  (user_regs->r[0] & 3) ? object_id : global_menu) != NULL)) {
      regs.r[0] = 0;
      regs.r[1] = ColourDbox_PostFilter;
      regs.r[2] = (int) t;
      regs.r[3] = Toolbox_RegisterPostFilter_WimpMessage;
      regs.r[4] = (int) menu_messages_of_interest;

      if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL)
         return e;
   }
*/
   global_menu =  (user_regs->r[0] & 3) ? object_id : global_menu;
       /* Just in case the client shows one transient followed quickly by another */

   internal->flags &= (~ColourDboxInternal_MenuSemantics & ~ColourDboxInternal_SubMenuSemantics);
   internal->show_type = user_regs->r[2];

   if (internal->flags & ColourDboxInternal_IsShowing) {

/* EOR
      if ((internal->flags & (ColourDboxInternal_MenuSemantics|ColourDboxInternal_SubMenuSemantics)
         && !(user_regs->r[0] & 3))
      || (!(internal->flags & (ColourDboxInternal_MenuSemantics|ColourDboxInternal_SubMenuSemantics))
         && (user_regs->r[0] & 3))) {
*/
      if (internal->flags & (ColourDboxInternal_MenuSemantics|ColourDboxInternal_SubMenuSemantics)
        ||(user_regs->r[0] & 3)) {

         if (old_menu) {
            regs.r[0] = 0;
            regs.r[1] = old_menu;

            if ((e = _kernel_swi (Toolbox_GetInternalHandle, &regs, &regs)) != NULL)
               return e;

            old_internal = (ColourDboxInternal *) regs.r[0];

/*            if ((e = fetch_state (old_internal)) != NULL) {
               if (e->errnum != 0x20d02)
                  return e;
            } else
*/
            if ((e = close_dialogue (old_internal, t)) != NULL) {
               return e;
            }
         }
         internal->flags |= ((user_regs->r[0] &  1) ? ColourDboxInternal_MenuSemantics : 0)
                         |  ((user_regs->r[0] &  2) ? ColourDboxInternal_SubMenuSemantics : 0);

         if (user_regs->r[2] == 2) {
            internal->x = ((int *) user_regs->r[3])[0];
            internal->y = ((int *) user_regs->r[3])[1];
            DEBUG debug_output ("s","ColD: setting coords to given value (%d,%d)\n", internal->x, internal->y);
         }
         global_next = internal;

         if ((e = show_actual ()) != NULL) {
            internal->flags &= ~ColourDboxInternal_IsShowing;
            return e;
         }
      } else {
         wimp_GetWindowState    wind_blk;

         DEBUG debug_output ("s","ColD: already showing, raising (wh = 0x%x)\n",internal->window_handle);

         wind_blk.open.window_handle = internal->window_handle;

         regs.r[1] = (int) &wind_blk;

         if ((e = _kernel_swi (Wimp_GetWindowState, &regs, &regs)) != NULL) {
            internal->flags &= ~ColourDboxInternal_IsShowing;
            return e;
         }
         wind_blk.open.behind = -1;

         if ((e = _kernel_swi (Wimp_OpenWindow, &regs, &regs)) != NULL)
            return e;
      }
      return NULL;
   }

   internal->flags |= ((user_regs->r[0] &  1) ? ColourDboxInternal_MenuSemantics : 0)
                   |  ((user_regs->r[0] &  2) ? ColourDboxInternal_SubMenuSemantics : 0)
                   |  ((user_regs->r[2] != 2)
                                              ? ColourDboxInternal_ShowAtDefault    : 0);
   internal->show_type = user_regs->r[2];

   DEBUG debug_output ("s","ColD: show type = %d\n",user_regs->r[2]);
   if (user_regs->r[2] == 2) {
      internal->x = ((int *) user_regs->r[3])[0];
      internal->y = ((int *) user_regs->r[3])[1];
      DEBUG debug_output ("s","ColD: setting coords to given value (%d,%d)\n", internal->x, internal->y);
   } else if (internal->x == -1) {
      wimp_PointerInfo ptr_info;

      regs.r[1] = (int) &ptr_info;

      if ((e = _kernel_swi (Wimp_GetPointerInfo, &regs, &regs)) != NULL) {
         return e;
      }
      internal->x = ptr_info.x - 64;
      internal->y = ptr_info.y;
   }
   if (internal->flags & ColourDboxInternal_GenerateShowEvent) {

      DEBUG debug_output ("s","ColD: generating show event (0x%x)\n", ColourDbox_AboutToBeShown);

      about_to_be_shown            = (ColourDbox_AboutToBeShown_Event *) &toolbox_event;
      about_to_be_shown->show_type = user_regs->r[2];

      about_to_be_shown->info.coords.x =  internal->x;
      about_to_be_shown->info.coords.y =  internal->y;

      regs.r[0]                        =  0;                     /* flags*/
      regs.r[1]                        =  r->r[1];               /* Object id */
      regs.r[2]                        =  -1;                    /* Component id */
      regs.r[3]                        =  (int) &toolbox_event;

      toolbox_event.hdr.size           =  sizeof(ColourDbox_AboutToBeShown_Event);
      toolbox_event.hdr.event_code     =  ColourDbox_AboutToBeShown;
      toolbox_event.hdr.flags          =  user_regs->r[0];

      return _kernel_swi (Toolbox_RaiseToolboxEvent, &regs, &regs);   /* return here whatever */
   } else {
      global_next = internal;
      return show_actual ();
   }
}

