/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   main.c
 * Purpose: main module of a ColourDbox Object module
 * Author:  TGR
 * History: 17-Mar-94: TGR: created
 *          18-May-95: IDJ: bug-fix AQU-01270 - rmensure 310support
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
#include "Global/Services.h"

#include "const.h"
#include "macros.h"
#include "debug.h"
#include "rmensure.h"
#include "mem.h"
#include "messages.h"
#include "objmodule.h"

#include "objects/toolbox.h"
#include "objects/colourdbox.h"

#include "object.h"
#include "auxiliary.h"
#include "create.h"
#include "delete.h"
#include "show.h"
#include "hide.h"
#include "getstate.h"
#include "miscop.h"
#include "events.h"
#include "task.h"

#include "ColourDboxHdr.h"

#define MAX_CLASS_SWI_METHODS 7
static _kernel_oserror *(*class_swi_methods [MAX_CLASS_SWI_METHODS])(_kernel_swi_regs *r, TaskDescriptor *t) =
      {
         create_object,
         delete_object,
         NULL, /*copy_object,*/
         show_object,
         hide_object,
         getstate_object,
         miscop_object
      };



/* +++++++++++++++++++++++++++++++++ finalisation code +++++++++++++++++++++++++++++++++ */

#ifndef ROM
extern int Resources(void);
#endif

extern _kernel_oserror *ColourDbox_finalise (int fatal, int podule, void *pw)
{
    IGNORE(fatal);
    IGNORE(podule);
    IGNORE(pw);

    /*
     * refuse to finalise if tasks active
     */

    if (task_any_active())
        return make_error (ColourDbox_TasksActive, 0);

   /*
    * close our messages file
    */

   messages_file_close();


#ifndef ROM
    /*
     * ... and deregister from ResourceFS
     */

    objmodule_deregister_resources(Resources());
#endif

   /* deregister object module */
    objmodule_deregister(0, ColourDbox_ObjectClass);

   /*
    * free up memory we may have left allocated
    */

   mem_free_all ();

   return NULL;
}


/* ++++++++++++++++++++++++++++++++ initialisation code +++++++++++++++++++++++++++++++ */


extern _kernel_oserror *ColourDbox_init(const char *cmd_tail, int podule_base, void *pw)
{
   _kernel_oserror *e;
   int wimpversion;

   IGNORE(cmd_tail);
   IGNORE(podule_base);
   IGNORE(pw);

   DEBUG debug_set_var_name("ColourDbox$Debug");

   DEBUG debug_output ("M","ColD: code initialise\n");

   if (((e = rmensure ("Toolbox",      "Toolbox.Toolbox",     "1.29")) != NULL)
    || ((e = rmensure ("ColourPicker", "Picker",              "0.58")) != NULL)
    /*|| ((e = rmensure ("310Support",   "310Support.ThreeTen", "0.02")) != NULL)*/)
      return e;

   /* IDJ: 18-5-95: bug-fix AQU-01270: check wimp version before loading 310support */
   if ((e = _swix(Wimp_ReadSysInfo, _IN(0)|_OUT(0), 7, &wimpversion)) != NULL)
     return e;

   if (wimpversion < 350)
   {
       if ((e = rmensure ("310Support", "310Support.ThreeTen", "0.02")) != NULL)
           return e;
   }

   /*
    * register our messages file with ResourceFS & MessageTrans
    */

#ifndef ROM
   if ((e = objmodule_register_resources(Resources())) != NULL)
     return e;
#endif

   objmodule_ensure_path("ColourDbox$Path", "Resources:$.Resources.ColourDbox.");

   if ((e = messages_file_open ("ColourDbox:Messages")) != NULL)
      return e;

   /*  register here with the Toolbox as an Object Module */
   e = objmodule_register_with_toolbox(0, ColourDbox_ObjectClass, ColourDbox_ClassSWI, 0);
   if (e) {
#ifndef ROM
     objmodule_deregister_resources(Resources());
#endif
     return e;
   }

   auxiliary_find_size(getenv ("ColourPicker$Path") ?
      "ColourPicker:Templates" :
      "Resources:$.Resources.Picker.Templates");

   return NULL;
}



/* +++++++++++++++++++++++++++++++++ service handler code ++++++++++7++++++++++++++++++++ */


extern void ColourDbox_services(int service_number, _kernel_swi_regs *r, void *pw)
{
   IGNORE(pw);

   DEBUG debug_output ("M","ColD: svc 0x%x\n",service_number);

   switch (service_number)
   {

        case Service_ToolboxTaskDied:
            /*
             * task dying - r0 holds task handle
             */

            task_remove (r->r[0]);

            break;

      case Service_ToolboxTaskBorn:
         /* Toolbox task has just started R0  == wimp task handle */

         /*
          * create a new "task descriptor"
          */

         task_add (r->r[0]);

         break;

        case Service_ToolboxStarting:
            /*
             * register with the Toolbox as an Object Module
             */

            objmodule_register_with_toolbox(0, ColourDbox_ObjectClass, ColourDbox_ClassSWI, 0);
            break;

      default:
         break;
   }
}

/* ++++++++++++++++++++++++++++++++++++++ SWI code +++++++++++++++++++++++++++++++++++++ */


extern _kernel_oserror *ColourDbox_SWI_handler(int swi_no, _kernel_swi_regs *r, void *pw)
{
   _kernel_oserror *e;
   TaskDescriptor  *t;

   DEBUG debug_output ("M","ColD: SWI 0x%x\n",ColourDbox_SWIChunkBase+swi_no);

   IGNORE(pw);

   switch (swi_no)
   {
      case ColourDbox_ClassSWI - ColourDbox_00:
         if (r->r[0] < 0 || r->r[0] >= MAX_CLASS_SWI_METHODS)
         {
               return make_error_hex(ColourDbox_NoSuchMethod,1,r->r[0]);
         }
         else
         {
            t = task_find (r->r[3]);

            if (t == NULL)
            {
               return make_error_hex(ColourDbox_NoSuchTask,1,r->r[3]);
            }
            DEBUG debug_output ("M","ColD: class SWI method %d\n",r->r[0]);
            e = (*class_swi_methods[r->r[0]])(r, t);
         }
         break;

      case ColourDbox_PostFilter - ColourDbox_00:
         e = events_postfilter (r);
         break;

      case ColourDbox_PreFilter - ColourDbox_00:
         e = events_prefilter (r);
         break;

      default:
         e = error_BAD_SWI;
         break;
   }

   return e;
}

#if debugging
/* ++++++++++++++++++++++++++++++++++++++ star commands ++++++++++++++++++++++++++++++++++++*/

extern _kernel_oserror *ColourDbox_commands(const char *arg_string, int argc, int cmd_no, void *pw)
{
    IGNORE(argc);
    IGNORE(pw);
    IGNORE(arg_string);

    switch (cmd_no)
    {
        case CMD_ColourDbox_Memory:
            mem_print_list();
            break;

        default:
            break;
    }

    return NULL;
}
#endif
