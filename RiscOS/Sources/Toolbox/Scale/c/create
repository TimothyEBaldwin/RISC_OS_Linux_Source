/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Title:   create.c
 * Purpose: create a Scale Object
 * Author:  TGR
 * History: 15-Feb-94: TGR: created
 *           8-Feb-95: IDJ: bug-fix AQU-01176: set std values even if using own template
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"
#include "objsupport.h"

#include "objects/toolbox.h"
#include "objects/window.h"
#include "objects/scale.h"

#include "auxiliary.h"
#include "object.h"
#include "task.h"

#include "create.h"


extern _kernel_oserror *create_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * request to create an object
     * R0 = 0
     * R1 = Object ID
     * R2 = 0  (will be internal handle for other SWIs
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 = flags
     *           bit 0 set => create from memory
     *      R1 -> description block
     */

    /*
     * The Toolbox has already checked that this is not just a create
     * call for a shared Object which already exists.
     * We create a new Object, and add it to the list of Objects for this
     * task.
     * We need to remember the ObjectID passed to us by the Toolbox, so
     * that we can identify this Object if we are given an ID from the
     * client's "id block".
     * Note that if any template names are held in the Object, then we
     * create an Object from that template, and store its ID.
     * Note also that the Toolbox has changed the client's R1 to point
     * at an in-core template, if it wasn't already!
     */

   _kernel_oserror      *e;
   _kernel_swi_regs      regs,
                        *user_regs         = (_kernel_swi_regs *) r->r[4];
   ObjectTemplateHeader *obj_temp_hdr      = (ObjectTemplateHeader *) user_regs->r[1];
   ScaleTemplate        *template          = (ScaleTemplate *) obj_temp_hdr->body;
   ScaleInternal        *internal;
   char                 *title,
                         buffer[4][12],
                        *new_template,
                        *name;
   int                   i;

   if ((internal = mem_alloc (sizeof (ScaleInternal))) == NULL)
      return make_error (Scale_AllocFailed, 0);

   if (template->window) {
      regs.r[0] = 0;
      regs.r[1] = (int) template->window;

      if ((e = _kernel_swi (Toolbox_CreateObject, &regs, &regs)) != NULL)
         goto clearup1;

      internal->sub_object_id = regs.r[0];

   } else {
      name = "_Scale";
      DEBUG debug_output ("f","Scale: creating object from template: '%s'\n",name);

      if ((new_template = copy_template(name)) == NULL) {
         e = make_error (Scale_AllocFailed, 0);
         goto clearup1;
      }
      if (template->title) {
         DEBUG debug_output ("f","Scale: setting title to '%s'\n",template->title);

         zap_window (new_template, window.title.indirect_text.buff_len, template->max_title);
         zap_window (new_template, window.title.indirect_text.buffer, template->title);
      } else {
         title = (char *)*read_window (new_template, window.title.indirect_text.buffer);
         zap_window (new_template, window.title.indirect_text.buff_len, MAX(template->max_title,strlen (title)+1));
      }
      if (~template->flags & Scale_IncludeScaleToFit) {
         if ((e = delete_gadget (new_template, Scale_ActionButton_ScaleToFit)) != NULL)
            goto clearup2;
      }

      internal->ini_value = 100;

      for (i=0;i<4;i++) {
         internal->std_value[i] = template->std_value[i];

         sprintf (buffer[i], "%d%%",template->std_value[i]);
         zap_gadget_string (new_template, ActionButton, Scale_ActionButton_StdValue(i), text, buffer[i], max_text_len);
      }
      zap_gadget (new_template,NumberRange,Scale_NumberRange_Scale, lower_bound, template->min_value);
      zap_gadget (new_template,NumberRange,Scale_NumberRange_Scale, upper_bound, template->max_value);
      zap_gadget (new_template,NumberRange,Scale_NumberRange_Scale, step_size,   template->step_size);

      if ((e = create_from_template (new_template, &(internal->sub_object_id))) != NULL)
         goto clearup1;
   }

   /* IDJ:8-Feb-95: bug-fix AQU-01176: set std values even if using own template */
   for (i=0; i<4; i++)
       internal->std_value[i] = template->std_value[i];
   internal->object_id     = r->r[1];
   internal->flags
      = ((template->flags & Scale_GenerateShowEvent) ? ScaleInternal_GenerateShowEvent : 0)
      | ((template->flags & Scale_GenerateHideEvent) ? ScaleInternal_GenerateHideEvent : 0);

   regs.r[0] = 0; /* flags */
   regs.r[1] = internal->sub_object_id;
   regs.r[2] = Window_GetWimpHandle;
   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      return e;
   internal->wimp_handle = regs.r[0];

   if (t->object_list) { /* If there are already fileinfos attached to the task ... */

      internal->forward                        = t->object_list;
      internal->backward                       = t->object_list->backward;
      t->object_list->backward->forward        = internal;
      t->object_list->backward                 = internal;

   } else {              /* ... if not ... */

      regs.r[0] = 0;
      regs.r[1] = Scale_PostFilter;
      regs.r[2] = (int) t;
      regs.r[3] = Toolbox_RegisterPostFilter_WimpEvent;
      regs.r[4] = (int) events_of_interest;

      if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL)
         goto clearup1;

      regs.r[0] = 0;
      regs.r[1] = Scale_PostFilter;
      regs.r[3] = Toolbox_RegisterPostFilter_ToolboxEvent;
      regs.r[4] = (int) toolbox_events_of_interest;

      if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL)
         goto clearup1;

      regs.r[0] = 0;
      regs.r[1] = Scale_PreFilter;

      if ((e = _kernel_swi (Toolbox_RegisterPreFilter, &regs, &regs)) != NULL) {
         goto clearup1;
      }

      DEBUG debug_output ("f","Scale: PreFilter should have registered okay\n");

      t->object_list     = internal;
      internal->forward  = internal;
      internal->backward = internal;
   }

   r->r[0] = (int) internal;

   return NULL;

   clearup2:
      mem_freek (new_template);
   clearup1:
      mem_freek(internal);
      return e;
}
