/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* > c.ToolWindow
 *
 *  Paint: Arthur 2 sprite editor
 *   Sprite tool window handling
 *
 *  Author: A.P. Thompson
 *
 * Upgraded to RISCOSlib - DAHE - 16 Aug 1989
 *  DAHE, 28 Aug  89 - internationalisation
 *  DAHE, 13 Sept 89 - get round static data init. problem for module version
 *  JAB,  30 Oct  90 - Now brings the toolbox to the front if it is already
 *                     open
 *  JAB,  26 Feb  91 - added better interactive help for the tool window
 */

#include "wimpt.h"
#include "wimp.h"
#include "template.h"

#include "main.h"
#include "Menus.h"
#include "PSprite.h"
#include "SprWindow.h"
#include "ToolWindow.h"
#include "Tools.h"
#include "ftrace.h"
#include "guard.h"

/**********************
 * Static variables   *
 **********************/

tools_template tools_tool_template;
wimp_w toolwindow_handle;
toolwindow_block *toolwindow_current_tool;
int toolwindow_current_mode = 0;

static toolwindow_block *toolarray [tools_COUNT];
static void init_toolarray (void)
{ /* Required to generate relocatable code */
  toolarray [0]  = NULL;
  toolarray [1]  = &tools_pixelpaint;
  toolarray [2]  = &tools_spraycanpaint;
  toolarray [3]  = &tools_floodfillpaint;
  toolarray [4]  = &tools_linepaint;
  toolarray [5]  = &tools_ellipseoutlinepaint;
  toolarray [6]  = &tools_ellipsepaint;
  toolarray [7]  = &tools_circleoutlinepaint;
  toolarray [8]  = &tools_circlepaint;
  toolarray [9]  = &tools_trianglepaint;
  toolarray [10] = &tools_arcpaint;
  toolarray [11] = &tools_segmentpaint;
  toolarray [12] = &tools_sectorpaint;
  toolarray [13] = &tools_camerapaint;
  toolarray [14] = &tools_scissorpaint;
  toolarray [15] = &tools_textpaint;
  toolarray [16] = &tools_grabberpaint;
  toolarray [17] = &tools_rectanglepaint;
  toolarray [18] = &tools_rectangleoutlinepaint;
  toolarray [19] = &tools_parallelogrampaint;
  toolarray [20] = &tools_parallelogramoutlinepaint;
  toolarray [21] = &tools_brushpaint;
}

static char
    *onlydigits  = "A0-9";

/********************************
 * Set text field in toolwindow *
 ********************************/

static void setdescription (void)

{ wimp_icon descicon;
  wimpt_noerr (wimp_get_icon_info (toolwindow_handle, tools_DESC_ICON,
      &descicon));
  strcpy (descicon.data.indirecttext.buffer,
         msgs_lookup (toolwindow_current_tool->description));
  wimpt_noerr (wimp_set_icon_state (toolwindow_handle, tools_DESC_ICON,
      (wimp_iconflags) 0, (wimp_iconflags) 0));
}

static void set_tool_caret (int i)

{ wimp_caretstr grabcar;
  wimp_icon descicon;

  grabcar.w = toolwindow_handle;
  grabcar.i = i;
  grabcar.x = grabcar.y = grabcar.height = -1;

  /* put caret at end of string */
  wimpt_noerr (wimp_get_icon_info (toolwindow_handle, i, &descicon));
  grabcar.index = strlen (descicon.data.indirecttext.buffer);

  wimpt_noerr (wimp_set_caret_pos (&grabcar));
}

static wimp_wind *drop_wind;

static wimp_i createicon_ind (int n, int selected, char *buffer, int len,
    char *valid)

{ wimp_icreate icreate;
  wimp_i icon;

  icreate.w = toolwindow_handle;
  icreate.i = * (wimp_icon *) ( (char *)&drop_wind [1] + n * sizeof (wimp_icon));
  if (buffer)
  { icreate.i.flags = (wimp_iconflags) (icreate.i.flags | wimp_INDIRECT);
    icreate.i.data.indirecttext.buffer = buffer;
    icreate.i.data.indirecttext.validstring = valid;
    icreate.i.data.indirecttext.bufflen = len;
  }
  if (selected)
    icreate.i.flags = (wimp_iconflags) (icreate.i.flags | wimp_ISELECTED);
  wimpt_noerr (wimp_create_icon (&icreate, &icon));
  return icon;
}

static wimp_i createicon (int n, int selected)

{ return createicon_ind (n, selected, 0, 0, 0);
}

static void extend_tools (void)

{ wimp_wstate state;

  wimpt_noerr (wimp_get_wind_state (toolwindow_handle, &state));
  state.o.box.y0 = state.o.box.y1 - (drop_wind->box.y1 - drop_wind->box.y0);
  wimpt_noerr (wimp_open_wind (&state.o));
}

static void munge_window (void)

{ int caretgrab = -1;

  if (toolwindow_current_tool == &tools_textpaint)
  { drop_wind = template_syshandle ("tool_text");
    extend_tools ();
    tools_icons [0] = createicon (0, 0);
    tools_icons [1] = createicon_ind (1, 0, tools_text_buffer, 256,
        (char *) -1);
    tools_icons [2] = createicon (6, 0);
    tools_icons [3] = createicon_ind (2, 0, tools_text_xsize, 5, onlydigits);
    tools_icons [4] = createicon (7, 0);
    tools_icons [5] = createicon_ind (3, 0, tools_text_ysize, 5, onlydigits);
    tools_icons [6] = createicon (5, 0);
    tools_icons [7] = createicon_ind (4, 0, tools_text_xspace, 5, onlydigits);
    caretgrab = 1;

    /* now enable nulls for all sprites */
    menus_restart_tool ();
  }
  else if (toolwindow_current_tool == &tools_floodfillpaint)
  { drop_wind = template_syshandle ("tool_fill");
    extend_tools ();
    tools_icons [0] = createicon (0, tools_flood_local);
    tools_icons [1] = createicon (1, !tools_flood_local);
  }
  else if (toolwindow_current_tool == &tools_scissorpaint ||
      toolwindow_current_tool == &tools_camerapaint)
  { drop_wind = template_syshandle ("tool_cut");
    extend_tools ();
    tools_icons [0] = createicon (0, !tools_exporting_sprite);
    tools_icons [1] = createicon (1, tools_exporting_sprite);
  }
  else if (toolwindow_current_tool == &tools_grabberpaint)
  { drop_wind = template_syshandle ("tool_grab");
    extend_tools ();
    tools_icons [0] = createicon (0, tools_grabber_wrap);
  }
  else if (toolwindow_current_tool == &tools_spraycanpaint)
  { drop_wind = template_syshandle ("tool_spray");
    extend_tools ();
    tools_icons [0] = createicon (2, 0);
    tools_icons [1] = createicon_ind (0, 0, tools_spray_density, 4,
        onlydigits);
    tools_icons [2] = createicon (3, 0);
    tools_icons [3] = createicon_ind (1, 0, tools_spray_radius, 4,
        onlydigits);
    caretgrab = 1;
  }
  else if (toolwindow_current_tool ==  &tools_brushpaint)
  { drop_wind = template_syshandle ("tool_brush");
    extend_tools ();
    tools_icons [tools_bicon_YScText] = createicon (10, 0);
    tools_icons [tools_bicon_YNScBox] = createicon (6, 0);
    tools_icons [tools_bicon_XScText] = createicon (9, 0);
    tools_icons [tools_bicon_XNScBox] = createicon (3, 0);
    tools_icons [tools_bicon_NameText] = createicon (11, 0);
    tools_icons [tools_bicon_UseNew] = createicon (0, 0);
    tools_icons [tools_bicon_UseGCOL] = createicon (2, tools_brush_use_gcol);
    /* SMC: Look up default brush name in Messages file. */
    tools_icons [tools_bicon_NewName] = createicon_ind(12, 0, msgs_lookup (tools_newbrushsprite), 13, (char *)-1);
    tools_icons [tools_bicon_XNScaleM] = createicon_ind(5, 0, tools_brush_nxscalem, 3, onlydigits);
    tools_icons [tools_bicon_XNScaleD] = createicon_ind(4, 0, tools_brush_nxscaled, 3, onlydigits);
    tools_icons [tools_bicon_YNScaleM] = createicon_ind(7, 0, tools_brush_nyscalem, 3, onlydigits);
    tools_icons [tools_bicon_YNScaleD] = createicon_ind(8, 0, tools_brush_nyscaled, 3, onlydigits);
    strncpy (tools_newbrushsprite, tools_brushsprite, 13);
    strncpy (tools_brush_nxscalem, tools_brush_cxscalem, 3);
    strncpy (tools_brush_nxscaled, tools_brush_cxscaled, 3);
    strncpy (tools_brush_nyscalem, tools_brush_cyscalem, 3);
    strncpy (tools_brush_nyscaled, tools_brush_cyscaled, 3);
    caretgrab = tools_bicon_NewName;

    /* now enable nulls for all sprites */
    menus_restart_tool ();
  }

  if (caretgrab >= 0) set_tool_caret (tools_icons [caretgrab]);
}

static void readscale (char *in, int *res, char *out)

{ sscanf (in, "%d", res);
  if (*res == 0) *res = 1;
  strcpy (out, in);
}

/**********************************************************************
 *                                                                    *
 *  Window event handler for sprite tool windows.                     *
 *                                                                    *
 **********************************************************************/

static void demunge_window (int really)

{ int iconlim = 0;

  if (toolwindow_current_tool == &tools_textpaint)
    iconlim = 8;
  else if (toolwindow_current_tool == &tools_spraycanpaint)
    iconlim = 4;
  else if (toolwindow_current_tool == &tools_brushpaint)
  { iconlim = tools_bicon_Max;
    if (really) psprite_free_brush_blocks ();
  }
  else if (toolwindow_current_tool == &tools_floodfillpaint ||
      toolwindow_current_tool == &tools_scissorpaint ||
      toolwindow_current_tool == &tools_camerapaint)
    iconlim = 2;
  else if (toolwindow_current_tool == &tools_grabberpaint)
    iconlim = 1;

  if (iconlim != 0)
  { int i;

    for (i = 0; i < iconlim; i++)
      wimpt_noerr (wimp_delete_icon (toolwindow_handle, tools_icons [i]));
    drop_wind = &tools_tool_template.t;
    extend_tools ();
  }
}

static void set_tool_window_state (void)

{ int i;

  for (i=1; i <= tools_COUNT; i++)
    wimpt_noerr (wimp_set_icon_state (toolwindow_handle, i,
        toolarray [i] == toolwindow_current_tool?
            wimp_ISELECTED: (wimp_iconflags) 0,
        wimp_ISELECTED));

  for (i=0; i <= 3; i++)
    wimpt_noerr (wimp_set_icon_state (toolwindow_handle,
        i + tools_MODE_ICON_BASE,
        i == toolwindow_current_mode? wimp_ISELECTED: (wimp_iconflags) 0,
        wimp_ISELECTED));

  demunge_window (0);
  munge_window ();
  setdescription ();
}

void toolwindow_stop_all_tools (void)

  /*Stop the tool in all sprite windows. Actually, stop it in all sprite
    blocks, not just those with open windows (J R C, 6th Dec 1993).*/

{ main_window *w;
  main_sprite *s;

  ftracef0 ("toolwindow_stop_all_tools\n");

  for (w = main_windows; w != NULL; w = w->link)
    if (w->tag == main_window_is_file)
      for (s = w->data->file.sprites; s != NULL; s = s->link)
        toolwindow_current_tool->stop_action (s);
}

static void performbrushGOaction (void)

{ main_sprite *newbrushsprite_ptr, *oldbrushsprite_ptr;
  char oldbrushsprite [13];

  ftracef0 ("performbrushGOaction\n");
  oldbrushsprite_ptr = tools_brushsprite_ptr;
  strcpy (oldbrushsprite, tools_brushsprite);

  /* SMC: Look up default brush name in Messages file. */
  if ((newbrushsprite_ptr = psprite_find (msgs_lookup (tools_newbrushsprite), "PntE5a"))
      == NULL)
    return;

  ftracef0 ("calling main_force_redraw\n");
  main_force_redraw (toolwindow_handle);

  tools_remove_brush ();  /* do before corrupting brushsprite_ptr! */

  ftracef0 ("calling psprite_free_brush_blocks\n");
  wimpt_noerr (psprite_free_brush_blocks ());

  tools_brushsprite_ptr = newbrushsprite_ptr;
  strcpy (tools_brushsprite, tools_newbrushsprite);

  ftracef0 ("calling psprite_set_brush_colour_translations\n");
  if (wimpt_complain (psprite_set_brush_colour_translations ()) != NULL)
  { tools_brushsprite_ptr = oldbrushsprite_ptr;
    strcpy (tools_brushsprite, oldbrushsprite);
    wimpt_noerr (psprite_set_brush_colour_translations ());
    return;
  }

  /*Moved to after psprite_set_brush_colour_translations - less state to
    restore. J R C 5th Jul 1994*/
  readscale (tools_brush_nxscalem, &tools_brushscale.scale_xmul,
      tools_brush_cxscalem);
  readscale (tools_brush_nxscaled, &tools_brushscale.scale_xdiv,
      tools_brush_cxscaled);
  readscale (tools_brush_nyscalem, &tools_brushscale.scale_ymul,
      tools_brush_cyscalem);
  readscale (tools_brush_nyscaled, &tools_brushscale.scale_ydiv,
      tools_brush_cyscaled);

  ftracef0 ("calling tools_replace_brush\n");
  tools_replace_brush ();
}

static void sprite_tool_event_handler (wimp_eventstr *e, void *handle)

{ handle = handle;
  switch (e->e)
  { case wimp_EKEY:
      if (e->data.key.chcode == 13)
      { wimp_caretstr caret;
        wimp_get_caret_pos (&caret);
        if (caret.w == toolwindow_handle && caret.i != -1)
        { wimp_icon istate;

          caret.i++;

          while (TRUE)
          { if (wimp_get_icon_info (toolwindow_handle, caret.i, &istate) ||
             (istate.flags & wimp_IDELETED) != 0)
            { if (toolwindow_current_tool == &tools_brushpaint)
                performbrushGOaction ();
              caret.i = 0;
            }
            else if ( (istate.flags & wimp_IBTYPE*15) ==
                wimp_IBTYPE*wimp_BWRITABLE)
            { ftracef1 ("Picked icon %d for caret\n", caret.i);
              set_tool_caret (caret.i);
              break;
            }
            caret.i++;
          }
        }
        else
          ftracef0 ("!!!!!!!!!CR can't have been for us!!!!!!!\n");
      }
      else
        wimp_processkey (e->data.key.chcode);
    break;

    case wimp_EOPEN:
      wimpt_complain (wimp_open_wind (&e->data.o));
    break;

    case wimp_EREDRAW:
    { int more;
      wimp_redrawstr rds;

      rds.w = e->data.o.w;
      wimpt_noerr (wimp_redraw_wind (&rds, &more));
      while (more)
        wimpt_noerr (wimp_get_rectangle (&rds, &more));
    }
    break;

    case wimp_EBUT:
      if (e->data.but.m.bbits & 5)
        /* have to let ADJUST through cos wimp is dumb */
      { ftracef1 ("Icon %d clicked\n", e->data.but.m.i);

        /*Wind up the previous tool, if it needs it.*/
        if (toolwindow_current_tool == &tools_brushpaint)
        { if (e->data.but.m.i == tools_icons [tools_bicon_UseNew])
          { wimp_icon i;
            wimpt_noerr (wimp_get_icon_info (toolwindow_handle,
                      tools_icons [tools_bicon_UseGCOL], &i));

            tools_brush_use_gcol = (i.flags & wimp_ISELECTED) != 0;

            performbrushGOaction ();
          }
        }
        else if (toolwindow_current_tool == &tools_floodfillpaint)
        { wimp_icon i;
          wimpt_noerr (wimp_get_icon_info (toolwindow_handle,
              tools_icons [0], &i));

          tools_flood_local = (i.flags & wimp_ISELECTED) != 0;
        }
        else if (toolwindow_current_tool == &tools_scissorpaint ||
            toolwindow_current_tool == &tools_camerapaint)
        { wimp_icon i;
          BOOL oldstate = tools_exporting_sprite;
          wimpt_noerr (wimp_get_icon_info (toolwindow_handle,
              tools_icons [1], &i));

          tools_exporting_sprite = (i.flags & wimp_ISELECTED) != 0;
          if (tools_exporting_sprite != oldstate)
            toolwindow_stop_all_tools ();
        }
        else if (toolwindow_current_tool == &tools_grabberpaint)
        { wimp_icon i;
          wimpt_noerr (wimp_get_icon_info (toolwindow_handle,
              tools_icons [0], &i));
          tools_grabber_wrap = (i.flags & wimp_ISELECTED) != 0;
        }

        /*Set up the new tool.*/
        if (e->data.but.m.i > 0 && e->data.but.m.i < tools_COUNT)
        { demunge_window (1);
          toolwindow_stop_all_tools ();

          toolwindow_current_tool = toolarray [e->data.but.m.i];

          if (toolwindow_current_tool == &tools_textpaint)
            tools_get_default_text_size ();

          wimpt_noerr (wimp_set_icon_state (toolwindow_handle,
              e->data.but.m.i, wimp_ISELECTED, wimp_ISELECTED));
            /* might have been ADJUST: make sure icon selected */
          setdescription ();

          /* SMC: Now look up brush name in Messages file. */
          if (toolwindow_current_tool == &tools_brushpaint &&
              (tools_brushsprite_ptr =
              psprite_find (msgs_lookup (tools_brushsprite), NULL)) != NULL)
            psprite_set_brush_colour_translations ();

          munge_window ();
        }
        else if (e->data.but.m.i >= tools_MODE_ICON_BASE &&
            e->data.but.m.i < tools_MODE_ICON_BASE + 4)
        { toolwindow_current_mode = e->data.but.m.i - tools_MODE_ICON_BASE;
          ftracef1 ("Selected %s mode\n",
              toolwindow_current_mode == 0? "Set":
              toolwindow_current_mode == 1? "OR":
              toolwindow_current_mode == 2? "AND":
              toolwindow_current_mode == 3? "EOR": "*** BUG!!! ***");
          wimpt_noerr (wimp_set_icon_state (toolwindow_handle,
              e->data.but.m.i, wimp_ISELECTED, wimp_ISELECTED));
              /*might have been ADJUST: make sure icon selected*/
        }
        else if (toolwindow_current_tool != &tools_grabberpaint &&
            e->data.but.m.i >= tools_MODE_ICON_BASE + 4 &&
            e->data.but.m.i < tools_MODE_ICON_BASE + 6)
        { ftracef1 ("Selected %s mode\n",
              e->data.but.m.i == tools_MODE_ICON_BASE + 4? "Local":
              "Export");
          wimpt_noerr (wimp_set_icon_state (toolwindow_handle,
              e->data.but.m.i, wimp_ISELECTED, wimp_ISELECTED));
               /*might have been ADJUST: make sure icon selected*/
        }
      }
    break;

    case wimp_ECLOSE:
      ftracef0 ("Close tool window\n");
      demunge_window (0);
      main_delete_window (toolwindow_handle);
      toolwindow_handle = 0;
      main_current_options.tools.show_tools = FALSE;
    break;

    case wimp_ESEND:
    case wimp_ESENDWANTACK:
      if (e->data.msg.hdr.action == wimp_MHELPREQUEST)
      { wimp_mousestr m;

        static char *Tokens [] =
          { "PntHT1", "PntHT2", "PntHTD", "PntHT7", "PntHTF",
            "PntHTJ", "PntHTE", "PntHTI", "PntHTA", "PntHTG",
            "PntHTK", "PntHTL", "PntHT4", "PntHT5", "PntHTH",
            "PntHT6", "PntHTB", "PntHT8", "PntHTC", "PntHT9",
            "PntHT3",     NULL,     NULL, "PntHTM", "PntHTN",
            "PntHTO", "PntHTP"
          };

        ftracef1 ("Help request on tool window: %d\n",
            e->data.msg.data.helprequest.m.i);
        wimpt_complain (wimp_get_point_info (&m));

        main_help_message
        ( 1 <= m.i && m.i <= 27 && Tokens [m.i - 1] != NULL?
            Tokens [m.i - 1]:
            "PntH1",
          e
        );
      }
    break;
  }

  menus_insdel_frig ();
}


/****************************************************
 *   Close tool window without affecting options    *
 ****************************************************/

extern void toolwindow_close ( void )

{ ftracef0 ("Called user function to close tool window\n");

  if (toolwindow_handle != NULL) /* ie: if it is open */
  { if (main_windows->link == NULL) /* only close if there are no active
        windows */
    { demunge_window (0);
      main_delete_window (toolwindow_handle);
      toolwindow_handle = 0;
    }
  }
}


/****************************************************
 *  Force display of sprite tool window             *
 ****************************************************/

void toolwindow_display (BOOL atpointer)

{ wimp_openstr  wopener;
  wimp_mousestr mouse;

  if (toolwindow_handle == 0)
  { ftracef0 ("Create tool window\n");
    if (main_create_window (&tools_tool_template.t, &toolwindow_handle,
        &sprite_tool_event_handler, NULL) == 0)
      return; /* Failed to create it */

    wopener.w = toolwindow_handle;

    if (atpointer)
    { /* Open window under pointer */
      wimpt_noerr (wimp_get_point_info (&mouse));
      wopener.box.x1  = (tools_tool_template.t.box.x1 -
          tools_tool_template.t.box.x0)/2;
      wopener.box.x0  = mouse.x - wopener.box.x1;
      wopener.box.x1 += mouse.x;
      wopener.box.y1  = (tools_tool_template.t.box.y1 -
          tools_tool_template.t.box.y0)/2;
      wopener.box.y0  = mouse.y - wopener.box.y1;
      wopener.box.y1 += mouse.y;
    }
    else
      wopener.box = tools_tool_template.t.box;

    wopener.behind = -1;
    wopener.x = 0;
    wopener.y = 0;

    if (wimpt_complain (wimp_open_wind (&wopener)) == 0)
    { /* Window opened OK - set it up */
      munge_window ();
      set_tool_window_state ();
      ftracef0 ("Opened tool window\n");
    }
    /* else: failed to open: leave window existent but undisplayed */
  }
  else
  {  /* if it is already open then bring it to the front */
    wimp_wstate tool_state;
    wimpt_noerr (wimp_get_wind_state (toolwindow_handle, &tool_state));
    tool_state.o.behind = -1;
    wimpt_noerr (wimp_open_wind (&tool_state.o));
  }
}

void toolwindow_init (void)

{ toolwindow_handle = 0;
  toolwindow_current_tool   = &tools_pixelpaint;
  init_toolarray ();
}
