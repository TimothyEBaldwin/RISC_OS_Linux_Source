/* Copyright 2007 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <swis.h>
#include <string.h>
#include "os.h"
#include "bbc.h"
#include "wimpt.h"
#include "werr.h"
#include "sprite.h"

#include "AltRename.h"
#include "PSprite.h"
#include "PaintLib.h"
#include "main.h"
#include "SprWindow.h"
#include "ToolWindow.h"
#include "akbd.h"

static wimp_i        rename_icon = -1;
static char          rename_buffer[16];
static main_window  *rename_window;
static main_sprite  *rename_sprite;
static wimp_box      rename_bbox;
static int           rename_sprites_per_row;

static void altrename_renamesprite (main_sprite *sprite, char *newname)

{ sprite_id sid;
  char name[NAME_LIMIT+1];
  sid.tag = sprite_id_name; /*doesn't flex*/
  sid.s.name = newname;

  if (*newname == 0) return;

  strncpy (name, psprite_address (sprite)->name, NAME_LIMIT);
  name[NAME_LIMIT] = 0;
  sid.s.name = name;
  if (wimpt_complain (sprite_rename
      (sprite->file->spritearea, &sid, newname)) !=
      NULL) return;

  main_set_modified (sprite->file);
  sprwindow_set_window_titles (sprite);

  /* rename must reset the titles of all the windows open on
    the sprite */
  if (sprite->colourdialogue != NULL)
  { char new_title [128];
    colourpicker_dialogue dialogue;

    dialogue.title = new_title;
    sprintf (new_title, msgs_lookup ("PntW7"), newname);
    ftracef0 ("ColourPicker_UpdateDialogue: setting new title");
    wimpt_complain (os_swix3 (ColourPicker_UpdateDialogue,
        colourpicker_UPDATE_TITLE, sprite->colourdialogue,
        &dialogue));
  }
  else if (sprite->colourhandle != NULL)
  { wimp_winfo winfo;
    wimp_redrawstr redraw_str;
    wimp_wstate wstate;

    winfo.w = sprite->colourhandle;
    wimpt_noerr (paintlib_get_wind_info (&winfo));

    sprintf (winfo.info.title.indirecttext.buffer,
        msgs_lookup ("PntW7"), newname);

    /*Force redraw of the title bar.*/
    wimpt_noerr (wimp_get_wind_state
        (sprite->colourhandle, &wstate));

    redraw_str.w = sprite->colourhandle;
    wimpt_noerr (wimp_getwindowoutline (&redraw_str));

    redraw_str.w = -1;
    redraw_str.box.y0 = wstate.o.box.y1;
    wimpt_noerr (wimp_force_redraw (&redraw_str));
  }
  if (sprite->bgcolourdialogue != NULL)
  { char new_title [128];
    colourpicker_dialogue dialogue;

    dialogue.title = new_title;
    sprintf (new_title, msgs_lookup ("PntWF"), newname);
    ftracef0 ("ColourPicker_UpdateDialogue: setting new bgcolour title");
    wimpt_complain (os_swix3 (ColourPicker_UpdateDialogue,
        colourpicker_UPDATE_TITLE, sprite->bgcolourdialogue,
        &dialogue));
  }

  /* Check if we just renamed a brush sprite as well */
  toolwindow_brush_check_rename (sprite, newname);
}

void altrename_delete (void)

{ wimp_redrawstr ds;

  if (!rename_window) return;
  wimp_delete_icon (rename_window->handle, rename_icon);
  ds.w = rename_window->handle;
  ds.box = rename_bbox;
  wimp_force_redraw (&ds);

  rename_window = NULL;
}

static int altrename_sprites_per_row (int *toggled)

{ wimp_wstate ws;
  int width;

  if (!rename_window) return 0;

  if (rename_window->data->file.fullinfo)
    width = main_FILER_FullInfoWidth;
  else
    width = main_FILER_TotalWidth;

  wimp_get_wind_state(rename_window->handle, &ws);

  if (toggled) *toggled = (ws.flags & wimp_WCLICK_TOGGLE);

  width = (ws.o.box.x1-ws.o.box.x0)/width;

  return width ? width : 1;
}

void altrename_start (main_window *window, main_sprite *sprite)

{ wimp_box bbox;
  psprite_info sinfo;
  wimp_icreate icon;
  wimp_wstate ws;
  int y, scy;
  wimp_redrawstr ds;
  wimp_caretstr  caret;

  if (!window || !sprite) return;
  if (window==rename_window && sprite==rename_sprite) return;

  altrename_delete();

  if (!main_get_all_sprite_bboxes (window, sprite, &bbox, 0, &icon.i.box))
    return;

  if (window->data->file.fullinfo)
    icon.i.box.x1 = icon.i.box.x0+12*main_FILER_TextWidth;
  else
  { icon.i.box.x0 = bbox.x0;
    icon.i.box.x1 = bbox.x1;
  }

  icon.w = window->handle;
  icon.i.flags = (wimp_iconflags)(wimp_ITEXT | wimp_INDIRECT | wimp_IHCENTRE |
                                 wimp_IFILLED | wimp_IBORDER |
                                 (7 * wimp_IFORECOL) | (0 * wimp_IBACKCOL) |
                                 (wimp_BWRITABLE * wimp_IBTYPE));

  icon.i.data.indirecttext.buffer = rename_buffer;
  icon.i.data.indirecttext.validstring = "";
  icon.i.data.indirecttext.bufflen = NAME_LIMIT+1;
  psprite_read_full_info (sprite, &sinfo);
  strcpy (rename_buffer, sinfo.name);

  if (wimpt_complain (wimp_create_icon (&icon, &rename_icon))) return;

  rename_window = window;
  rename_sprite = sprite;
  ds.w = icon.w;
  ds.box = icon.i.box;
  rename_bbox = ds.box;
  rename_sprites_per_row = altrename_sprites_per_row (0);
  caret.w = window->handle;
  caret.i = rename_icon;
  caret.x = caret.y = 0;
  caret.height = -1;
  caret.index = strlen (sinfo.name);
  wimp_set_caret_pos (&caret);
  wimp_force_redraw (&ds);
  wimp_get_wind_state (window->handle,&ws);

  scy = ws.o.y;
  y = WORKAREA_TO_SCREEN_Y(&ws, bbox.y1);
  if (y>ws.o.box.y1)
    ws.o.y += (y-ws.o.box.y1);

  y = WORKAREA_TO_SCREEN_Y(&ws, bbox.y0);
  if (y<ws.o.box.y0)
    ws.o.y += (y-ws.o.box.y0);

  if (scy != ws.o.y) wimp_open_wind (&ws.o);
}

BOOL altrename_claim_event (wimp_eventstr *e, main_window *window)

{ if (!rename_window) return FALSE;
  switch (e->e)
  {
    case wimp_EBUT:
      if (window->handle!=rename_window->handle ||
          (e->data.but.m.bbits & wimp_BMID))
      { altrename_delete ();
        break;
      }
      if ( e->data.but.m.i==rename_icon &&
           window->handle==rename_window->handle) return TRUE;

      if (e->data.but.m.bbits & (wimp_BCLICKLEFT | wimp_BCLICKRIGHT))
      { altrename_delete ();
        break;
      }
      return TRUE;

    case wimp_EOPEN:
    { int wid;
      if (window->handle==rename_window->handle)
      { int toggled;
        wid = altrename_sprites_per_row (&toggled);
        if (wid != rename_sprites_per_row || toggled)
          altrename_delete();
      }
      break;
    }

    case wimp_EKEY:
      if (window->handle!=rename_window->handle) break;
      switch (e->data.key.chcode)
      {
        case 13:
          altrename_renamesprite (rename_sprite, rename_buffer);
          if (!akbd_pollctl ())
          { altrename_delete ();
            break;
          }
          /*fall through*/

        case 0x18A: /* TAB -  next sprite */
          { main_sprite *sprite=rename_sprite->link;
            if (sprite==0) sprite=rename_window->data->file.sprites;
            altrename_start (rename_window, sprite);
          }
          break;

        case 0x19A: /* Shift TAB -  previous sprite */
          { main_sprite *sprite=rename_sprite;
            for (sprite = rename_window->data->file.sprites;
                 !(sprite->link == NULL || sprite->link == rename_sprite);
                 sprite = sprite->link);
            altrename_start (rename_window, sprite);
          }
          break;
      }
  }
  return FALSE;
}
