REM Copyright 2012 Castle Technology Ltd
REM
REM Licensed under the Apache License, Version 2.0 (the "License");
REM you may not use this file except in compliance with the License.
REM You may obtain a copy of the License at
REM
REM     http://www.apache.org/licenses/LICENSE-2.0
REM
REM Unless required by applicable law or agreed to in writing, software
REM distributed under the License is distributed on an "AS IS" BASIS,
REM WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
REM See the License for the specific language governing permissions and
REM limitations under the License.
REM
REM > Dialogues

REM *************************************************************************
REM Alarm window
REM *************************************************************************

DEFPROCcreate_alarm_wind(t$,W%,I%)
 LOCAL E%,F%,B%
 REM IFFNcheck_pointer PROCcheck_pointer(I%,"PROCcreate_alarm_wind")
 B%=(1<<21)+(15<<12)
 IF I%?alarm_applalarm% W%=FALSE
 IF W% F%=15<<12:E%=11<<12 ELSE F%=0:E%=0
 PROCset_title(a_wind%,t$)
 
 PROCrefresh_alarm_window(a_wind%,I%)
 
 IF I%?alarm_applalarm% THEN
  PROCset_string(a_wind%,ic_alarm_line1%,FNmsg_0("ActvA5"))
  PROCset_string(a_wind%,ic_alarm_line2%,$(I%+alarm_line1%))
  PROCset_string(a_wind%,ic_alarm_line3%,"")
 ELSE
  PROCset_string(a_wind%,ic_alarm_line1%,$(I%+alarm_line1%))
  PROCset_string(a_wind%,ic_alarm_line2%,$(I%+alarm_line2%))
  PROCset_string(a_wind%,ic_alarm_line3%,$(I%+alarm_line3%))
 ENDIF
 PROCsetstate(a_wind%,ic_alarm_line1%,F%,15<<12)
 PROCsetstate(a_wind%,ic_alarm_line2%,F%,15<<12)
 PROCsetstate(a_wind%,ic_alarm_line3%,F%,15<<12)

 PROCsetstate(a_wind%,ic_alarm_urgent%,E%,B%)
 IF I%?alarm_urgent% PROCsetstate(a_wind%,ic_alarm_urgent%,1<<21,0)

 PROCsetstate(a_wind%,ic_alarm_repeat%,E%,B%)

 PROCsetstate(a_wind%,ic_alarm_every%,E%,B%)

 PROCsetstate(a_wind%,ic_alarm_onthe%,E%,B%)
 PROCset_repeat_flags(W%,I%)

 PROCsetstate(a_wind%,ic_alarm_task%,E%,B%)
 IF I%?alarm_taskalarm% THEN
  PROCsetstate(a_wind%,ic_alarm_task%,1<<21,0)
  REM disable urgent button if task alarm
  PROCsetstate(a_wind%,ic_alarm_urgent%,1<<22,1<<22)
 ELSE
  REM enable urgent button if not task alarm
  PROCsetstate(a_wind%,ic_alarm_urgent%,0,1<<22)
 ENDIF

 PROCsetstate(a_wind%,ic_alarm_wweek%,E%,B%)
 IF I%?alarm_fvdywk% PROCsetstate(a_wind%,ic_alarm_wweek%,1<<21,0)
ENDPROC
:
DEFPROCopen_alarm_wind
 LOCAL Y%,X%
 REM IFFNcheck_pointer PROCcheck_pointer(alarms%(0),"PROCopen_alarm_wind")

 !Q%=a_wind%:SYS"Wimp_GetWindowState",,Q%
 IF(Q%!32 AND (1<<16))=0 THEN
  REM window was already closed,
  REM so we can quite happily move it
  !Q1%=-2
  SYS"Wimp_GetWindowState",,Q1%
  Y%=Q1%!4-Q1%!20
  !Q1%=-2:Q1%!4=ictime%
  SYS"Wimp_GetIconState",,Q1%
  REM open it left and up a bit from the time icon
  X%=Y%+Q1%!16-832
  Q%!12=(Q%!12-Q%!4)+X%
  Q%!16=524+140 : REM Template min y + iconbar + margin
  Q%!8=140
  Q%!4=X%
  Q%!20=0
  Q%!24=0
 ELSE
  REM unpin
  PROCtell_pinboard(a_wind%)
 ENDIF
 REM we want to force it to the top
 Q%!28=-1
 SYS"Wimp_OpenWindow",,Q%
 PROCtoggle_alarm_size(alarm_repeating%?alarms%(0)<>0)
ENDPROC
:
DEF PROCtoggle_alarm_size(flag%)
 LOCAL size_x%,size_y%
 LOCAL eor%,mask%,H%,L%
 
 mask% =128 +(1 <<23) : REM Delete and help redraw
 Q%!&100 =a_wind%
 SYS"Wimp_GetWindowInfo",,(Q%+&100) OR 1

 IF flag% =FALSE THEN
  REM Shrink to nothing. The wimp will sort out the mess, by using
  REM the window's minimum size.
  Q%!(&100 +4 +8) =0 :REM Visible area maximum X
  Q%!(&100 +4 +4) =Q%!(&100 +4 +12) :REM Visible area minimum Y = max Y

  REM Hide the repeating alarm icons which would obscure the ok/cancel buttons
  eor% =128 +(1 <<23)
  H%=0
  L%=mask%
 ELSE
  Q%!0 =a_wind%
  SYS"Wimp_GetWindowInfo",,Q% OR 1
  size_x% =Q%!(&100 +4 +48) -Q%!(&100 +4 +40) :REM Work area max X - min X
  size_y% =Q%!(&100 +4 +52) -Q%!(&100 +4 +44) :REM Work area max Y - min Y
  Q%!(&100 +4 +8) = Q%!(&100 +4 +0) +size_x% :REM Visible area max X = min X + size_x%
  Q%!(&100 +4 +4) = Q%!(&100 +4 +12) -size_y% :REM Visible area min Y = max Y - size_y%

  REM Show the repeating alarm icons
  eor% =0
  H%=mask%
  L%=0
 ENDIF
 PROCsetstate(a_wind%,ic_alarm_ok_hi%,H%,mask%)
 PROCsetstate(a_wind%,ic_alarm_cancel_hi%,H%,mask%)
 PROCsetstate(a_wind%,ic_alarm_cancel_lo%,L%,mask%)
 PROCsetstate(a_wind%,ic_alarm_ok_lo%,L%,mask%)
 PROCsetstate(a_wind%,ic_alarm_every%,eor%,mask%)
 PROCsetstate(a_wind%,ic_alarm_every_many%,eor%,mask%)
 PROCsetstate(a_wind%,ic_alarm_adj_repu%,eor%,mask%)
 PROCsetstate(a_wind%,ic_alarm_adj_repd%,eor%,mask%)
 PROCsetstate(a_wind%,ic_alarm_every_mins%,eor%,mask%)
 PROCsetstate(a_wind%,ic_alarm_every_hours%,eor%,mask%)

 SYS"Wimp_OpenWindow",,Q%+&100

 REM Forcing window on screen by closing & re-opening it will cause
 REM flicker if it's not needed. So we check if it's offscreen
 REM first.
 IF FNoffscreen(a_wind%) THEN PROCforce_onscreen(a_wind%)
ENDPROC
:
DEFPROCrefresh_alarm_window(H%,I%)
 REM IFFNcheck_pointer PROCcheck_pointer(I%,"PROCrefresh_alarm_window")
 PROCset_string(H%,2,FNyear(I%))
 PROCset_string(H%,47,FNmonth(I%))
 PROCset_string(H%,46,FNdow(I%))
 PROCset_string(H%,7,FNday(I%))
 PROCset_string(H%,11,FNhour(I%))
 PROCset_string(H%,14,FNmin(I%))
 PROCset_string(H%,48,FNam(I%))

 PROCalarm_rec_to_fivebt(I%,buffers%)
 ?cur_time% =3
 SYS"OS_Word",14,cur_time%
 REM zero out seconds, so difference seems sensible
 SYS"Territory_ConvertTimeToOrdinals",-1,cur_time%,cur_ordinals%
 cur_ordinals%!0 =0 :REM cs
 cur_ordinals%!4 =0 :REM s
 SYS"Territory_ConvertOrdinalsToTime",-1,cur_time%,cur_ordinals%

 PROCtime_diff(cur_time%,buffers%,sign%,yr_dif%,day_dif%,hr_dif%,min_dif%)

 IF sign% =-1 THEN PROCset_string(H%,53,"-") ELSE PROCset_string(H%,53,"+")

 PROCset_string(H%,51,STR$(yr_dif%))
 PROCset_string(H%,52,STR$(day_dif%))
 PROCset_string(H%,50,STR$(hr_dif%))
 PROCset_string(H%,49,RIGHT$("0"+STR$(min_dif%),2))
ENDPROC
:
DEFPROCselect_all_alarms
 LOCAL C%
 C%=alarm_head%
 WHILE C%
  REM IFFNcheck_pointer PROCcheck_pointer(C%,"PROCselect_all_alarms")
  IFC%?alarm_applalarm%=0 C%?alarm_selected%=1
  C%=C%!alarm_next%
 ENDWHILE
 !Q%=browser%
 Q%!4=0
 Q%!8=-(alarm_count%*48+52)
 Q%!12=assembler%!16
 Q%!16=0
 SYS"Wimp_ForceRedraw",!Q%,Q%!4,Q%!8,Q%!12,Q%!16
ENDPROC
:
DEFPROCunset_alarms_selection
 LOCAL p%
 p%=alarm_head%
 WHILE p%
  REM IFFNcheck_pointer PROCcheck_pointer(p%,"PROCunset_alarms_selection")
  IFp%?alarm_selected% p%?alarm_selected%=0
  p%=p%!alarm_next%
 ENDWHILE
 !Q%=browser%
 Q%!4=0
 Q%!8=-(alarm_count%*48+52)
 Q%!12=assembler%!16
 Q%!16=0
 SYS"Wimp_ForceRedraw",!Q%,Q%!4,Q%!8,Q%!12,Q%!16
ENDPROC
:
DEFPROCopen_top_pane(block%,handle%)
 REM open a pane window at the top of an edit window
 REM this routine uses the block passed to it, so it
 REM is necessary to save any values which get corrupted
 REM by this routine.
 LOCAL h%,y%,x1%,x2%,sx%,sy%
 h%=!block%
 y%=block%!8
 x1%=block%!4
 x2%=block%!12
 sx%=block%!20
 sy%=block%!24
 REM now adjust the parameters
 REM specify the pane window to be opened
 !block%=handle%
 REM make the pane open just below the edit window
 block%!8=block%!16-52:REM pane_height%
 REM don't allow the pane window to scroll
 block%!20=0
 block%!24=0
 SYS"Wimp_OpenWindow",,block%
 !block%=h%
 block%!4=x1%
 block%!12=x2%
 block%!8=y%
 block%!20=sx%
 block%!24=sy%
ENDPROC
:
DEFPROCredraw_alarm(pointer%)
 LOCAL p%,y%
 p%=alarm_head%
 y%=-52
 WHILE p%
  IFp%=pointer% THEN
   !Q%=browser%
   Q%!4=0
   Q%!8=y%-48
   Q%!12=assembler%!16
   Q%!16=y%
   SYS"Wimp_ForceRedraw",!Q%,Q%!4,Q%!8,Q%!12,Q%!16
   p%=0
  ENDIF
  y%-=48
  IFp% p%=p%!alarm_next%
 ENDWHILE
ENDPROC
:
DEFFNalarm_selection_count
 LOCAL m2%,m3%
 m3%=0
 m2%=alarm_head%
 WHILE m2% AND m3%<2
  REM IFFNcheck_pointer PROCcheck_pointer(m2%,"FNalarm_selection_count")
  IFm2%?alarm_selected% m3%+=1
  m2%=m2%!alarm_next%
 ENDWHILE
=m3%

REM *************************************************************************
REM Setup window
REM *************************************************************************

DEFPROCopen_setup
 LOCAL Y%,X%
 REM ensure that the window has the right settings
 IFsilent_alarm% THEN
  PROCsetstate(setup%,ic_setup_silent%,1<<21,1<<21)
 ELSE
  PROCsetstate(setup%,ic_setup_silent%,0,1<<21)
 ENDIF
 IFfivedayweek% THEN
  PROCsetstate(setup%,ic_setup_working_week%,1<<21,1<<21)
  Y%=0
 ELSE
  PROCsetstate(setup%,ic_setup_working_week%,0,1<<21)
  Y%=1<<22
 ENDIF
 FORX%=0 TO 6
  IFFNvalid_day(X%+1) THEN
   PROCsetstate(setup%,ic_setup_sun%+X%,Y%+(1<<21),3<<21)
  ELSE
   PROCsetstate(setup%,ic_setup_sun%+X%,Y%,3<<21)
  ENDIF
 NEXT
 IFglobal_timeout%=-1 THEN
  PROCsetstate(setup%,ic_setup_cont_beep%,1<<21,1<<21)
  PROCsetstate(setup%,ic_setup_beep_off%,0,1<<21)
  PROCsetstate(setup%,ic_setup_beep_time%,1<<22,1<<22)
  PROCsetstate(setup%,ic_setup_seconds_label%,1<<22,1<<22)
 ELSE
  PROCsetstate(setup%,ic_setup_cont_beep%,0,1<<21)
  PROCsetstate(setup%,ic_setup_beep_off%,1<<21,1<<21)
  PROCset_string(setup%,ic_setup_beep_time%,STR$(global_timeout%))
  PROCsetstate(setup%,ic_setup_beep_time%,0,1<<22)
  PROCsetstate(setup%,ic_setup_seconds_label%,0,1<<22)
 ENDIF
 IFalarm_autosave% THEN
  PROCsetstate(setup%,ic_setup_auto_database%,1<<21,1<<21)
 ELSE
  PROCsetstate(setup%,ic_setup_auto_database%,0,1<<21)
 ENDIF
 IFalarm_confirm% THEN
  PROCsetstate(setup%,ic_setup_confirm_del%,1<<21,1<<21)
 ELSE
  PROCsetstate(setup%,ic_setup_confirm_del%,0,1<<21)
 ENDIF
 PROCset_string(setup%,ic_setup_user_string%,userformat$)
 FORX%=0 TO 4
  REM Display format radio icons
  IFformat%=(X%+1) THEN
   PROCsetstate(setup%,ic_setup_analogue_ws%+X%,1<<21,1<<21)
  ELSE
   PROCsetstate(setup%,ic_setup_analogue_ws%+X%,0,1<<21)
  ENDIF
 NEXT
 IFformat%<>5 THEN
  PROCsetstate(setup%,ic_setup_user_string%,1<<22,1<<22)
 ELSE
  PROCsetstate(setup%,ic_setup_user_string%,0,1<<21)
 ENDIF
 !Q%=setup%:SYS"Wimp_GetWindowState",,Q%
 IF(Q%!32 AND (1<<16))=0 THEN
  REM window was already closed,
  REM so we can quite happily move it
  !Q1%=-2
  SYS"Wimp_GetWindowState",,Q1%
  Y%=Q1%!4-Q1%!20
  !Q1%=-2:Q1%!4=ictime%
  SYS"Wimp_GetIconState",,Q1%
  REM open it left and up a bit from the time icon
  X%=Y%+Q1%!16-1012
  Q%!12=(Q%!12-Q%!4)+X%
  Q%!16=738+140 : REM Template min y + iconbar + margin
  Q%!8=140
  Q%!4=X%
  Q%!20=0
  Q%!24=0
 ELSE
  REM unpin
  PROCtell_pinboard(setup%)
 ENDIF
 REM we want to force it to the top
 Q%!28=-1
 SYS"Wimp_OpenWindow",,Q%
 IFglobal_timeout%<>-1 THEN
  SYS"Wimp_SetCaretPosition",setup%,ic_setup_beep_time%,-1,-1,-1,LEN(FNread_string(setup%,ic_setup_beep_time%))
 ELSE
  IFformat%=5 THEN
   REM User format
   SYS"Wimp_SetCaretPosition",setup%,ic_setup_user_string%,-1,-1,-1,LEN(FNread_string(setup%,ic_setup_user_string%))
  ELSE
   REM Invisible caret please
   SYS"Wimp_SetCaretPosition",setup%,-1,,,1<<25
  ENDIF
 ENDIF
ENDPROC
:
DEFPROCcheck_setup_window(P%,M%,I%)
 LOCAL i%
 CASE I% OF
 WHEN ic_setup_working_week%:
         FORi%=0 TO 6
          REM Shading of the working week
          IFFNicon_set(setup%,ic_setup_working_week%) THEN
           PROCsetstate(setup%,ic_setup_sun%+i%,0,1<<22)
          ELSE
           PROCsetstate(setup%,ic_setup_sun%+i%,1<<22,1<<22)
          ENDIF
         NEXT
 WHEN           ic_setup_ok%:PROCok_save_setup(P%) : ENDPROC
 WHEN       ic_setup_cancel%:cancel%=TRUE : PROCclosewindow(setup%) : ENDPROC
 WHEN  ic_setup_analogue_ws%:PROCsetstate(setup%,I%,1<<21,1<<21)
 WHEN ic_setup_analogue_wos%:PROCsetstate(setup%,I%,1<<21,1<<21)
 WHEN        ic_setup_hh_mm%:PROCsetstate(setup%,I%,1<<21,1<<21)
 WHEN     ic_setup_hh_mm_ss%:PROCsetstate(setup%,I%,1<<21,1<<21)
 WHEN     ic_setup_user_def%:PROCsetstate(setup%,I%,1<<21,1<<21)
                             PROCsetstate(setup%,ic_setup_user_string%,0,1<<22)
 WHEN    ic_setup_cont_beep%:PROCsetstate(setup%,I%,1<<21,1<<21)
                             PROCsetstate(setup%,ic_setup_beep_time%,1<<22,1<<22)
                             PROCsetstate(setup%,ic_setup_seconds_label%,1<<22,1<<22)
 WHEN     ic_setup_beep_off%:PROCsetstate(setup%,I%,1<<21,1<<21)
                             PROCsetstate(setup%,ic_setup_beep_time%,0,1<<22)
                             PROCsetstate(setup%,ic_setup_seconds_label%,0,1<<22)
 ENDCASE
 IF (I% >= ic_setup_analogue_ws%) AND (I% <= ic_setup_hh_mm_ss%) THEN
  PROCsetstate(setup%,ic_setup_user_string%,1<<22,1<<22)
 ENDIF

 REM Reevaluate where the caret should be
 IFFNicon_set(setup%,ic_setup_beep_off%) THEN
  SYS"Wimp_SetCaretPosition",setup%,ic_setup_beep_time%,-1,-1,-1,LEN(FNread_string(setup%,ic_setup_beep_time%))
 ELSE
  IFFNicon_set(setup%,ic_setup_user_def%) THEN
   REM User format
   SYS"Wimp_SetCaretPosition",setup%,ic_setup_user_string%,-1,-1,-1,LEN(FNread_string(setup%,ic_setup_user_string%))
  ELSE
   REM Invisible caret please
   SYS"Wimp_SetCaretPosition",setup%,-1,,,1<<25
  ENDIF
 ENDIF
ENDPROC
:
DEFPROCok_save_setup(P%)
 LOCAL j%,i%
 silent_alarm%=FNicon_set(setup%,ic_setup_silent%)
 fivedayweek%=FNicon_set(setup%,ic_setup_working_week%)
 j%=0
 FORi%=0 TO 6
  IFFNicon_set(setup%,ic_setup_sun%+i%) j%+=(1<<i%)
 NEXT
 IFj%=0 THEN
  PROCok(FNmsg_0("OkayC9"))
 ELSE
  global_weekwork%=j%
 ENDIF
 IFFNicon_set(setup%,ic_setup_cont_beep%) THEN
  global_timeout%=-1
 ELSE
  global_timeout%=VAL(FNread_string(setup%,ic_setup_beep_time%))
 ENDIF
 IFalarm_autosave%<>FNicon_set(setup%,ic_setup_auto_database%) THEN
  alarm_autosave%=FNicon_set(setup%,ic_setup_auto_database%)
  IFalarm_autosave% THEN
   REM changing from FALSE to TRUE, so save the database
   IFmodified% AND ra$<>"" PROCsave_alarms_to_disc(ra$,FALSE,TRUE,TRUE):autosaved%=FALSE
  ELSE
   REM changing from TRUE to FALSE, clear autosaved flag
   autosaved%=FALSE
  ENDIF
 ENDIF
 alarm_confirm%=FNicon_set(setup%,ic_setup_confirm_del%)
 PROCreset_alarm_status
 IFFNicon_set(setup%,ic_setup_analogue_ws%) THEN
  IFformat%<>1 PROCset_format(1)
 ELSE
  IFFNicon_set(setup%,ic_setup_analogue_wos%) THEN
   IFformat%<>2 PROCset_format(2)
  ELSE
   IFFNicon_set(setup%,ic_setup_hh_mm%) THEN
    IFformat%<>3 PROCset_format(3)
   ELSE
    IFFNicon_set(setup%,ic_setup_hh_mm_ss%) THEN
     IFformat%<>4 PROCset_format(4)
    ELSE
     IFFNicon_set(setup%,ic_setup_user_def%) THEN
      IFformat%<>5 OR userformat$<>FNread_string(setup%,ic_setup_user_string%) THEN
       userformat$=FNread_string(setup%,ic_setup_user_string%)
       IFFNwidth(userformat$)>80 THEN
        PROCformat_error(FNmsg_0("FrmtA2"))
       ELSE
        IFFNwidth(userformat$)<1 THEN
         PROCformat_error(FNmsg_0("FrmtA3"))
        ELSE
         PROCset_format(5)
        ENDIF
       ENDIF
      ENDIF
     ENDIF
    ENDIF
   ENDIF
  ENDIF
 ENDIF
 REM only close the window if SELECT was used
 IFP%=1 THEN !Q%=setup%:SYS"Wimp_SetCaretPosition",-1,-1:SYS"Wimp_CloseWindow",,Q%
 PROCsave_config
ENDPROC

REM *************************************************************************
REM Browser window
REM *************************************************************************

DEFPROCopen_browser
 LOCAL Y%,X%,W%,s$
 !Q%=browser%:SYS"Wimp_GetWindowInfo",,Q%
 !Q1%=browser%:SYS"Wimp_CloseWindow",,Q1%
 !Q1%=browse1%:SYS"Wimp_CloseWindow",,Q1%
 s$=$(Q%!76)
 IFmodified% THEN
  IFRIGHT$(s$,1)<>"*" s$+=" *"
 ELSE
  IFRIGHT$(s$,1)="*" s$=LEFT$(s$,LEN(s$)-2)
 ENDIF
 $(Q%!76)=s$
 IF(Q%!32 AND (1<<16))=0 THEN
  REM window was already closed,
  REM so we can quite happily move it
  !Q1%=-2
  SYS"Wimp_GetWindowState",,Q1%
  Y%=Q1%!4-Q1%!20
  !Q1%=-2:Q1%!4=ictime%
  SYS"Wimp_GetIconState",,Q1%
  X%=Y%+Q1%!16-820
  IFalarm_count%=0 THEN
   Y%=48+52
  ELSE
   IFalarm_count%>20 THEN
    Y%=20*48+52
   ELSE
    Y%=alarm_count%*48+52
   ENDIF
  ENDIF
  Q%!12=(Q%!12-Q%!4)+X%
  Q%!16=Y%+172
  Q%!8=172
  Q%!4=X%
  Q%!20=0
  Q%!24=0
 ELSE
  PROCtell_pinboard(browser%)
 ENDIF
 REM we want to force it to the top
 Q%!28=-1
 SYS"Wimp_OpenWindow",,Q%
 PROCopen_top_pane(Q%,browse1%)
ENDPROC
:
DEFPROCadjust_browser_size
 LOCAL l%,x%,p%,n%
 REM first of all, zip through the list, counting the number of alarms
 REM and working out how wide the window is going to be
 alarm_count%=0
 p%=alarm_head%
 WHILE p%
  REM IFFNcheck_pointer PROCcheck_pointer(p%,"PROCadjust_browser_size")
  alarm_count%+=1
  IFp%?alarm_taskalarm% THEN
   l%=LEN(FNmsg_1("BrwsA1", $(p%+alarm_line1%)+$(p%+alarm_line2%)+$(p%+alarm_line3%)))
  ELSE
   IFp%?alarm_applalarm% THEN
    l%=LEN(FNmsg_1("BrwsA5", $(p%+alarm_line1%)))
   ELSE
    l%=LEN($(p%+alarm_line1%))
    IF$(p%+alarm_line2%)<>"" l%+=1+LEN($(p%+alarm_line2%))
    IF$(p%+alarm_line3%)<>"" l%+=1+LEN($(p%+alarm_line3%))
   ENDIF
  ENDIF
  IFl%>x% x%=l%
  p%=p%!alarm_next%
 ENDWHILE
 x%+=30:REM date and time bit
 IFx%<70 x%=70
 x%=x%*16+16
 assembler%!16=x%
 n%=alarm_count%*48
 n%=-(n%+52)
 !Q%=0:Q%!4=n%:Q%!8=x%:Q%!12=0:SYS"Wimp_SetExtent",browser%,Q%
 !Q%=0:Q%!4=-52:Q%!8=x%:Q%!12=0:SYS"Wimp_SetExtent",browse1%,Q%
ENDPROC
:
DEFPROCcheck_browser(B%,Y%)
 LOCAL i%
 i%=FNalarm_hit(Y%)
 IFi% THEN
  REM IFFNcheck_pointer PROCcheck_pointer(i%,"PROCcheck_browser")
  IFi%?alarm_applalarm% i%=0
 ENDIF
 CASE B% OF
 WHEN 1024:IFi% THEN
            IFi%?alarm_selected%=0 THEN
             PROCunset_alarms_selection
             i%?alarm_selected%=1
             PROCredraw_alarm(i%)
            ENDIF
           ELSE
            IFFNalarm_selection_count PROCunset_alarms_selection
           ENDIF
 WHEN  256:IFi% THEN
            i%?alarm_selected%=1-i%?alarm_selected%
            PROCredraw_alarm(i%)
           ENDIF
 WHEN    4:IF current_action%=changing% PROCfront(a_wind%):PROCok(FNmsg_0("OkayA2"))
           IF current_action%=setting% PROCfront(a_wind%):PROCok(FNmsg_0("OkayA4"))
           i%=alarm_head%
           WHILE i%
            IFi%?alarm_selected% THEN
             i%?alarm_selected%=0
             PROCredraw_alarm(i%)
             PROCichang(i%)
             i%=0
            ELSE
             i%=i%!alarm_next%
            ENDIF
           ENDWHILE
 ENDCASE
ENDPROC

REM *************************************************************************
REM Menus
REM *************************************************************************

DEFPROCdomenu(h%,x%,y%)
 LOCAL m1%,m2%,m3%,m4%,m5%,s$,t$
 menufree%=menuend%-&440
 menu_curws%=menu_ws%
 menudata%=0
 menuhand%=h%
 menux%=x%
 menuy%=y%
 CASE h% OF
 WHEN 0:REM icon menu
        menudata%=FNcrmenu(FNmsg_0("MenuMM"))
        PROCattach(menudata%,0,info%,TRUE)
        IF NOT FNgot_time_setup THEN PROCset_shade(menudata%,3,1)
 WHEN 1:REM browser menu
        m3%=FNalarm_selection_count
        IFm3%<>2 THEN
         s$="BrwsM5":t$="BrwsM6"
        ELSE
         s$="BrwsM3":t$="BrwsM4"
        ENDIF
 
        menudata%=FNcrmenu(FNmsg_1("BrwsM1",FNmsg_0(s$)))
        m1%=FNcrmenu(FNmsg_2("BrwsM2",FNmsg_0(s$),FNmsg_0(t$)))
        PROCattach(menudata%,1,m1%,TRUE)
          PROCattach(m1%,3,save%,FALSE)
          PROCattach(m1%,4,save%,FALSE)
        PROCattach(menudata%,4,save%,FALSE)
        PROCattach(menudata%,5,save%,FALSE)
 
        IFm3%=0 THEN
         m3%=FNalarm_hit(menuy%)
         REM ^^^^^^^^ need to allow for the adjustment factor
         REM no longer, menu is now style guide compliant
         IFm3% THEN
          REM IFFNcheck_pointer PROCcheck_pointer(m3%, "PROCdomenu(m3%)")
          IFm3%?alarm_applalarm%=0 THEN
           m3%?alarm_selected%=1
           PROCredraw_alarm(m3%)
          ELSE
           m3%=0
          ENDIF
         ENDIF
         IFm3%=0 THEN
          PROCset_shade(menudata%,1,1)
          PROCset_shade(m1%,0,1)
          PROCset_shade(m1%,1,1)
          PROCset_shade(m1%,2,1)
          PROCset_shade(m1%,3,1)
          PROCset_shade(m1%,4,1)
          PROCset_shade(menudata%,3,1)
         ENDIF
        ENDIF
 
        IF current_action%<>-1 THEN
         PROCset_shade(menudata%,0,1)
         PROCset_shade(menudata%,1,1)
         PROCset_shade(m1%,0,1)
         PROCset_shade(m1%,1,1)
         PROCset_shade(m1%,2,1)
         PROCset_shade(m1%,3,1)
         PROCset_shade(m1%,4,1)
         PROCset_shade(menudata%,4,1)
         PROCset_shade(menudata%,5,1)
        ENDIF
 
        IF alarm_head%=0 THEN
         REM this will catch the final case of
         REM no alarms existing
         PROCset_shade(menudata%,2,1)
         PROCset_shade(menudata%,4,1)
        ENDIF
 WHEN 2:REM message window menu
        menudata%=FNcrmenu(FNmsg_0("MenuAL"))
        m1%=FNcrmenu(FNmsg_0("MenuD2"))
        PROCattach(menudata%,2,m1%,TRUE)
        m2%=FNcrmenu(FNmsg_0("MenuD1"))
        PROCattach(m1%,0,m2%,TRUE)
        PROCattach(m1%,1,m2%,TRUE)
        PROCattach(m1%,2,m2%,TRUE)
        PROCattach(m1%,3,m2%,TRUE)
        PROCattach(m1%,4,m2%,TRUE)
        PROCattach(m1%,5,m2%,TRUE)
        PROCwriteable(m2%,0,deftime%,4)

        REM Better check this menu is indirect before we trample all
        REM over it to give it some validation
    
        $validation_buffer% = "A0-9"+CHR$0
        !(m2% + 28 + (24 * 0) + 16) = validation_buffer%

        REM Sodding wimp... We disown the caret here if the change alarm
        REM window is open. Otherwise, if we defer an alarm, the wimp steals
        REM the caret from the change alarm window. We then go, "Ah, our alarm
        REM has been altered, close the change alarm window". We the close
        REM the menu tree, and the wimp tries to give the input focus back
        REM to the change alarm window. BOOM.

        IF current_action% <> setting% THEN
            SYS"Wimp_SetCaretPosition", -1, -1
        ENDIF
 WHEN 3:menudata%=FNcrmenu(FNmsg_0("MenuFI"))
        IFcurrent_action%=setting% THEN
         PROCset_shade(menudata%,0,1)
         PROCset_shade(menudata%,1,1)
        ELSE
         h%=alarms%(0):PROCread_prev_alarm(h%)
         IF h%=0 PROCset_shade(menudata%,0,1)
         h%=alarms%(0):PROCread_next_alarm(h%)
         IF h%=0 PROCset_shade(menudata%,1,1)
        ENDIF
 ENDCASE
 IFmenudata% SYS"Wimp_CreateMenu",,menudata%,menux%,menuy%
ENDPROC
