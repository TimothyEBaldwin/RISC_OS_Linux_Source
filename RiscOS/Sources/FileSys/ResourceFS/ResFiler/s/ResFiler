; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > Sources.ResFiler

;;----------------------------------------------------------------------------
;; Resource Filer module
;;
;; Change List
;; -----------
;; 22-Feb-89             File created by modifying DeskFSFilr sources
;;              0.07 NDR Uses ResourceFS and sprite "romapps"
;; 26-Feb-90    0.08 NDR Use WimpPriority_ResourceFiler
;; 08-Apr-91    0.09 RM  Added messages list and pass 300 to Wimp_Initialise.
;; 22-Apr-91    0.10 RM  Removed auto-startup menu.
;; 14-Oct-91    0.11 JSR Move message file to Messages module
;;                       Change all &.Hdr. to Hdr:
;;                       Generate Help and Syntax files
;;                       Put banner into resource file
;; 03-Feb-92    0.12 JSR Adjust service entry for Service_MessageFileClosed
;; 31-Aug-93    0.13 JSR Remove the word 'ROM' from the !Help.
;; 28-Oct-94    0.14 SMC Added international help/syntax.
;; 15-Apr-98    0.15 MJS Update to Ursula service format.
;; 18-Aug-99    0.16 SNB Moved to srccommit. Tidying.
;; 25-Apr-00    0.17 KJB Made 32-bit compatible.
;;
;;----------------------------------------------------------------------------

        AREA    |ResourceFiler$$Code|, CODE, READONLY, PIC
Module_BaseAddr

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Services
        GET     Hdr:ModHand
        GET     Hdr:CMOS
        GET     Hdr:OsBytes
        GET     Hdr:FSNumbers
        GET     Hdr:NewErrors
        GET     Hdr:HighFSI
        GET     Hdr:Wimp
        GET     Hdr:WimpSpace
        GET     Hdr:Messages
        GET     Hdr:Sprite
        GET     Hdr:VduExt
        GET     Hdr:Proc
        GET     Hdr:Variables
        GET     Hdr:MsgTrans
        GET     Hdr:MsgMenus
        GET     Hdr:ResourceFS

        GET     VersionASM

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        GBLL    debug
debug   SETL    False

      [ debug
        GET     Hdr:Debug
        GET     Hdr:HostDebug
      ]

                GBLL    debugtask
debugtask       SETL    debug :LAND: False


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Register names
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; sp            RN      r13             ; FD stack
; wp            RN      r12

scy             RN      r11
scx             RN      r10
y1              RN      r9
x1              RN      r8
y0              RN      r7
x0              RN      r6
cy1             RN      r5              ; Order important for LDMIA
cx1             RN      r4
cy0             RN      r3
cx0             RN      r2

; r0,r1 not named

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Macro definitions
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        MACRO
        max     $a, $b
        CMP     $a, $b
        MOVLT   $a, $b
        MEND

        MACRO
        min     $a, $b
        CMP     $a, $b
        MOVGT   $a, $b
        MEND

        MACRO
$label  FixDCB  $n, $string
        ASSERT  ((:LEN:"$string")<$n)
$label  DCB     "$string"
        LCLA    cnt
cnt     SETA    $n-:LEN:"$string"
        WHILE   cnt>0
        DCB     0
cnt     SETA    cnt-1
        WEND
        MEND

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Constants
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

TAB     *       9
LF      *       10
CR      *       13
space   *       32
delete  *       127

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

bignum          *       &0FFFFFFF

initbrx         *       100
initbry         *       1024-80

brxoffset       *       64
bryoffset       *       64

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Workspace allocation
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

                ^       0, wp
mytaskhandle    #       4               ; id so we can kill ourselves
FilerHandle     #       4               ; id so we can contact Filer
privateword     #       4

messagedata     #       4

mousedata       #       0
mousex          #       4
mousey          #       4
buttonstate     #       4
windowhandle    #       4
iconhandle      #       4

menuhandle      #       4
menudir         #       4
menufileblock   #       4
menufilename    #       4

windowx         #       4
windowy         #       4

relmousex       #       4
relmousey       #       4

iconbaricon     #       4

ram_menustart   #       0

m_resourcefs    #       m_headersize + mi_size * 1

ram_menuend     #       0

userdata        #       &100

stackbot        #       &100
stacktop        #       0

ResourceFiler_WorkspaceSize *  :INDEX: @

 ! 0, "ResourceFiler workspace is ":CC:(:STR:(:INDEX:@)):CC:" bytes"

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Module header
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 ASSERT (.=Module_BaseAddr)

        DCD     ResourceFiler_Start        -Module_BaseAddr
        DCD     ResourceFiler_Init         -Module_BaseAddr
        DCD     ResourceFiler_Die          -Module_BaseAddr
        DCD     ResourceFiler_Service      -Module_BaseAddr
        DCD     ResourceFiler_TitleString  -Module_BaseAddr
        DCD     ResourceFiler_HelpString   -Module_BaseAddr
        DCD     ResourceFiler_CommandTable -Module_BaseAddr
        DCD     0
        DCD     0
        DCD     0
        DCD     0
 [ International_Help <> 0
        DCD     str_messagefile            -Module_BaseAddr
 |
        DCD     0
 ]
        DCD     ResourceFiler_Flags        -Module_BaseAddr

ResourceFiler_HelpString
        DCB     "ResourceFiler", TAB, "$Module_HelpVersion", 0
        ALIGN

ResourceFiler_Flags
 [ No32bitCode
        DCD     0
 |
        DCD     ModuleFlag_32bit
 ]

 [ International_Help=0
Desktop_ResourceFiler_Help
        DCB   "The Resource Filer provides the Apps icon on the icon bar, and "
        DCB   "uses the Filer to display Resource directories.",13,10
        DCB   "Do not use *Desktop_ResourceFiler, use *Desktop instead.",0

Desktop_ResourceFiler_Syntax DCB   "Syntax: *Desktop_"       ; drop through!
 |
Desktop_ResourceFiler_Help      DCB     "HRSFDRF", 0
Desktop_ResourceFiler_Syntax    DCB     "SRSFDRF", 0
 ]

ResourceFiler_TitleString    DCB   "ResourceFiler", 0
ResourceFiler_Banner         DCB   "Banner", 0
                          ALIGN

ResourceFiler_CommandTable ; Name Max min

ResourceFiler_StarCommand
        Command Desktop_ResourceFiler,     0, 0, International_Help

        DCB     0                       ; End of table
        ALIGN

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; out   r2->banner or error

GetBanner Entry "r0-r1,r3-r7"
        BL      allocatemessagedata
        ADRVC   r1, ResourceFiler_Banner
        MOVVC   r2, #0
        MOVVC   r3, #0
        MOVVC   r4, #0
        MOVVC   r5, #0
        MOVVC   r6, #0
        MOVVC   r7, #0
        SWIVC   XMessageTrans_Lookup
        STRVS   r0, [sp]
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Had *command to enter ResourceFiler, so start up via module handler

Desktop_ResourceFiler_Code

        LDR     r0, [r12]
        CMP     r0, #0
        MOVGT   r0, #ModHandReason_Enter
        ADRGT   r1, ResourceFiler_TitleString
        SWIGT   XOS_Module

MakeError_CantStartResourceFiler Entry
        ADR     r0, ErrorBlock_CantStartResourceFiler
        MOV     r1, #0
        MOV     r2, #0
        ADR     r4, ResourceFiler_TitleString
        SWI     XMessageTrans_ErrorLookup
        EXIT

ErrorBlock_CantStartResourceFiler
        DCD     0
        DCB     "UseDesk", 0
        ALIGN


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;Ursula format
;
        ASSERT  Service_Reset        < Service_StartFiler
        ASSERT  Service_StartFiler   < Service_StartedFiler
        ASSERT  Service_StartedFiler < Service_FilerDying
        ASSERT  Service_FilerDying   < Service_MessageFileClosed
;
ResourceFiler_UServTab
        DCD     0
        DCD     ResourceFiler_UService - Module_BaseAddr
        DCD     Service_Reset
        DCD     Service_StartFiler
        DCD     Service_StartedFiler
        DCD     Service_FilerDying
        DCD     Service_MessageFileClosed
        DCD     0
        DCD     ResourceFiler_UServTab - Module_BaseAddr
ResourceFiler_Service ROUT
        MOV     r0, r0
        TEQ     r1, #Service_Reset
        TEQNE   r1, #Service_StartFiler
        TEQNE   r1, #Service_StartedFiler
        TEQNE   r1, #Service_FilerDying
        TEQNE   r1, #Service_MessageFileClosed
        MOVNE   PC,LR
ResourceFiler_UService
        TEQ     r1, #Service_Reset
        BEQ     ResourceFiler_Service_Reset

        TEQ     r1, #Service_MessageFileClosed
        BEQ     ResourceFiler_Service_MessageFileClosed

        TEQ     r1, #Service_FilerDying
        BEQ     ResourceFiler_Service_FilerDying

        TEQ     r1, #Service_StartFiler
        BEQ     ResourceFiler_Service_StartFiler

        TEQ     r1, #Service_StartedFiler
        MOVNE   pc, lr


ResourceFiler_Service_StartedFiler Entry

        LDR     r14, [r12]              ; cancel 'don't start' flag
        CMP     r14, #0
        MOVLT   r14, #0
        STRLT   r14, [r12]

        EXIT


ResourceFiler_Service_StartFiler Entry "r2,r3,r6"

        LDR     r2, [r12]
        CMP     r2, #0
        EXIT    LT                      ; don't claim service unless = 0
        BEQ     %FT01
        EXIT                            ; NB: we've already got the block!
01
        MOV     r6, r0                  ; Filer task handle
        MOV     r0, #ModHandReason_Claim
        LDR     r3, =ResourceFiler_WorkspaceSize
        SWI     XOS_Module
        MOVVS   r2, #-1                 ; avoid looping
        STR     r2, [r12]

        MOVVC   r0, #0
        STRVC   r0, [r2, #:INDEX:messagedata]
        STRVC   r0, [r2, #:INDEX:mytaskhandle]
        STRVC   r12, [r2, #:INDEX:privateword]
        STRVC   r6, [r2, #:INDEX:FilerHandle]

02      ADRVCL  r0, ResourceFiler_StarCommand
        MOVVC   r1, #0                  ; Claim service

        EXIT

ResourceFiler_Service_MessageFileClosed Entry "r0,r12"

        LDR     r12, [r12]              ; are we active?
        CMP     r12, #0
        EXIT    LE

        BL      CopyMenus               ; re-open message file etc.

        EXIT

ResourceFiler_Service_Reset Entry "r0-r6"

        LDR     r2, [r12]               ; cancel 'don't start' flag
        CMP     r2, #0
        MOVLT   r2, #0
        STRLT   r2, [r12]

        MOVGT   wp, r2
        MOVGT   r0, #0                  ; Wimp has already gone bye-bye
        STRGT   r0, mytaskhandle
        BLGT    freeworkspace

        EXIT                            ; Sorry, but no can do errors here

ResourceFiler_Init Entry

; initialise ResFiler$Path if not already done

        ADR     R0, Path
        MOV     R2, #-1
        MOV     R3, #0
        MOV     R4, #VarType_Expanded
        SWI     XOS_ReadVarVal          ; returns R2=0 if doesn't exist
        CMP     R2, #0                  ; clears V as well!

        ADREQ   R0, Path
        ADREQ   R1, PathDefault
        MOVEQ   R2, #?PathDefault
        MOVEQ   R3, #0
        MOVEQ   R4, #VarType_String
        SWIEQ   XOS_SetVarVal

        CLRV
        EXIT

Path            DCB     "ResFiler$$Path"
                DCB     0
PathDefault     DCB     "Resources:$.Resources.ResFiler."
                DCB     0
                ALIGN

ResourceFiler_Die ; drop through...

ResourceFiler_Service_FilerDying Entry "r0-r6"

        LDR     wp, [r12]
        BL      freeworkspace

        EXIT                            ; Sorry, but no can do errors here


; Corrupts r0-r6

freeworkspace ROUT

        CMP     wp, #0                  ; clears V
        MOVLE   pc, lr

        MOV     r6, lr                  ; can't use stack on exit if USR mode

        BL      deallocatemessagedata   ; can use the stack until block freed

        LDR     r0, mytaskhandle
        CMP     r0, #0
        LDRGT   r1, taskidentifier
        SWIGT   XWimp_CloseDown         ; ignore errors from this

        MOV     r2, r12
        LDR     r12, privateword
        MOV     r14, #0                 ; reset flag word anyway
        STR     r14, [r12]
        MOV     r0, #ModHandReason_Free
        SWI     XOS_Module

        MOV     pc, r6

taskidentifier
        DCB     "TASK"                  ; Picked up as a word

MessagesList    DCD     Message_HelpRequest
                DCD     0

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        ALIGN

CloseDownAndExit ROUT

        BL      freeworkspace
        SWI     OS_Exit

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;                   ResourceFiler application entry point
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

ErrorAbort
        MOV     r1, #2_010              ; 'Cancel' button
        BL      ReportError             ; stack is still valid here

Abort
        BL      freeworkspace           ; exits with r12 --> private word
        MOV     r0, #-1
        STR     r0, [r12]               ; marked so doesn't loop

        SWI     OS_Exit


ResourceFiler_Start ROUT

        LDR     wp, [r12]

        CMP     wp, #0
        BLE     MakeError_CantStartResourceFiler
        SWIVS   OS_GenerateError

        ADRL    sp, stacktop            ; STACK IS NOW VALID!

        LDR     r0, mytaskhandle        ; close any previous incarnation
        CMP     r0, #0
        LDRGT   r1, taskidentifier
        SWIGT   XWimp_CloseDown         ; ignore errors from this

        MOV     r0, #300                ; Knows about wimp 3.00 and has a messages list
        LDR     r1, taskidentifier
        BL      GetBanner
        ADRVC   r3, MessagesList
        SWIVC   XWimp_Initialise
        STRVC   r1, mytaskhandle

        BLVC    CopyMenus               ; copy menus into ram
        BLVC    SetUpIconBar
        BVS     ErrorAbort              ; frees workspace but marks it invalid

        BNE     Abort                   ; no ResourceFS present

; .............................................................................
; The main polling loop!

repollwimp ROUT

 [ False
        MOVVS   r1, #2_011              ; 'Ok' and 'Cancel' buttons
 |
        MOVVS   r1, #2_001              ; 'Ok' button
 ]
        BLVS    ReportError
        BVS     ErrorAbort              ; error from reporterror!

        MOV     r0, #pointerchange_bits + null_bit
                                        ; disable null events and pointer
        ADR     r1, userdata            ; entering/leaving window events
        SWI     XWimp_Poll
        BVS     repollwimp

; In    r1 -> wimp_eventstr

        ADR     lr, repollwimp

        CMP     r0, #Mouse_Button_Change
        BEQ     event_mouse_click

        CMP     r0, #Menu_Select
        BEQ     event_menu_select

        CMP     r0, #User_Message
        CMPNE   r0, #User_Message_Recorded
        BEQ     event_user_message

        B       repollwimp

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; event_mouse_click
; =================

; In    r1 -> wimp_eventstr
;             [r1, #0]  pointer x
;             [r1, #4]          y
;             [r1, #8]  new button state
;             [r1, #12] window handle (-1 if background/icon bar)
;             [r1, #16] icon handle (-1 if none)

; Out   all regs may be corrupted - going back to PollWimp

event_mouse_click Entry

        LDMIA   r1, {r0-r4}             ; set mousex, mousey, buttonstate
        ADR     r14, mousedata          ; windowhandle, iconhandle
        STMIA   r14, {r0-r4}
 [ debug
 dreg r2, "mouse_click: buttonstate ",cc,Word
 dreg r0, ", x ",cc,Integer
 dreg r1, ", y ",cc,Integer
 dreg r3, ", window ",,Word
 ]

        CMP     r3, #iconbar_whandle    ; window handle of icon bar
        EXIT    NE

        TST     r2, #button_left :OR: button_right ; select or adjust ?
        BNE     click_select_iconbar

        TST     r2, #button_middle      ; menu ?
        BNE     click_menu_iconbar

        EXIT

; .............................................................................
; We get here if the user has double-clicked on a FS icon

; In    lr stacked, Proc_RegList = "lr" for EXIT
;       all regs trashable

click_select_iconbar ROUT

; Try to open dir using Filer

        MOV     r0, #User_Message_Recorded
        ADR     r1, resourcefsmessage
        LDR     r2, FilerHandle
        SWI     XWimp_SendMessage
        EXIT

resourcefsmessage
        DCD     messageend-resourcefsmessage
        DCD     0                       ; filled in by Wimp
        DCD     0                       ; filled in by Wimp
        DCD     0
        DCD     Message_FilerOpenDir
        DCD     fsnumber_resourcefs     ; filing system number
        DCD     0                       ; bitset
        DCB     "Resources:$.Apps", 0   ; pathname
        DCB     "Apps", 0               ; directory title
        ALIGN
messageend

; Offsets of fields in a message block

                ^       0
message_size    #       4
message_task    #       4               ; filled in by Wimp
message_myref   #       4               ; filled in by Wimp
message_yourref #       4
message_action  #       4
message_hdrsize *       @
message_data    #       0               ; words of data to send

; .............................................................................
; In    lr stacked, Proc_RegList = "lr" for EXIT
;       all regs trashable

click_menu_iconbar ROUT

        ADR     r1, m_resourcefs
        BL      CreateMenu

        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; A menu is created with the title above the x,y values you feed it, with the
; top left hand corner being at the x,y position

CreateMenu Entry "r2, r3"

        STR     r1, menuhandle

        LDR     r2, mousex
        SUB     r2, r2, #4*16
        MOV     r3, #96 + 1*44          ; bodge to clear icon bar

        SWI     XWimp_CreateMenu
        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

rom_menustart

m_resourcefs    Menu    T00
mo_fl_openroot  Item    M02

                DCB     0               ; terminator
                ALIGN

; .............................................................................

CopyMenus Entry "r1-r3"

        BL      allocatemessagedata             ; if not already done
        ADRVC   r1, rom_menustart
        ADRVC   r2, ram_menustart
        MOVVC   r3, #ram_menuend-ram_menustart
        SWIVC   XMessageTrans_MakeMenus

        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; event_menu_select
; =================

; In    r1 -> wimp_eventstr

; Out   all regs may be corrupted - going back to PollWimp

event_menu_select Entry

        MOV     r2, r1
        LDR     r1, menuhandle
        BL      DecodeMenu

        SUB     sp, sp, #b_size
        MOV     r1, sp
        SWI     XWimp_GetPointerInfo
        LDR     r14, [r1, #b_buttons]
        ADD     sp, sp, #b_size
        EXIT    VS
        TST     r14, #button_right
        LDRNE   r1, menuhandle          ; if right-clicked, re-open menu
        BLNE    CreateMenu              ; and do all the recalculation

        EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; In     r1 = menu handle
;        r2 -> list of selections

DecodeMenu Entry

 [ debug
 dreg r1, "menu_select: menu handle ",cc
 LDR r14, [r2]
 dreg r14, ", selections ",cc
 LDR r14, [r2, #4]
 dreg r14, ", "
 ]

go_fl_openroot
        ADR     r0, fileropendollar
        SWI     XOS_CLI
        EXIT

fileropendollar
        DCB     "%Filer_OpenDir Resources:$", 0
        ALIGN

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Out   cx0, cy0 = coords of mouse pointer
;       other regs corrupt

GetPointerInfo ROUT

        Push    "r1, r2-r6, lr"         ; poke pointer info into stack

        ADD     r1, sp, #4
        SWI     XWimp_GetPointerInfo
        LDMVCIA r1, {cx0, cy0}

        LDR     r1, [sp], #6*4          ; Restore r1, kill temp frame
        Pull    "pc"

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Set up icon bar entry for ResourceFS
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Out   much corruption, but Z unset ==> no ResourceFS present


SetUpIconBar Entry

        BL      AllocateIcon
        STRVC   r0, iconbaricon
        EXIT


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Out   VC => r0 = icon index, flags preserved
;       VS => r0 -> error, flags trashed

AllocateIcon EntryS "r1-r4, x0, y0, x1, y1"

        MOV     r0, #SpriteReason_ReadSpriteSize
        ADR     r2, ic_spritename               ; r2 -> sprite name
        SWI     XWimp_SpriteOp                  ; r3, r4 = pixel size
        MOVVC   r0, r6                          ; creation mode of sprite

        MOVVC   r1, #VduExt_XEigFactor
        SWIVC   XOS_ReadModeVariable
        EXIT    VS

        MOV     x0, #0
        ADD     x1, x0, r3, LSL r2              ; pixel size depends on sprite
        CMP     x1, #16*(?ic_text-1)
        MOVLT   x1, #16*(?ic_text-1)            ; allow for text width too

        MOV     r1, #VduExt_YEigFactor
        SWI     XOS_ReadModeVariable
        MOVVC   y0, #20                         ; sprite baseline (page 92 of Style Guide)
        ADDVC   y1, y0, r4, LSL r2
        MOVVC   y0, #-16                        ; text baseline (page 92 of Style Guide)
        MOVVC   r0, #-6                         ; lhs of icon bar, with low priority
        ADRVC   r14, userdata
        STMVCIA r14!, {r0, x0, y0, x1, y1}      ; window handle, icon coords

        LDRVC   r0, ic_flags
        ADRVC   r1, ic_text
        ADRVC   r2, ic_validation
        MOVVC   r3, #?ic_text-1
        STMVCIA r14, {r0-r3}                    ; icon flags, data

        LDRVC   r0, =WimpPriority_ResourceFS
        ADRVC   r1, userdata
        SWIVC   XWimp_CreateIcon
        EXITS   VC
        EXIT

        LTORG

ic_flags        DCD     &1700310B       ; sprite + text, h-centred, indirected
                                        ; button type 3
                                        ; fcol 7, bcol 1
ic_text         DCB     "Apps",0
ic_validation   DCB     "S"
ic_spritename   DCB     "romapps",0
                ALIGN

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; event_user_message (and _recorded)
; ==================

; In    r1 -> wimp_eventstr
;             [r1, #0]     block size
;             [r1, #12]    your ref
;             [r1, #16]    message action
;             [r1, #20...] message data

; Out   all regs may be corrupted - going back to PollWimp

event_user_message Entry

        LDR     r0, [r1, #message_action]

        LDR     r14, =Message_HelpRequest
        CMP     r0, r14
        BEQ     returnhelp

        CMP     r0, #Message_Quit
        EXIT    NE

        B       CloseDownAndExit
;       NOEXIT

;............................................................................

; In    r1 -> message block containing help request
;       LR stacked
; Out   Message_HelpReply sent

returnhelp
        LDR     r2, [r1, #ms_data + b_window]
        LDR     r3, [r1, #ms_data + b_icon]

        MOV     r6, #"H"                ; default first letter

        CMP     r2, #iconbar_whandle    ; try iconbar icon
        MOVEQ   r0, #&FF
        MOVEQ   r4, #0                  ; no parameter here
        BEQ     %FT01

        CMP     r3, #0                  ; no help if not on item
        BLT     %FT99

        Push    "r1, r2-r4"
        ADD     r1, sp, #4              ; r1 -> buffer for result
        MOV     r0, #1
        SWI     XWimp_GetMenuState
        Pull    "r1, r2-r4"             ; r2, r3 = menu selections
        BVS     %FT99

        ADDS    r0, r2, #1              ; NB: item -1 is translated into 0
        ADDGTS  r14, r3, #1
        ADDGT   r0, r0, r14, LSL #4     ; r0 = first entry + 16*second entry

; r0 = index in menu (&FF => iconbar icon)
; r4 -> parameter 0 (0 => none)
; r6 = first letter of token

01
        CMP     r0,#&ff
        ADDNE   r0,r0,#1
        ADD     r1, r1, #ms_data
        STRB    r6, [r1], #1
        MOV     r2, #3
        SWI     XOS_ConvertHex2

        SUBVC   r1, r0, #1              ; r1 -> "Hxx" token
        MOVVC   r2, r1                  ; r2 -> output buffer
        MOVVC   r3, #256-ms_data        ; r3 = buffer size
        BL      lookup_1par             ; sets r5..r7=0 automatically

        SUBVC   r1, r2, #ms_data
        ADDVC   r3, r3, #4 + ms_data    ; include terminator
        BICVC   r3, r3, #3
        STRVC   r3, [r1, #ms_size]
        LDRVC   r14, [r1, #ms_myref]
        STRVC   r14, [r1, #ms_yourref]
        LDRVC   r14, =Message_HelpReply
        STRVC   r14, [r1, #ms_action]
        MOVVC   r0, #User_Message
        LDRVC   r2, [r1, #ms_taskhandle]
        SWIVC   XWimp_SendMessage
99
        EXIT

; .............................................................................

; In    r1 -> token
;       r2 -> buffer
;       r3 = buffer size
;       r4 -> parameter 0 (0 => none)
; Out   r0 corrupt if VC, else r0 -> error block if VS
;       r3 = size of string excluding terminator

lookup_1par Entry "r5-r7"

        BL      allocatemessagedata     ; r0 -> file desc
        MOVVC   r5, #0
        MOVVC   r6, #0
        MOVVC   r7, #0
        SWIVC   XMessageTrans_Lookup

        EXIT

;..............................................................................

; In    [messagedata] -> message file desc (0 => not yet opened)
; Out   r0 = [messagedata] -> message file desc (opened if not already open)

allocatemessagedata Entry "r1, r2"

        LDR     r0, messagedata
        CMP     r0, #0
        EXIT    NE

        MOV     r0, #ModHandReason_Claim
        MOV     r3, #16
        SWI     XOS_Module

        STRVC   r2, messagedata

        MOVVC   r0, r2
        ADRVC   r1, str_messagefile
        MOVVC   r2, #0                          ; no user buffer
        SWIVC   XMessageTrans_OpenFile

        BLVS    deallocatemessagedata           ; preserves error state

        LDRVC   r0, messagedata
        EXIT

str_messagefile DCB     "ResFiler:Messages", 0
                ALIGN

;..............................................................................

; In    [messagedata] -> message file desc, or = 0 if not loaded
; Out   [messagedata] = 0, OS_Module (Free) called if required, error preserved

deallocatemessagedata EntryS "r0,r2"

        LDR     r2, messagedata
        MOVS    r0, r2
        EXITS   EQ

        MOV     r14, #0
        STR     r14, messagedata

        SWI     XMessageTrans_CloseFile         ; tell the MessageTrans module

        MOV     r0, #ModHandReason_Free
        SWI     XOS_Module

        EXITS


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; In    r1 = state for ReportError

ReportError Entry "r1, r2"

        BL      GetBanner
        SWI     XWimp_ReportError
        EXIT    VC
        SWIVS   OS_GenerateError        ; paranoia

        LTORG

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 [ debug
        InsertDebugRoutines
        InsertHostDebugRoutines
 ]

        END
