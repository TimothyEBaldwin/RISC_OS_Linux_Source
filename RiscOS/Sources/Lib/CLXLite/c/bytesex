/* Copyright 2009 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
  Title:        host - endianness functions
  Copyright:    (C) 2009, RISC OS Open Limited
*/

#include <stdlib.h>
#include "bytesex.h"

static const int endian = 1;

static int reverse = 0;

bytesex_requirement bytesex_host(void)
{
  return (*(char*)&endian) == '\0' ? bytesex_WANT_BIG_ENDIAN : bytesex_WANT_LITTLE_ENDIAN;
}

void bytesex_reverse(int state)
{
  reverse = state != 0;
}

int bytesex_reversing(void)
{
  return reverse;
}

int bytesex_reverse_auto(bytesex_requirement mode)
{
  reverse = mode != bytesex_host();

  return reverse;
}

int32 bytesex_hostval(int32 value)
{
  if (reverse)
  {
#ifdef __riscos
    int temp;

    /* Taken from the ARM v4 ARM. ARM v6 gives us a REV instruction, which would be better... */
#ifdef __CC_NORCROFT
    __asm
    {
        EOR     temp, value, value, ROR #16
        BIC     temp, temp, #0x00FF0000
        MOV     value, value, ROR #8
        EOR     value, value, temp, LSR #8
    }
#else /* assume GCC */
    __asm__
    (
        "EOR     %1, %0, %0, ROR #16\n\t"
        "BIC     %1, %1, #0x00FF0000\n\t"
        "MOV     %0, %0, ROR #8\n\t"
        "EOR     %0, %0, %1, LSR #8"
        : "+r" (value), "=r" (temp)
    );
#endif
#else
    int32 reversed = 0;
    reversed = (value & 0x000000FF) << 24 |
               (value & 0x0000FF00) <<  8 |
               (value & 0x00FF0000) >>  8 |
               (value & 0xFF000000) >> 24;
    value = reversed;
#endif
  }
  return value;
}
