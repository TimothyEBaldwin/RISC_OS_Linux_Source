/* Copyright 2009 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* >wholefls.c
 * Copyright © 2009, RISC OS Open Ltd.
 * All rights reserved.
 */


#include <string.h>
#include "wholefls.h"

#ifdef __riscos
#include "swis.h"

#define OBJ_NOT_FOUND (0)
#define OBJ_DIRECTORY (2)
#else

#include <stdio.h>
#include <sys/stat.h>
#include <sys/types.h>

#endif


int32 wf_filesize(const char *filename)
{
#ifdef __riscos
  int32            size = -1;
  _kernel_oserror *err;
  char            *path = "";
  int32            obj;

  if (0 == strchr(filename, ':'))
    path = "File$Path";

  err = _swix(OS_File, _INR(0,1) | _IN(4) | _OUT(0) | _OUT(4), 15, filename, path, &obj, &size);
  if (err || obj == OBJ_NOT_FOUND || obj == OBJ_DIRECTORY)
    return -1;
  return size;
#else
  struct stat st;
  off_t size = -1; /* Not found */

  if (stat(filename, &st) == 0)
  {
    size = st.st_size;
    if (size > 0xFFFFFFFFLL)
      fprintf(stderr, "WARNING: truncating file size to <4GiB");
    return (int32) size;
  }
  return (int32) -1;
#endif
}


int32 wf_load(const char *filename, VoidStar buf, int32 bufsz)
{
  int32 size = wf_filesize(filename);

  /* Barf if filesize() returns an error or the buffer isn't exactly the right size */
  if (size == -1 || size != bufsz)
    return -1;

#ifdef __riscos
  if (size)
  {
    _kernel_oserror *err;
    char            *path = "";

    if (0 == strchr(filename, ':'))
      path = "File$Path";
    err = _swix(OS_File, _INR(0,4), 14, filename, buf, 0, path);
    if (err)
      return -1;
  }
#else
  if (size)
  {
    FILE *fp;
    fp = fopen(filename, "rb");
    if (fp == NULL)
      return -1; /* couldn't open file */
    size_t read_bytes = fread(buf, 1, bufsz, fp);
    fclose(fp);
    if (read_bytes != (size_t) size)
      return -1; /* weren't able to read the whole file */
  }
#endif

  return 0;
}


int32 wf_save(const char *filename, VoidStar buf, int32 bufsz)
{
#ifdef __riscos
  if (bufsz)
  {
    _kernel_oserror *err;

    err = _swix(OS_File, _INR(0,2) | _INR(4,5), 10, filename, 0xFFD, buf, (int32)buf + bufsz);
    if (err)
      return -1;
  }
#else
  if (bufsz)
  {
    FILE *fp;
    fp = fopen(filename, "wb");
    if (fp == NULL)
      return -1; /* couldn't open file */
    size_t written_bytes = fwrite(buf, 1, bufsz, fp);
    fclose(fp);
    if (written_bytes != (size_t) bufsz)
      return -1; /* weren't able to write the whole file */
  }
#endif

  return 0;
}


int wf_rename(const char *source, const char *dest)
{
#ifdef __riscos

  return _swix(OS_FSControl, _INR(0,8), 26, source, dest, (1<<7) | (1<<9), 0, 0, 0, 0, 0) ? -1 : 0;

#else
  return rename(source, dest); /* returns -1 if error, 0 for success */
#endif

  return 0;
}
