/* Copyright 1999 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <swis.h>
#include <unixlib.h>
#include "unistd.h"
#include "sys/time.h"

unsigned int sleep(unsigned int n)
{
    unsigned int t1, t, dt;

    _swix(OS_ReadMonotonicTime, _OUT(0), &t1);
    t = t1;
    dt = t1 + n * 100;

    do
    {
        int escape;
        int wait = dt - t;

        if (wait >= 0x8000) wait = 0x7FFF;
        _swix(OS_Byte, _INR(0,2)|_OUT(2), 129, wait & 0xFF, wait >> 8, &escape);
        _swix(OS_ReadMonotonicTime, _OUT(0), &t);
        if (escape == 0x1B)
            break;
    } while (t - t1 < n * 100);

    return (signed)(dt - t) <= 0 ? 0 : (dt - t) / 100;
}

int usleep(unsigned int n)
{
    struct timeval tv;
    tv.tv_sec  = n / 1000000;
    tv.tv_usec = n % 1000000;
    select(0, NULL, NULL, NULL, &tv);

    return 0;
}
