; Copyright 2022 RISC OS Open Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

; Assumptions:
; * Single-core machine (no barriers)
; * SWP[B]
; * No need for atomicity with interrupt handlers (client is application)
; * No halfword load/store support
; Atomic loads are fine, but non-atomic loads and all stores must lock the SWP spinlock, to provide protection against preemptive multithreading

; It's easiest to generate most of these functions using a giant WHILE loop
size    SETA    1
        WHILE   size <= 8

; Set $sz to the correct size suffix
      [ size = 1
sz      SETS    "B"
      ELIF size = 2
sz      SETS    "H"
      ELIF size = 4
sz      SETS    ""
      |
sz      SETS    "D"
      ]

sz2     SETS    (:STR:size) :RIGHT: 1

; void _kernel_atomic_store_N(volatile void* obj, memory_order order, C desired);
      [ :DEF: Need__kernel_atomic_store_$sz2._UARMa
        FUNC    _kernel_atomic_store,,_UARMa
        SpinLock_SWP a2, ip
      [ size == 2
        STRB    a3, [a1]
        MOV     a3, a3, LSR #8
        STRB    a3, [a1, #1]
      ELIF size < 8
        STR$sz  a3, [a1]
      |
        STMIA   a1, {a3-a4}
      ]
        SpinUnlock_SWP a2, ip
        Return  ,LinkNotStacked
      ]

; C _kernel_atomic_load_N(volatile void* obj, memory_order order);
      [ :DEF: Need__kernel_atomic_load_$sz2._UARMa
        FUNC    _kernel_atomic_load,,_UARMa
      [ size == 2
        ; Because writes are non-atomic (nothing preventing a thread context switch during the write), we must use the spinlock to protect the read
        SpinLock_SWP a2, ip
        LDRB    a3, [a1]
        LDRB    a4, [a1, #1]
        SpinUnlock_SWP a2, ip
        ORR     a1, a3, a4, LSL #8
      ELIF size < 8
        LDR$sz  a1, [a1]
      |
        LDMIA   a1, {a1-a2}
      ]
        Return  ,LinkNotStacked
      ]

; C _kernel_atomic_exchange_N(volatile void* obj, memory_order order, C desired);
      [ :DEF: Need__kernel_atomic_exchange_$sz2._UARMa
        FUNC    _kernel_atomic_exchange,,_UARMa
      [ size == 2
        FunctionEntry
        SpinLock_SWP a2, ip
        LDRB    a4, [a1]
        LDRB    ip, [a1, #1]
        STRB    a3, [a1]
        MOV     a3, a3, LSR #8
        STRB    a3, [a1, #1]
        SpinUnlock_SWP a2, a3
        ORR     a1, a4, ip, LSL #8
        Return
      ELIF size < 8
        ; Yes, this could be SWP/SWPB, but that wouldn't be atomic with the other operations which use SpinLock
        SpinLock_SWP a2, ip
        LDR$sz  a4, [a1]
        STR$sz  a3, [a1]
        SpinUnlock_SWP a2, ip
        MOV     a1, a4
        Return  ,LinkNotStacked
      |
        FunctionEntry "v1"
        MOV     ip, a1
        SpinLock_SWP v1, lr
        LDMIA   ip, {a1-a2}
        STMIA   ip, {a3-a4}
        SpinUnlock_SWP v1, lr
        Return  "v1"
      ]
      ]

; _Bool _kernel_atomic_compare_exchange_weak_N(volatile void* obj, int orders, C* expected, C desired);
; _Bool _kernel_atomic_compare_exchange_strong_N(volatile void* obj, int orders, C* expected, C desired);
      [ :DEF: Need__kernel_atomic_compare_exchange_weak_$sz2._UARMa :LOR: :DEF: Need__kernel_atomic_compare_exchange_strong_$sz2._UARMa
        FUNC    _kernel_atomic_compare_exchange_weak,,_UARMa
        FUNC    _kernel_atomic_compare_exchange_strong,,_UARMa
      [ size == 2
        FunctionEntry "v1-v2"
        LDRB    lr, [a3]
        LDRB    v1, [a3, #1]
        SpinLock_SWP a2, ip
        LDRB    ip, [a1]
        LDRB    v2, [a1, #1]
        TEQ     lr, ip
        TEQEQ   v1, v2
        STREQB  a4, [a1]
        MOVEQ   a4, a4, LSR #8
        STREQB  a4, [a1, #1]
        SpinUnlock_SWP a2, lr
        STRNEB  ip, [a3]
        STRNEB  v2, [a3, #1]
        MOVEQ   a1, #1
        MOVNE   a1, #0
        Return  "v1-v2"
      ELIF size < 8
        FunctionEntry
        LDR$sz  lr, [a3]
        SpinLock_SWP a2, ip
        LDR$sz  ip, [a1]
        TEQ     ip, lr
        STREQ$sz a4, [a1]
        SpinUnlock_SWP a2, lr
        STRNE$sz ip, [a3]
        MOVEQ   a1, #1
        MOVNE   a1, #0
        Return
      |
        FunctionEntry "v1-v4",makeframe
        LDR     lr, [fp, #4] ; Upper half of 'desired'
        LDMIA   a3, {v1-v2}
        SpinLock_SWP a2, ip
        LDMIA   a1, {v3-v4}
        TEQ     v1, v3
        TEQEQ   v2, v4
        STMEQIA a1, {a4,lr}
        SpinUnlock_SWP a2, ip
        STMNEIA a3, {v3-v4}
        MOVEQ   a1, #1
        MOVNE   a1, #0
        Return  "v1-v4",fpbased
      ]
      ]

; C _kernel_atomic_fetch_add_N(volatile void* obj, memory_order order, M arg);
      [ :DEF: Need__kernel_atomic_fetch_add_$sz2._UARMa
        FUNC    _kernel_atomic_fetch_add,,_UARMa
      [ size == 2
        MOV     ip, a1
        SpinLock_SWP a2, a4
        LDRB    a1, [ip]
        LDRB    a4, [ip, #1]
        ORR     a1, a1, a4, LSL #8
        ADD     a3, a1, a3
        STRB    a3, [ip]
        MOV     a3, a3, LSR #8
        STRB    a3, [ip, #1]
        SpinUnlock_SWP a2, a4
        Return  ,LinkNotStacked
      ELIF size < 8
        MOV     ip, a1
        SpinLock_SWP a2, a4
        LDR$sz  a1, [ip]
        ADD     a3, a1, a3
        STR$sz  a3, [ip]
        SpinUnlock_SWP a2, a4
        Return  ,LinkNotStacked
      |
        FunctionEntry "v1-v2"
        MOV     ip, a1
        SpinLock_SWP lr, v1
        LDMIA   ip, {a1-a2}
        ADDS    v1, a1, a3
        ADC     v2, a2, a4
        STMIA   ip, {v1-v2}
        SpinUnlock_SWP lr, v1
        Return  "v1-v2"
      ]
      ]

; fetch_xor, fetch_or, fetch_and are implemented using a routine which performs
; an AND & XOR pair. This helps cut down the number of routines needed, without
; slowing things down too much.

; C _kernel_atomic_fetch_xor_N(volatile void* obj, memory_order order, M arg);
      [ :DEF: Need__kernel_atomic_fetch_xor_$sz2._UARMa
        FUNC    _kernel_atomic_fetch_xor,,_UARMa
      [ size < 8
        FunctionEntry
        MVN     lr, #0
        B       andxor_UARMa_$sz2
      |
        FunctionEntry "v1-v3"
        MVN     v1, #0
        MVN     v2, #0
        B       andxor_UARMa_$sz2
      ]
      ]

; C _kernel_atomic_fetch_or_N(volatile void* obj, memory_order order, M arg);
      [ :DEF: Need__kernel_atomic_fetch_or_$sz2._UARMa
        FUNC    _kernel_atomic_fetch_or,,_UARMa
      [ size < 8
        FunctionEntry
        MVN     lr, a3
        B       andxor_UARMa_$sz2
      |
        FunctionEntry "v1-v3"
        MVN     v1, a3
        MVN     v2, a4
        B       andxor_UARMa_$sz2
      ]
      ]

; C _kernel_atomic_fetch_and_N(volatile void* obj, memory_order order, M arg);
      [ :DEF: Need__kernel_atomic_fetch_and_$sz2._UARMa
        FUNC    _kernel_atomic_fetch_and,,_UARMa
      [ size < 8
        FunctionEntry
        MOV     lr, a3
        MOV     a3, #0
        B       andxor_UARMa_$sz2
      |
        FunctionEntry "v1-v3"
        MOV     v1, a3
        MOV     v2, a4
        MOV     a3, #0
        MOV     a4, #0
        B       andxor_UARMa_$sz2
      ]
      ]

      [ :DEF: Need__kernel_atomic_fetch_xor_$sz2._UARMa :LOR: :DEF: Need__kernel_atomic_fetch_or_$sz2._UARMa :LOR: :DEF: Need__kernel_atomic_fetch_and_$sz2._UARMa
andxor_UARMa_$sz2
      [ size == 2
        MOV     ip, a1
        SpinLock_SWP a2, a4
        LDRB    a1, [ip]
        LDRB    a4, [ip, #1]
        ORR     a1, a1, a4, LSL #8
        AND     lr, a1, lr
        EOR     a3, a3, lr
        STRB    a3, [ip]
        MOV     a3, a3, LSR #8
        STRB    a3, [ip, #1]
        SpinUnlock_SWP a2, a4
        Return
      ELIF size < 8
        MOV     ip, a1
        SpinLock_SWP a2, a4
        LDR$sz  a1, [ip]
        AND     lr, a1, lr
        EOR     a3, a3, lr
        STR$sz  a3, [ip]
        SpinUnlock_SWP a2, a4
        Return
      |
        MOV     ip, a1
        SpinLock_SWP lr, v3
        LDMIA   ip, {a1-a2}
        AND     v1, a1, v1
        AND     v2, a2, v2
        EOR     v1, a3, v1
        EOR     v2, a4, v2
        STMIA   ip, {v1-v2}
        SpinUnlock_SWP lr, v3
        Return  "v1-v3"
      ]
      ]

size    SETA size*2
        WEND

        LTORG

        END
