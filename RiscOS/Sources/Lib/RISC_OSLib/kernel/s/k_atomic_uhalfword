; Copyright 2022 RISC OS Open Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

; Assumptions:
; * Single-core machine (no barriers)
; * SWP[B]
; * No need for atomicity with interrupt handlers (client is application)
; * Halfword load/store support
; Atomic loads are fine, but non-atomic loads and all stores must lock the SWP spinlock, to provide protection against preemptive multithreading

; We only deal with halfword ops here
size    SETA    2
sz      SETS    "H"
sz2     SETS    (:STR:size) :RIGHT: 1

; void _kernel_atomic_store_N(volatile void* obj, memory_order order, C desired);
      [ :DEF: Need__kernel_atomic_store_$sz2._UHalfword
        FUNC    _kernel_atomic_store,,_UHalfword
        SpinLock_SWP a2, ip
        STR$sz  a3, [a1]
        SpinUnlock_SWP a2, ip
        Return  ,LinkNotStacked
      ]

; C _kernel_atomic_load_N(volatile void* obj, memory_order order);
      [ :DEF: Need__kernel_atomic_load_$sz2._UHalfword
        FUNC    _kernel_atomic_load,,_UHalfword
        LDR$sz  a1, [a1]
        Return  ,LinkNotStacked
      ]

; C _kernel_atomic_exchange_N(volatile void* obj, memory_order order, C desired);
      [ :DEF: Need__kernel_atomic_exchange_$sz2._UHalfword
        FUNC    _kernel_atomic_exchange,,_UHalfword
        SpinLock_SWP a2, ip
        LDR$sz  a4, [a1]
        STR$sz  a3, [a1]
        SpinUnlock_SWP a2, ip
        MOV     a1, a4
        Return  ,LinkNotStacked
      ]

; _Bool _kernel_atomic_compare_exchange_weak_N(volatile void* obj, int orders, C* expected, C desired);
; _Bool _kernel_atomic_compare_exchange_strong_N(volatile void* obj, int orders, C* expected, C desired);
      [ :DEF: Need__kernel_atomic_compare_exchange_weak_$sz2._UHalfword :LOR: :DEF: Need__kernel_atomic_compare_exchange_strong_$sz2._UHalfword
        FUNC    _kernel_atomic_compare_exchange_weak,,_UHalfword
        FUNC    _kernel_atomic_compare_exchange_strong,,_UHalfword
        FunctionEntry
        LDR$sz  lr, [a3]
        SpinLock_SWP a2, ip
        LDR$sz  ip, [a1]
        TEQ     ip, lr
        STREQ$sz a4, [a1]
        SpinUnlock_SWP a2, lr
        STRNE$sz ip, [a3]
        MOVEQ   a1, #1
        MOVNE   a1, #0
        Return
      ]

; C _kernel_atomic_fetch_add_N(volatile void* obj, memory_order order, M arg);
      [ :DEF: Need__kernel_atomic_fetch_add_$sz2._UHalfword
        FUNC    _kernel_atomic_fetch_add,,_UHalfword
        MOV     ip, a1
        SpinLock_SWP a2, a4
        LDR$sz  a1, [ip]
        ADD     a3, a1, a3
        STR$sz  a3, [ip]
        SpinUnlock_SWP a2, a4
        Return  ,LinkNotStacked
      ]

; fetch_xor, fetch_or, fetch_and are implemented using a routine which performs
; an AND & XOR pair. This helps cut down the number of routines needed, without
; slowing things down too much.

; C _kernel_atomic_fetch_xor_N(volatile void* obj, memory_order order, M arg);
      [ :DEF: Need__kernel_atomic_fetch_xor_$sz2._UHalfword
        FUNC    _kernel_atomic_fetch_xor,,_UHalfword
        FunctionEntry
        MVN     lr, #0
        B       andxor_UHalfword
      ]

; C _kernel_atomic_fetch_or_N(volatile void* obj, memory_order order, M arg);
      [ :DEF: Need__kernel_atomic_fetch_or_$sz2._UHalfword
        FUNC    _kernel_atomic_fetch_or,,_UHalfword
        FunctionEntry
        MVN     lr, a3
        B       andxor_UHalfword
      ]

; C _kernel_atomic_fetch_and_N(volatile void* obj, memory_order order, M arg);
      [ :DEF: Need__kernel_atomic_fetch_and_$sz2._UHalfword
        FUNC    _kernel_atomic_fetch_and,,_UHalfword
        FunctionEntry
        MOV     lr, a3
        MOV     a3, #0
        B       andxor_UHalfword
      ]

      [ :DEF: Need__kernel_atomic_fetch_xor_$sz2._UHalfword :LOR: :DEF: Need__kernel_atomic_fetch_or_$sz2._UHalfword :LOR: :DEF: Need__kernel_atomic_fetch_and_$sz2._UHalfword
andxor_UHalfword
        MOV     ip, a1
        SpinLock_SWP a2, a4
        LDR$sz  a1, [ip]
        AND     lr, a1, lr
        EOR     a3, a3, lr
        STR$sz  a3, [ip]
        SpinUnlock_SWP a2, a4
        Return
      ]

        LTORG

        END
