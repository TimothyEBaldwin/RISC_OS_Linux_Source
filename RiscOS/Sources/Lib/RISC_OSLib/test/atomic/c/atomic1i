/* Copyright 2022 RISC OS Open Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

static void CONCAT(test_,ATOMIC) (const BASE a,const BASE b,const BASE c)
{
  /* Allocate an aligned block of memory, because Norcroft can't guarantee 8 byte alignment */
  uintptr_t memptr = (uintptr_t) malloc(sizeof(CONCAT(atomic_,ATOMIC)) + 8);
  CONCAT(atomic_,ATOMIC) *Aptr = (CONCAT(atomic_,ATOMIC) *) ((memptr + 7)&~7);
//  _Atomic(BASE) *Aptr = (_Atomic(BASE) *) ((memptr + 7)&~7);

  BASE t,s;
  bool x;

  printf("%s\n",__func__);

  atomic_init(Aptr, a);
  t = atomic_load(Aptr);
  assert(t == a);

  atomic_store(Aptr, b);
  t = atomic_load(Aptr);
  assert(t == b);

  t = atomic_exchange(Aptr, a);
  assert(t == b);
  t = atomic_load(Aptr);
  assert(t == a);

  /* Successful compare-exchange */
  t = a;
  x = atomic_compare_exchange_strong(Aptr, &t, b);
  assert(x);
  assert(t == a);
  t = atomic_load(Aptr);
  assert(t == b);

  /* Failing compare-exchange */
  t = a;
  x = atomic_compare_exchange_strong(Aptr, &t, c);
  assert(!x);
  assert(t == b);
  t = atomic_load(Aptr);
  assert(t == b);

  /* add/sub */
  t = atomic_fetch_add(Aptr, c);
  assert(t == b);
  s = b+c;
  t = atomic_load(Aptr);
  assert(t == s);
  t = atomic_fetch_add(Aptr, c);
  assert(t == s);
  s += c;
  t = atomic_load(Aptr);
  assert(t == s);
  t = atomic_fetch_sub(Aptr, a);
  assert(t == s);
  s -= a;
  t = atomic_load(Aptr);
  assert(t == s);

  /* bitwise ops */
  atomic_store(Aptr, b);
  t = atomic_fetch_or(Aptr, c);
  assert(t == b);
  s = b | c;
  t = atomic_load(Aptr);
  assert(t == s);

  atomic_store(Aptr, b);
  t = atomic_fetch_xor(Aptr, c);
  assert(t == b);
  s = b ^ c;
  t = atomic_load(Aptr);
  assert(t == s);

  atomic_store(Aptr, b);
  t = atomic_fetch_and(Aptr, c);
  assert(t == b);
  s = b & c;
  t = atomic_load(Aptr);
  assert(t == s);

  free((void *) memptr);
}

#undef ATOMIC
#undef BASE
