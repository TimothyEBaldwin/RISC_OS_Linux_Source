/* Copyright 2022 RISC OS Open Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#if defined(ORDER_RELAXED) || defined(ORDER_ACQUIRE)
static clock_t BFUNC(bench_load_)(uint32_t iters)
{
  /* Allocate an aligned block of memory, because Norcroft can't guarantee 8 byte alignment */
  uintptr_t memptr = (uintptr_t) malloc(sizeof(CONCAT(PREFIX,ATOMIC)) + 8);
  CONCAT(PREFIX,ATOMIC) *Aptr = (CONCAT(PREFIX,ATOMIC) *) ((memptr + 7)&~7);

  CONCAT(PREFIX,store_explicit)(Aptr,1,memory_order_seq_cst);
  BASE sum = 0;

  clock_t t = clock();
  while(iters--)
  {
    sum += CONCAT(PREFIX,load_explicit)(Aptr,CONCAT(memory_order_,ORDER));
  }
  t = clock()-t;
  consume(&sum);

  free((void *) memptr);
  return t;
}
#endif

#if defined(ORDER_RELAXED) || defined(ORDER_RELEASE)
static clock_t BFUNC(bench_store_)(uint32_t iters)
{
  /* Allocate an aligned block of memory, because Norcroft can't guarantee 8 byte alignment */
  uintptr_t memptr = (uintptr_t) malloc(sizeof(CONCAT(PREFIX,ATOMIC)) + 8);
  CONCAT(PREFIX,ATOMIC) *Aptr = (CONCAT(PREFIX,ATOMIC) *) ((memptr + 7)&~7);

  CONCAT(PREFIX,store_explicit)(Aptr,1,memory_order_seq_cst);
  BASE sum = 0;

  clock_t t = clock();
  while(iters--)
  {
    sum++;
    CONCAT(PREFIX,store_explicit)(Aptr,sum,CONCAT(memory_order_,ORDER));
  }
  t = clock()-t;
  sum = CONCAT(PREFIX,load_explicit)(Aptr,memory_order_seq_cst);
  consume(&sum);

  free((void *) memptr);
  return t;
}
#endif

static clock_t BFUNC(bench_exchange_)(uint32_t iters)
{
  /* Allocate an aligned block of memory, because Norcroft can't guarantee 8 byte alignment */
  uintptr_t memptr = (uintptr_t) malloc(sizeof(CONCAT(PREFIX,ATOMIC)) + 8);
  CONCAT(PREFIX,ATOMIC) *Aptr = (CONCAT(PREFIX,ATOMIC) *) ((memptr + 7)&~7);

  CONCAT(PREFIX,store_explicit)(Aptr,1,memory_order_seq_cst);
  BASE sum = 0;

  clock_t t = clock();
  while(iters--)
  {
    sum += CONCAT(PREFIX,exchange_explicit)(Aptr,sum,CONCAT(memory_order_,ORDER));
  }
  t = clock()-t;
  consume(&sum);

  free((void *) memptr);
  return t;
}

static clock_t BFUNC(bench_compare_exchange_weak_succ_)(uint32_t iters)
{
  /* Allocate an aligned block of memory, because Norcroft can't guarantee 8 byte alignment */
  uintptr_t memptr = (uintptr_t) malloc(sizeof(CONCAT(PREFIX,ATOMIC)) + 8);
  CONCAT(PREFIX,ATOMIC) *Aptr = (CONCAT(PREFIX,ATOMIC) *) ((memptr + 7)&~7);

  CONCAT(PREFIX,store_explicit)(Aptr,1,memory_order_seq_cst);
  BASE actual = 1;
  bool good = false;

  clock_t t = clock();
  while(iters--)
  {
    BASE toggle = actual;
    actual ^= 1;
    bool ok = CONCAT(PREFIX,compare_exchange_weak_explicit)(Aptr,&toggle,actual,CONCAT(memory_order_,ORDER),CONCAT(memory_order_,ORDER2));
    if (!ok) actual = toggle; /* Weak may spuriously fail, reset and try again */
    good |= ok;
  }
  t = clock()-t;
  assert(good); /* Require at least one pass */

  free((void *) memptr);
  return t;
}

static clock_t BFUNC(bench_compare_exchange_weak_fail_)(uint32_t iters)
{
  /* Allocate an aligned block of memory, because Norcroft can't guarantee 8 byte alignment */
  uintptr_t memptr = (uintptr_t) malloc(sizeof(CONCAT(PREFIX,ATOMIC)) + 8);
  CONCAT(PREFIX,ATOMIC) *Aptr = (CONCAT(PREFIX,ATOMIC) *) ((memptr + 7)&~7);

  CONCAT(PREFIX,store_explicit)(Aptr,1,memory_order_seq_cst);
  bool good = false;
  BASE actual = 123;

  clock_t t = clock();
  while(iters--)
  {
    BASE toggle = 0;
    good |= CONCAT(PREFIX,compare_exchange_weak_explicit)(Aptr,&toggle,actual,CONCAT(memory_order_,ORDER),CONCAT(memory_order_,ORDER2));
  }
  t = clock()-t;
  assert(!good);

  free((void *) memptr);
  return t;
}

static clock_t BFUNC(bench_compare_exchange_strong_succ_)(uint32_t iters)
{
  /* Allocate an aligned block of memory, because Norcroft can't guarantee 8 byte alignment */
  uintptr_t memptr = (uintptr_t) malloc(sizeof(CONCAT(PREFIX,ATOMIC)) + 8);
  CONCAT(PREFIX,ATOMIC) *Aptr = (CONCAT(PREFIX,ATOMIC) *) ((memptr + 7)&~7);

  CONCAT(PREFIX,store_explicit)(Aptr,1,memory_order_seq_cst);
  bool good = true;
  BASE actual = 1;

  clock_t t = clock();
  while(iters--)
  {
    BASE toggle = actual;
    actual ^= 1;
    good &= CONCAT(PREFIX,compare_exchange_strong_explicit)(Aptr,&toggle,actual,CONCAT(memory_order_,ORDER),CONCAT(memory_order_,ORDER2));
  }
  t = clock()-t;
  assert(good);

  free((void *) memptr);
  return t;
}

static clock_t BFUNC(bench_compare_exchange_strong_fail_)(uint32_t iters)
{
  /* Allocate an aligned block of memory, because Norcroft can't guarantee 8 byte alignment */
  uintptr_t memptr = (uintptr_t) malloc(sizeof(CONCAT(PREFIX,ATOMIC)) + 8);
  CONCAT(PREFIX,ATOMIC) *Aptr = (CONCAT(PREFIX,ATOMIC) *) ((memptr + 7)&~7);

  CONCAT(PREFIX,store_explicit)(Aptr,1,memory_order_seq_cst);
  bool good = false;
  BASE actual = 123;

  clock_t t = clock();
  while(iters--)
  {
    BASE toggle = 0;
    good |= CONCAT(PREFIX,compare_exchange_strong_explicit)(Aptr,&toggle,actual,CONCAT(memory_order_,ORDER),CONCAT(memory_order_,ORDER2));
  }
  t = clock()-t;
  assert(!good);

  free((void *) memptr);
  return t;
}

static clock_t BFUNC(bench_add_)(uint32_t iters)
{
  /* Allocate an aligned block of memory, because Norcroft can't guarantee 8 byte alignment */
  uintptr_t memptr = (uintptr_t) malloc(sizeof(CONCAT(PREFIX,ATOMIC)) + 8);
  CONCAT(PREFIX,ATOMIC) *Aptr = (CONCAT(PREFIX,ATOMIC) *) ((memptr + 7)&~7);

  CONCAT(PREFIX,store_explicit)(Aptr,1,memory_order_seq_cst);
  BASE sum = 0;

  clock_t t = clock();
  while(iters--)
  {
    sum = CONCAT(PREFIX,fetch_add_explicit)(Aptr,sum,CONCAT(memory_order_,ORDER));
  }
  t = clock()-t;
  consume(&sum);

  free((void *) memptr);
  return t;
}

static clock_t BFUNC(bench_xor_)(uint32_t iters)
{
  /* Allocate an aligned block of memory, because Norcroft can't guarantee 8 byte alignment */
  uintptr_t memptr = (uintptr_t) malloc(sizeof(CONCAT(PREFIX,ATOMIC)) + 8);
  CONCAT(PREFIX,ATOMIC) *Aptr = (CONCAT(PREFIX,ATOMIC) *) ((memptr + 7)&~7);

  CONCAT(PREFIX,store_explicit)(Aptr,1,memory_order_seq_cst);
  BASE sum = 123;

  clock_t t = clock();
  while(iters--)
  {
    sum = CONCAT(PREFIX,fetch_xor_explicit)(Aptr,sum,CONCAT(memory_order_,ORDER));
  }
  t = clock()-t;
  consume(&sum);

  free((void *) memptr);
  return t;
}

#undef ORDER
#undef ORDER2
#undef PREFIX
#undef ORDER_RELAXED
#undef ORDER_ACQUIRE
#undef ORDER_RELEASE
#undef ORDER_ACQ_REL
