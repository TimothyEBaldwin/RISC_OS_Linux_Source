; Copyright 2005 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; Count leading/trailing zeros/ones without using the CLZ instruction
; Copyright (C) 2004 Castle Technology Ltd
; Author: Ben Avison

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:APCS.<APCS>
        GET     Hdr:CPU.Arch

        AREA    |Asm$$Code|, CODE, READONLY

        EXPORT  |clz|
        EXPORT  |ctz|
        EXPORT  |clo|
        EXPORT  |cto|
        EXPORT  |clz64|
        EXPORT  |ctz64|
        EXPORT  |clo64|
        EXPORT  |cto64|

|clo|
      [ NoARMv5
        ANDS    a4, a1, a1, ASR #1
        MOVPL   a1, #0
        ANDMI   a1, a4, a4, ASR #2
        Return  , LinkNotStacked, PL
        AND     a1, a1, a1, ASR #4
        LDR     a2, =&06C9C57D
        AND     a1, a1, a1, ASR #8
        ADR     a3, table
        AND     a1, a1, a1, ASR #16
        RSB     a1, a1, #0
        MUL     a1, a2, a1
        LDRB    a1, [a3, a1, LSR #27]
        Return  , LinkNotStacked
      |
        MVN     a1, a1
        ; drop through...
      ]

|clz|
      [ NoARMv5
        ORRS    a4, a1, a1, LSR #1
        MOVEQ   a1, #32
        ORRNE   a1, a4, a4, LSR #2
        Return  , LinkNotStacked, EQ
        ORR     a1, a1, a1, LSR #4
        LDR     a2, =&06C9C57D
        ORR     a1, a1, a1, LSR #8
        ADR     a3, table
        ORR     a1, a1, a1, LSR #16
        MLAS    a1, a2, a1, a2
        LDRNEB  a1, [a3, a1, LSR #27]
      |
        CLZ     a1, a1
      ]
        Return  , LinkNotStacked

|cto|
      [ NoARMv5
        ADDS    a4, a1, #1
        MOVEQ   a1, #32
        Return  , LinkNotStacked, EQ
        LDR     a2, =&06C9C57D
        BIC     a1, a4, a1
        MUL     a1, a2, a1
        ADR     a3, table
        LDRB    a1, [a3, a1, LSR #27]
        RSB     a1, a1, #32
        Return  , LinkNotStacked
      |
        MVN     a1, a1
        ; drop through...
      ]

|ctz|
        SUBS    a4, a1, #1
        MOVCC   a1, #32
        Return  , LinkNotStacked, CC
      [ NoARMv5
        LDR     a2, =&06C9C57D
        BIC     a1, a1, a4
        MUL     a1, a2, a1
        ADR     a3, table
        LDRB    a1, [a3, a1, LSR #27]
        RSB     a1, a1, #32
      |
        BIC     a4, a1, a4 ; identifies the bit position at which the borrow stopped
        CLZ     a1, a4
        RSB     a1, a1, #31
      ]
        Return  , LinkNotStacked

      [ NoARMv5
table
        = 32, 31, 14, 30, 22, 13, 29, 19,  2, 21, 12, 10, 25, 28, 18,  8
        =  1, 15, 23, 20,  3, 11, 26,  9, 16, 24,  4, 27, 17,  5,  6,  7
      ]

|clz64|
        FunctionEntry "v1"
        CMP     a2, #0
        MOVNE   a1, a2
        MOVNE   v1, #0
        MOVEQ   v1, #32
        BL      |clz|
        ADD     a1, a1, v1
        Return  "v1"

|ctz64|
        FunctionEntry "v1"
        CMP     a1, #0
        MOVEQ   a1, a2
        MOVNE   v1, #0
        MOVEQ   v1, #32
        BL      |ctz|
        ADD     a1, a1, v1
        Return  "v1"

|clo64|
        FunctionEntry "v1"
        CMP     a2, #-1
        MOVNE   a1, a2
        MOVNE   v1, #0
        MOVEQ   v1, #32
        BL      |clo|
        ADD     a1, a1, v1
        Return  "v1"

|cto64|
        FunctionEntry "v1"
        CMP     a1, #-1
        MOVEQ   a1, a2
        MOVNE   v1, #0
        MOVEQ   v1, #32
        BL      |cto|
        ADD     a1, a1, v1
        Return  "v1"

        END
