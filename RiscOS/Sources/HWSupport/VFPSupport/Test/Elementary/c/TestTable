/*
 * Copyright (c) 2021 RISC OS Open Limited
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

static const test_t tests[] =
{
 /* Name                args            lo                     hi                     lo          hi          */
    /* Valid for all x */
    CALL_NAME(sin),   { true,  { true,  0x0000000000000000uLL, 0x7FEFFFFFFFFFFFFFuLL, 0x00000000, 0x7F7FFFFF }, /* +ve */
                               { true,  0x8000000000000000uLL, 0xFFEFFFFFFFFFFFFFuLL, 0x80000000, 0xFF7FFFFF }, /* -ve */
                        false,
                      },
    /* Valid for all x */
    CALL_NAME(cos),   { true,  { true,  0x0000000000000000uLL, 0x7FEFFFFFFFFFFFFFuLL, 0x00000000, 0x7F7FFFFF }, /* +ve */
                               { true,  0x8000000000000000uLL, 0xFFEFFFFFFFFFFFFFuLL, 0x80000000, 0xFF7FFFFF }, /* -ve */
                        false,
                      },
    /* Valid for all x */
    CALL_NAME(tan),   { true,  { true,  0x0000000000000000uLL, 0x7FEFFFFFFFFFFFFFuLL, 0x00000000, 0x7F7FFFFF }, /* +ve */
                               { true,  0x8000000000000000uLL, 0xFFEFFFFFFFFFFFFFuLL, 0x80000000, 0xFF7FFFFF }, /* -ve */
                        false,
                      },
    /* Valid for -1 >= x <= 1 */
    CALL_NAME(asin),  { true,  { true,  0x0000000000000000uLL, 0x3FF0000000000000uLL, 0x00000000, 0x3F800000 }, /* +ve */
                               { true,  0x8000000000000000uLL, 0xBFF0000000000000uLL, 0x80000000, 0xBF800000 }, /* -ve */
                        false,
                      },
    /* Valid for -1 >= x <= 1 */
    CALL_NAME(acos),  { true,  { true,  0x0000000000000000uLL, 0x3FF0000000000000uLL, 0x00000000, 0x3F800000 }, /* +ve */
                               { true,  0x8000000000000000uLL, 0xBFF0000000000000uLL, 0x80000000, 0xBF800000 }, /* -ve */
                        false,
                      },
    /* Valid for all x */
    CALL_NAME(atan),  { true,  { true,  0x0000000000000000uLL, 0x7FEFFFFFFFFFFFFFuLL, 0x00000000, 0x7F7FFFFF }, /* +ve */
                               { true,  0x8000000000000000uLL, 0xFFEFFFFFFFFFFFFFuLL, 0x80000000, 0xFF7FFFFF }, /* -ve */
                        false,
                      },
#if 0
    /* There's no CRLIBM version of this to test values against, but since it's just atan() with the right
     * quadrant signs let's assume the values are already right and catch anomalies in the exception checking later.
     */
    CALL_NAME(atan2), { true,  { true,  0x0010000000000000uLL, 0x7FEFFFFFFFFFFFFFuLL, 0x00800000, 0x7F7FFFFF }, /* +ve */
                               { true,  0x0010000000000000uLL, 0x7FEFFFFFFFFFFFFFuLL, 0x00800000, 0x7F7FFFFF }, /* -ve */
                        true,  { true,  0x0010000000000000uLL, 0x7FEFFFFFFFFFFFFFuLL, 0x00800000, 0x7F7FFFFF }, /* +ve */
                               { true,  0x0010000000000000uLL, 0x7FEFFFFFFFFFFFFFuLL, 0x00800000, 0x7F7FFFFF }, /* -ve */
                      },
#endif
    /* Valid for positive x */
    CALL_NAME(log),   { true,  { true,  0x0000000000000000uLL, 0x7FEFFFFFFFFFFFFFuLL, 0x00000000, 0x7F7FFFFF }, /* +ve */
                               { false, 0x0000000000000000uLL, 0x0000000000000000uLL, 0x00000000, 0x00000000 }, /* -ve */
                        false,
                      },
    /* Valid for positive x */
    CALL_NAME(log10), { true,  { true,  0x0000000000000000uLL, 0x7FEFFFFFFFFFFFFFuLL, 0x00000000, 0x7F7FFFFF }, /* +ve */
                               { false, 0x0000000000000000uLL, 0x0000000000000000uLL, 0x00000000, 0x00000000 }, /* -ve */
                        false,
                      },
    /* Valid for all x */
    CALL_NAME(exp),   { true,  { true,  0x0000000000000000uLL, 0x7FEFFFFFFFFFFFFFuLL, 0x00000000, 0x7F7FFFFF }, /* +ve */
                               { true,  0x8000000000000000uLL, 0xFFEFFFFFFFFFFFFFuLL, 0x80000000, 0xFF7FFFFF }, /* -ve */
                        false,
                      },
    /* Valid for positive x and all y, though to save time stop for y > 2^64 as it'll overflow
     *           all x and integer y (discretely tested during exception checking)
     */
    CALL_NAME(pow),   { true,  { true,  0x0000000000000000uLL, 0x7FEFFFFFFFFFFFFFuLL, 0x00000000, 0x7F7FFFFF }, /* +ve */
                               { false, 0x0000000000000000uLL, 0x0000000000000000uLL, 0x00000000, 0x00000000 }, /* -ve */
                        true,  { true,  0x0000000000000000uLL, 0x43FFFFFFFFFFFFFFuLL, 0x00000000, 0x5FFFFFFF }, /* +ve */
                               { true,  0x8000000000000000uLL, 0xC3FFFFFFFFFFFFFFuLL, 0x80000000, 0xDFFFFFFF }, /* -ve */
                      }
};

static const exception_t edges[] =
{
 /* Name                args   in                     in        */
    /* Top right quadrant (1,1) => pi/4 */
    CALL_NAME(atan2), { true,  0x3FF0000000000000uLL, 0x3F800000, /* arg0 */
                        true,  0x3FF0000000000000uLL, 0x3F800000, /* arg1 */
                      },       0x3FE921FB54442D18uLL, 0x3F490FDB, /* Result */
                               0x00,
                               0x00,
    /* Top left quadrant (-1,1) => -pi/4 */
    CALL_NAME(atan2), { true,  0xBFF0000000000000uLL, 0xBF800000, /* arg0 */
                        true,  0x3FF0000000000000uLL, 0x3F800000, /* arg1 */
                      },       0xBFE921FB54442D18uLL, 0xBF490FDB, /* Result */
                               0x00,
                               0x00,
    /* Bottom right quadrant (1,-1) => 3pi/4 */
    CALL_NAME(atan2), { true,  0x3FF0000000000000uLL, 0x3F800000, /* arg0 */
                        true,  0xBFF0000000000000uLL, 0xBF800000, /* arg1 */
                      },       0x4002D97C7F3321D2uLL, 0x4016CBE4, /* Result */
                               0x00,
                               0x00,
    /* Bottom left quadrant (-1,-1) => -3pi/4*/
    CALL_NAME(atan2), { true,  0xBFF0000000000000uLL, 0xBF800000, /* arg0 */
                        true,  0xBFF0000000000000uLL, 0xBF800000, /* arg1 */
                      },       0xC002D97C7F3321D2uLL, 0xC016CBE4, /* Result */
                               0x00,
                               0x00,
    /* Integer pow -1024^3 = -2^30 */
    CALL_NAME(pow),   { true,  0xC090000000000000uLL, 0xC0200000, /* arg0 */
                        true,  0x4008000000000000uLL, 0x40400000, /* arg1 */
                      },       0xC1D0000000000000uLL, 0xC17A0000, /* Result */
                               0x00,
                               0x00,
    /* Integer pow -1024^2 = 2^20 even power is positive, and x^2 peephole */
    CALL_NAME(pow),   { true,  0xC090000000000000uLL, 0xC0200000, /* arg0 */
                        true,  0x4000000000000000uLL, 0x40000000, /* arg1 */
                      },       0x4130000000000000uLL, 0x40C80000, /* Result */
                               0x00,
                               0x00,
    /* Integer pow -1024^1 = -2^10 */
    CALL_NAME(pow),   { true,  0xC090000000000000uLL, 0xC0200000, /* arg0 */
                        true,  0x3FF0000000000000uLL, 0x3F800000, /* arg1 */
                      },       0xC090000000000000uLL, 0xC0200000, /* Result */
                               0x00,
                               0x00,
    /* Integer pow -1024^0 = 0 even power is positive */
    CALL_NAME(pow),   { true,  0xC090000000000000uLL, 0xC0200000, /* arg0 */
                        true,  0x0000000000000000uLL, 0x00000000, /* arg1 */
                      },       0x3FF0000000000000uLL, 0x3F800000, /* Result */
                               0x00,
                               0x00,
    /* sin ±INF is invalid */
    CALL_NAME(sin),   { true,  0x7FF0000000000000uLL, 0x7F800000, /* arg0 */
                        false,                                    /* arg1 */
                      },       QNaN64,                QNaN32,     /* Result */
                               FPSCR_IOC | FPSCR_DZC | FPSCR_IXC,
                               FPSCR_IOC,
    CALL_NAME(sin),   { true,  0xFFF0000000000000uLL, 0xFF800000, /* arg0 */
                        false,                                    /* arg1 */
                      },       QNaN64,                QNaN32,     /* Result */
                               FPSCR_IOC | FPSCR_DZC | FPSCR_IXC,
                               FPSCR_IOC,
    /* cos ±INF is invalid */
    CALL_NAME(cos),   { true,  0x7FF0000000000000uLL, 0x7F800000, /* arg0 */
                        false,                                    /* arg1 */
                      },       QNaN64,                QNaN32,     /* Result */
                               FPSCR_IOC | FPSCR_DZC | FPSCR_IXC,
                               FPSCR_IOC,
    CALL_NAME(cos),   { true,  0xFFF0000000000000uLL, 0xFF800000, /* arg0 */
                        false,                                    /* arg1 */
                      },       QNaN64,                QNaN32,     /* Result */
                               FPSCR_IOC | FPSCR_DZC | FPSCR_IXC,
                               FPSCR_IOC,
    /* tan ±INF is invalid */
    CALL_NAME(tan),   { true,  0x7FF0000000000000uLL, 0x7F800000, /* arg0 */
                        false,                                    /* arg1 */
                      },       QNaN64,                QNaN32,     /* Result */
                               FPSCR_IOC | FPSCR_DZC | FPSCR_IXC,
                               FPSCR_IOC,
    CALL_NAME(tan),   { true,  0xFFF0000000000000uLL, 0xFF800000, /* arg0 */
                        false,                                    /* arg1 */
                      },       QNaN64,                QNaN32,     /* Result */
                               FPSCR_IOC | FPSCR_DZC | FPSCR_IXC,
                               FPSCR_IOC,
    /* asin where |x| > 1 is invalid */
    CALL_NAME(asin),  { true,  0x3FF0000000000001uLL, 0x3F800001, /* arg0 */
                        false,                                    /* arg1 */
                      },       QNaN64,                QNaN32,     /* Result */
                               FPSCR_IOC | FPSCR_DZC | FPSCR_IXC,
                               FPSCR_IOC,
    CALL_NAME(asin),  { true,  0xBFF0000000000001uLL, 0xBF800001, /* arg0 */
                        false,                                    /* arg1 */
                      },       QNaN64,                QNaN32,     /* Result */
                               FPSCR_IOC | FPSCR_DZC | FPSCR_IXC,
                               FPSCR_IOC,
    /* acos where |x| > 1 is invalid */
    CALL_NAME(acos),  { true,  0x3FF0000000000001uLL, 0x3F800001, /* arg0 */
                        false,                                    /* arg1 */
                      },       QNaN64,                QNaN32,     /* Result */
                               FPSCR_IOC | FPSCR_DZC | FPSCR_IXC,
                               FPSCR_IOC,
    CALL_NAME(acos),  { true,  0xBFF0000000000001uLL, 0xBF800001, /* arg0 */
                        false,                                    /* arg1 */
                      },       QNaN64,                QNaN32,     /* Result */
                               FPSCR_IOC | FPSCR_DZC | FPSCR_IXC,
                               FPSCR_IOC,
    /* log[10] of ±0 is divide by zero */
    CALL_NAME(log),   { true,  0x0000000000000000uLL, 0x00000000, /* arg0 */
                        false,                                    /* arg1 */
                      },       QNaN64,                QNaN32,     /* Result */
                               FPSCR_IOC | FPSCR_DZC | FPSCR_IXC,
                               FPSCR_DZC,
    CALL_NAME(log),   { true,  0x8000000000000000uLL, 0x80000000, /* arg0 */
                        false,                                    /* arg1 */
                      },       QNaN64,                QNaN32,     /* Result */
                               FPSCR_IOC | FPSCR_DZC | FPSCR_IXC,
                               FPSCR_DZC,
    CALL_NAME(log10), { true,  0x0000000000000000uLL, 0x00000000, /* arg0 */
                        false,                                    /* arg1 */
                      },       QNaN64,                QNaN32,     /* Result */
                               FPSCR_IOC | FPSCR_DZC | FPSCR_IXC,
                               FPSCR_DZC,
    CALL_NAME(log10), { true,  0x8000000000000000uLL, 0x80000000, /* arg0 */
                        false,                                    /* arg1 */
                      },       QNaN64,                QNaN32,     /* Result */
                               FPSCR_IOC | FPSCR_DZC | FPSCR_IXC,
                               FPSCR_DZC,
    /* log[10] of < 0 is invalid */
    CALL_NAME(log),   { true,  0x8010000000000000uLL, 0x80800000, /* arg0 */
                        false,                                    /* arg1 */
                      },       QNaN64,                QNaN32,     /* Result */
                               FPSCR_IOC | FPSCR_DZC | FPSCR_IXC,
                               FPSCR_IOC,
    CALL_NAME(log10), { true,  0x8010000000000000uLL, 0x80800000, /* arg0 */
                        false,                                    /* arg1 */
                      },       QNaN64,                QNaN32,     /* Result */
                               FPSCR_IOC | FPSCR_DZC | FPSCR_IXC,
                               FPSCR_IOC,
    /* pow of ±0^-odd integer is divide by zero */
    CALL_NAME(pow),   { true,  0x0000000000000000uLL, 0x00000000, /* arg0 */
                        true,  0xC008000000000000uLL, 0xC0400000, /* arg1 */
                      },       QNaN64,                QNaN32,     /* Result */
                               FPSCR_IOC | FPSCR_DZC | FPSCR_IXC,
                               FPSCR_DZC,
    CALL_NAME(pow),   { true,  0x8000000000000000uLL, 0x80000000, /* arg0 */
                        true,  0xC008000000000000uLL, 0xC0400000, /* arg1 */
                      },       QNaN64,                QNaN32,     /* Result */
                               FPSCR_IOC | FPSCR_DZC | FPSCR_IXC,
                               FPSCR_DZC,
    /* pow of ±0^-other is divide by zero */
    CALL_NAME(pow),   { true,  0x0000000000000000uLL, 0x00000000, /* arg0 */
                        true,  0xBFF1234000000000uLL, 0xBF812340, /* arg1 */
                      },       QNaN64,                QNaN32,     /* Result */
                               FPSCR_IOC | FPSCR_DZC | FPSCR_IXC,
                               FPSCR_DZC,
    CALL_NAME(pow),   { true,  0x8000000000000000uLL, 0x80000000, /* arg0 */
                        true,  0xBFF1234000000000uLL, 0xBF812340, /* arg1 */
                      },       QNaN64,                QNaN32,     /* Result */
                               FPSCR_IOC | FPSCR_DZC | FPSCR_IXC,
                               FPSCR_DZC,
    /* pow of x < 0 and y not integer is invalid (-ve root) */
    CALL_NAME(pow),   { true,  0xBFF0000000000000uLL, 0xBF800000, /* arg0 */
                        true,  0x3FF1234000000000uLL, 0x3F812340, /* arg1 */
                      },       QNaN64,                QNaN32,     /* Result */
                               FPSCR_IOC | FPSCR_DZC | FPSCR_IXC,
                               FPSCR_IOC
};
