/*
 * Copyright (c) 2021 RISC OS Open Limited
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#include <stdio.h>
#include <stdint.h>
#include "crlibm.h"

typedef union
{
    uint64_t i;
    double   d;
} convert64_t;

typedef union
{
    uint32_t i;
    float    f;
} convert32_t;

#define CRLIBM32_1ARG(name) \
    uint32_t crlibm32_ ## name (uint32_t a1) \
    { \
        convert32_t ac1; \
        ac1.i = a1; \
        ac1.f = (float)name ## _rn((double)ac1.f); \
        return ac1.i; \
    }

#define CRLIBM32_2ARG(name) \
    uint32_t crlibm32_ ## name (uint32_t a1, uint32_t a2) \
    { \
        convert32_t ac1, ac2; \
        ac1.i = a1; \
        ac2.i = a2; \
        ac1.f = (float)name ## _rn((double)ac1.f, (double)ac2.f); \
        return ac1.i; \
    }

#define CRLIBM64_1ARG(name) \
    uint64_t crlibm64_ ## name (uint64_t a1) \
    { \
        convert64_t ac1; \
        ac1.i = a1; \
        ac1.d = name ## _rn(ac1.d); \
        return ac1.i; \
    }

#define CRLIBM64_2ARG(name) \
    uint64_t crlibm64_ ## name (uint64_t a1, uint64_t a2) \
    { \
        convert64_t ac1, ac2; \
        ac1.i = a1; \
        ac2.i = a2; \
        ac1.d = name ## _rn(ac1.d, ac2.d); \
        return ac1.i; \
    }

uint32_t crlibm32_atan2(uint32_t y, uint32_t x) { return 0; /* MIA */ }
uint64_t crlibm64_atan2(uint64_t y, uint64_t x) { return 0; /* MIA */ }

CRLIBM32_1ARG(sin)
CRLIBM32_1ARG(cos)
CRLIBM32_1ARG(tan)
CRLIBM32_1ARG(asin)
CRLIBM32_1ARG(acos)
CRLIBM32_1ARG(atan)
CRLIBM32_1ARG(log)
CRLIBM32_1ARG(log10)
CRLIBM32_1ARG(exp)
CRLIBM32_2ARG(pow)

CRLIBM64_1ARG(sin)
CRLIBM64_1ARG(cos)
CRLIBM64_1ARG(tan)
CRLIBM64_1ARG(asin)
CRLIBM64_1ARG(acos)
CRLIBM64_1ARG(atan)
CRLIBM64_1ARG(log)
CRLIBM64_1ARG(log10)
CRLIBM64_1ARG(exp)
CRLIBM64_2ARG(pow)
