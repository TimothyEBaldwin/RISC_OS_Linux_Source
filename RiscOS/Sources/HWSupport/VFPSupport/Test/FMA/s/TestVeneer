;
; Copyright (c) 2021 RISC OS Open Limited
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met:
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of RISC OS Open Ltd nor the names of its contributors
;       may be used to endorse or promote products derived from this software
;       without specific prior written permission.
;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
; POSSIBILITY OF SUCH DAMAGE.
;

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:FSNumbers
        GET     Hdr:NewErrors
        GET     Hdr:VFPSupport

        GBLL    BehaveLikeVFP
BehaveLikeVFP SETL {TRUE}
        GBLL    UseSharedCLib
UseSharedCLib SETL {FALSE}

        AREA    |test$$Code|, CODE, READONLY, PIC
        ARM

        GET     Macros.s
        GET     CMath.s

        ; float fp32muladd(float x, float y, float z)
        ; Compute z + (x * y) with a single rounding error.
hw32muladd
        VFMA.F32 s2,s0,s1
        VMOV.F32 s0,s2
        BX      lr

        ; double fp64muladd(double x, double y, double z)
        ; Compute z + (x * y) with a single rounding error.
hw64muladd
        VFMA.F64 d2,d0,d1
        VMOV.F64 d0,d2
        BX      lr

        EXPORT  norcroft_native_fmaf
        EXPORT  norcroft_emu_fmaf
        EXPORT  norcroft_overheadf
        EXPORT  norcroft_native_fma
        EXPORT  norcroft_emu_fma
        EXPORT  norcroft_overhead
        EXPORT  float_raise
        EXPORT  RaiseException
        IMPORT  soft_fpscr
        IMPORT  fused32_muladd
        IMPORT  fused64_muladd

        ; Horrendous calling standard abuse to pass in integer registers
        ; as floats to avoid lots of FPA loads and stores
norcroft_native_fmaf
        VMOV    s0,r0
        VMOV    s1,r1
        VMOV    s2,r2
        Push    "lr"
        BL      hw32muladd
        VMOV    r0,s0
        Pull    "pc"

norcroft_emu_fmaf
        VMOV    s0,r0
        VMOV    s1,r1
        VMOV    s2,r2
        Push    "lr"
        BL      fused32_muladd
        VMOV    r0,s0
        Pull    "pc"

norcroft_native_fma
        VMOV    d0,r1,r0                ; Note FPA word order swap
        VMOV    d1,r3,r2                ; Note FPA word order swap
        LDMIA   sp,{r0-r1}
        VMOV    d2,r1,r0                ; Note FPA word order swap
        Push    "lr"
        BL      hw64muladd
        VMOV    r1,r0,d0                ; Swap back
        Pull    "pc"

norcroft_emu_fma
        VMOV    d0,r1,r0                ; Note FPA word order swap
        VMOV    d1,r3,r2                ; Note FPA word order swap
        LDMIA   sp,{r0-r1}
        VMOV    d2,r1,r0                ; Note FPA word order swap
        Push    "lr"
        BL      fused64_muladd
        VMOV    r1,r0,d0                ; Swap back
        Pull    "pc"

norcroft_overhead
norcroft_overheadf
        ; Just to time loop overheads
        Push    "lr"
        Pull    "pc"

float_raise
RaiseException
        ; Implemented fully in VFPSupport
        LDRB    r2, soft_fpscr
        ORR     r2, r2, r0              ; Accumulate flags
        STRB    r2, soft_fpscr
        BX      lr

        END
