/* Copyright 2019 RISC OS Open Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @brief CompressPNG module memory functions
 *
 * This part provides memory handling for the module.  It uses a set of dynamic areas which can
 * be easily removed if a task dies without tidying up.  Within the area, memory is managed with OS_Heap.
 */

#ifndef __compresspng_memory_h
#define __compresspng_memory_h

#include "libpng/png.h"

/* Maximum size of the dynamic area created.  This will limit the size of any interlaced PNG being generated */
#define MAX_AREA_SIZE  32*1024*1024

/** @brief memory handler structure
 *
 * This structure contains key details for the memory manager.  The set is contained as a linked list in the RMA.
 *
 */
typedef struct _cpngmem
{
  int taskh;             /**< Task handle of client */
  int area;              /**< Dynamic area handle   */
  int *base;             /**< Dynamic area (and heap) base address */
  struct _cpngmem *next; /**< pointer to next entry, or NULL */
} cpngmem;

/** @brief Create a new dynamic area.
 *
 * Used when client calls CompressPNG_Start to initialise a new memory structure and
 * dynamic area.
 *
 * @param newmem For returning the address of the memory structure.  This needs to be passed to future calls.
 *
 * @return       Returns NULL if OK, pointer to RISC OS error block if any issues.
 */
_kernel_oserror *cpngmem_create_area(cpngmem **newmem);

/** @brief Free a new dynamic area.
 *
 * Used to free a previously-allocated dynamic area and memory structure.
 *
 * @param mem    Structure returned by cpngmem_create_area
 *
 * @return       Returns NULL if OK, pointer to RISC OS error block if any issues.
 */
_kernel_oserror *cpngmem_free_area(cpngmem *mem);

/** @brief Claim a new memory block
 *
 * Used to claim a chunk of memory from the dynamic area (like malloc).
 *
 * @param mem    Structure returned by cpngmem_create_area
 * @param block  Pointer to location to return the block pointer to (eg int **block to allocate for int *block)
 * @param length Amount of memory to claim
 *
 * @return       Returns NULL if OK, pointer to RISC OS error block if any issues.
 */
_kernel_oserror *cpngmem_alloc(const cpngmem *mem, void *block, int length);

/** @brief Free a previously-allocated memory block
 *
 * Used to claim a chunk of memory from the dynamic area (like malloc).
 *
 * @param mem    Structure returned by cpngmem_create_area
 * @param block  Actual address of the block to be freed (unlike cpngmem_alloc)
 *
 * @return       Returns NULL if OK, pointer to RISC OS error block if any issues.
 */
_kernel_oserror *cpngmem_free(const cpngmem *mem, void *block);

/** @brief Free all areas held by a particular task
 *
 * Used to free memory when an application quits.
 *
 */
void cpngmem_free_task(const int taskh);

/** @brief Free all allocated memory
 *
 * Used to free all allocated memory when the module dies.
 *
 */
void cpngmem_free_all(void);

/** @brief Function for libpng to allocate memory
 *
 * Used to claim a chunk of memory from the dynamic area (like malloc).
 *
 * @param png_ptr libpng structure
 * @param size    amount of memory to allocate
 *
 * @return       Returns NULL on error, or pointer to allocated memory.
 */
png_voidp cpngmem_mymalloc(png_structp png_ptr, png_size_t size);

/** @brief Functon for libpng to free a previously-allocated memory block
 *
 * Used to free a chunk of memory from the dynamic area (like free).
 *
 * @param png_ptr  libpng_structure
 * @param ptr      Actual address of the block to be freed
 */
void cpngmem_myfree(png_structp png_ptr, png_voidp ptr);

#endif
