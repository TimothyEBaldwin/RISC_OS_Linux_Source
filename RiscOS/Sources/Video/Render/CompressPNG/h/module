/* Copyright 2019 RISC OS Open Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @brief CompressPNG module header
 *
 * The module header provides the fundamental RISC OS module entry points for the
 * CompressPNG code.
 */

#ifndef __compresspng_module_h
#define __compresspng_module_h

#define IGNORE(a) (a=a)

/** @brief CompressPNG error codes */
#define ErrorBase_CompressPNG 0x821600

typedef enum
{
  CompressPNG_E_BadTag,     /**< Invalid tag passed to CompressPNG_ SWI */
  CompressPNG_E_NoMem,      /**< Out of memory */
  CompressPNG_E_InitX2,     /**< Unable to start compression, error message available */
  CompressPNG_E_InitX,      /**< Unable to start compression, unknown error */
  CompressPNG_E_CommentX2,  /**< Unable to add comment to PNG, error message available */
  CompressPNG_E_CommentX,   /**< Unable to add comment to PNG, unknown error */
  CompressPNG_E_ManyRows,   /**< Too may rows output for destination image */
  CompressPNG_E_OptFail2,   /**< Output failed, error message available */
  CompressPNG_E_OptFail,    /**< Output failed, unknown error */
  CompressPNG_E_FewRows,    /**< Insufficient rows of pixels written for the image */
  CompressPNG_E_BadBlock,   /**< Unknown memory block */
} compresspng_errorcode;

/* MessageTrans parts for token decoding */

/** @brief Report an error
 *
 * Expands a MessageTrans token and creates a RISC OS error block.
 * The variable parameter list is added to the MessageTrans expansion, replacing
 * %0, %1, %2, %3 as necessary.
 *
 * @param errnum     Error number as offset from the base error number
 * @param token      MessageTrans token to decode
 *
 * @return           Returns a pointer to a standard RISC OS error block
 */
_kernel_oserror *report_error(const compresspng_errorcode errnum, const char *token, ...);

/** @brief Lookup MessageTrans token
 *
 * Basic MessageTrans token lookup.  This function is a simple wrapper for
 * MessageTrans_Lookup when there are no parameters present.
 *
 * @param token      MessageTrans token to decode
 * @param buffer     Buffer to receive the expanded string
 * @param length     Maximum length of the buffer
 *
 * @return           Returns NULL if all fine, or a pointer to a standard RISC OS error block
 */
_kernel_oserror *messagetrans_lookup(const char *token, char *buffer, const int length);

#endif
