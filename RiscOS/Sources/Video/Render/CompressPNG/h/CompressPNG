/* Copyright 2020 RISC OS Open Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @brief CompressPNG SWI interface
 *
 * This part provides basic support for the CompressPNG_ SWIs
 */

#ifndef __compresspng_h
#define __compresspng_h

#include <stdio.h>
#include <stdlib.h>

#ifndef FileType_PNG
#define FileType_PNG FileType_Fresco2
#endif

/* Flags definitions */
#define CompressPNG_Flags_ToFile     1
#define CompressPNG_Flags_HasAlpha   2
#define CompressPNG_Flags_Greyscale  4
#define CompressPNG_Flags_SkipAlpha  8

/** @brief Parameter types for CompressPNG_Start
 *
 * CompressPNG_Start can be passed a variable number of different parameter types.
 * The list is terminated with a 0.
 */
typedef enum
{ png_param_end_of_list,       /**< 0: end of parameter list reached                                                 */
  png_param_text_comment,      /**< 1: text comment.  param.text.key and param.text.value passed to png_set_text     */
  png_param_gamma,             /**< 2: gamma correction value.  Double value passed to png_set_gAMA                  */
  png_param_compression,       /**< 3: compression level (0-9).  Hint passed to ZLib for the compression level       */
  png_param_interlace,         /**< 4: flag indicating the image is interlaced or not.  0 if not, 1 if it is         */
  png_param_palette,           /**< 5: pointer to palette data present for images <=256 colours and no alpha channel */
  png_param_transparency       /**< 6: transparency data for paletted images <=8bpp                                  */
} compresspng_param_type;

/** @brief Parameter block for the CompressPNG_Start call
 *
 * This structure describes a parameter attached to the CompressPNG_Start data block
 *
 */
typedef struct
{ compresspng_param_type parameter;  /**< type of parameter present */
  union
  { struct
    { char *key;                     /**< pointer to text comment key.  The data is copied, so need not be preserved   */
      char *value;                   /**< pointer to text comment value.  The data is copied, so need not be preserved */
    } text;

    int value_i;                     /**< value of an integer parameter (png_param_interlace or png_param_compression) */
    double value_d;                  /**< value of an FP parameter (png_param_gamma)                                   */

    struct
    { int size;                      /**< number of 4 byte colour entries in the palette data (2, 4, 16, 256)          */
      int *palettedata;              /**< pointer to the palette data itself.  Data is in the form of 0x00BBGGRR       */
    } palette;

    struct
    { int size;                      /**< number of transparency entries (must match palette size)                     */
      char *transdata;               /**< pointer to the transparency data itself, one byte per colour value           */
    } transparency;
  } param;
} compresspng_param;

/** @brief Parameter block for the CompressPNG_Start call
 *
 * This structure contains all of the information needed for passing to CompressPNG_Start
 * when an image is to be compressed
 *
 */
typedef struct
{ int width;                         /**< image width in pixels  */
  int height;                        /**< image height in pixels */
  int x_dpi;                         /**< X resolution of image  */
  int y_dpi;                         /**< Y resolution of image  */
  int flags;                         /**< Compression flags      */

  compresspng_param parameter[];     /**< variable length parameter block, terminated by 0 */
} compresspng_str;

#endif
