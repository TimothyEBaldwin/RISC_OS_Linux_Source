/* Copyright 2019 RISC OS Open Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @brief CompressPNG module main functions
 *
 * This part provides the interface between the libpng functions and the RISC OS API
 * Note that it currently only interfaces the compression functions
 */

#ifndef __compresspng_int_h
#define __compresspng_int_h

#include <stdio.h>
#include <stdlib.h>

#include "libpng/png.h"

#include "compresspng.h"
#include "memory.h"

/* Destinations */
typedef enum
{
  output_to_buffer,
  calc_output_buffer_size,
  output_to_file
} output_type;

/* Magic word to indicate that the tag pointer is OK.  Translates to 'PNGM' */
#define _tag_valid 0x4d474e50

/** @brief contents of the CompressPNG tag
 *
 * This structure contains all of the CompressPNG status for the current operation.
 *
 */
typedef struct
{
  int magic;                    /**< Must contain the magic word _tag_valid to indicate a valid structure is present */

  output_type destination;      /**< Destination for the compressed data - to file, buffer or just calculating output size */
  int error_state;              /**< Flag set if the PNG creation caused an error, so output is invalid */
  char *dest_filename;          /**< Destination filename or NULL */

  union
  {
    FILE *handle;               /**< Destination file handle if we're outputting to a fie */
    char *dest_buffer;          /**< Address of destination buffer if we're compression to an in-memory buffer */
  } dest;

  int dest_length;              /**< Length of the destination buffer */
  int write_offset;             /**< Current write offset within the buffer */

  int width;                    /**< Image width in pixels */
  int palette_bits;             /**< Bit depth of palette (1, 2, 4 or 8) */
  int rowdup;                   /**< Number of times each row must be duplicated in PNG output (for images where ydpi<xdpi) */
  int info_written;             /**< flag indicating if the PNG info block has been written yet */
  int filler;                   /**< flag indicating if a PNG filler is required (for RGB0, G0 data streams) */
  int height;                   /**< image height */
  int current_row;              /**< current row being processed */

  png_structp png_ptr;          /**< libpng structure for the compression */
  png_infop info_ptr;           /**< libpng info structure for the compression */

  /* bits for interlacing */
  int interlaced;               /**< flag indicating if the PNG is interlaced */
  int stride;                   /**< current row stride in bytes */
  png_bytep full_source;        /**< pointer to the full image data in memory */
  png_bytepp row_ptrs;          /**< pointer to an array of PNG row pointers within the full image buffer */

  cpngmem *mem;                 /**< pointer to memory object for DA handling */
} png_opt;

/** @brief Check PNG tag
 *
 * Used to check if the PNG tag pointer supplied to a SWI is valid.
 * Checks if it is in accessible memory.
 * If so, then it checks the magic word.
 *
 * @param tag    The PNG tag to check.  Actually int representation of a pointer to the png_opt structure.
 *
 * @return       Returns NULL if OK, pointer to RISC OS error block if bad.
 */
_kernel_oserror *compresspng_tag_valid(int tag);

/** @brief Start image compression
 *
 * Set up a compression for converting image data to PNG.  Only a basic file header may
 * be produced at this stage.
 *
 * R0 -> output buffer to receive data
 *    -> filename to write data to if CompressPNG_Flags_ToFile is set in the data block
 *    =  0 to calculate buffer size required
 * R1 = buffer size available
 * R2 -> data block describing the image and options in the form of compress_str
 *
 * On exit, V clear and R0 = tag for future calls to CompressPNG_ SWIs
 *      or  V set and R0 -> RISC OS error block
 *
 * @param r          Register block for SWI entry
 *
 * @return           Returns NULL if all fine, or a pointer to a standard RISC OS error block
 */
_kernel_oserror *compresspng_start(_kernel_swi_regs *r);

/** @brief Add comment to image
 *
 * Adds a comment to a PNG image.  This is an alternative to including all of the comments
 * when CompressPNG_Start is called.
 *
 * R0 = tag returned from CompressPNG_Start
 * R1 -> text key
 * R2 -> text value
 *
 * The key and value are copied, so need not be preserved after the call returns.
 *
 * On exit, V clear and R0 preserved
 *      or  V set and R0 -> RISC OS error block
 *
 * @param r          Register block for SWI entry
 *
 * @return           Returns NULL if all fine, or a pointer to a standard RISC OS error block
 */
_kernel_oserror *compresspng_comment(_kernel_swi_regs *r);

/** @brief Add line of pixels
 *
 * Adds a row of pixels to the PNG image.  If the source image is not in a 1:1 pixel size, then duplicate rows may be added.
 *
 * R0 = tag from CompressPNG_Start
 * R1 -> row pixel data as a byte stream of <image width> x byte sequence, which may be:
 *    RGBA    - if alpha channel
 *    RGB0    - no alpha channel (that byte is just ignored)
 *    RGB     - no alpha channel or byte at all
 *    GA      - greyscale, alpha channel
 *    G0      - greyscale, no alpha channel (that byte ignored)
 *    G       - greyscale, no alpha channel or byte at all
 *    P       - palette index (no alpha channel possible)
 *    The exact format depends on the flags passed to CompressPNG_Start
 *
 * The pixel data is copied, so need not be preserved after the call returns.
 * Interlaced images require the whole PNG to be stored in memory first and then compressed in
 * one go.  If so, this is all handled for you.
 *
 * On exit, V clear and R0 preserved
 *      or  V set and R0 -> RISC OS error block
 *
 * @param r          Register block for SWI entry
 *
 * @return           Returns NULL if all fine, or a pointer to a standard RISC OS error block
 */
_kernel_oserror *compresspng_writeline(_kernel_swi_regs *r);

/** @brief Finish image compression
 *
 * Completes the creation of the PNG image.
 * Closes any open file and frees any data structures.
 * You must still call this if an error occurred when compressing your PNG to tidy up.
 *
 * R0 = tag from CompressPNG_Start
 *
 * On exit, V set and R0 -> RISC OS error block
 *      or  V clear and:
 *            If outputting to a buffer and a buffer was supplied,
 *              R0 -> output buffer
 *              R1 = bytes used
 *
 *            If wanting to output to a buffer but 0 was passed to CompressPNG_Start,
 *              R0 = 0
 *              R1 = required buffer size
 *
 * @param r          Register block for SWI entry
 *
 * @return           Returns NULL if all fine, or a pointer to a standard RISC OS error block
 */
_kernel_oserror *compresspng_finish(_kernel_swi_regs *r);

#endif
