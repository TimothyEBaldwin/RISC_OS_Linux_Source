/* Copyright 2019 RISC OS Open Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @brief CompressPNG module header
 *
 * The module header provides the fundamental RISC OS module entry points for the
 * CompressPNG code.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include "swis.h"
#include "Global/Services.h"

#include "CompressPNGHdr.h"
#include "module.h"
#include "memory.h"
#include "compresspng_int.h"

extern void *Resources(void);

/* MessageTrans status block */
static int messagetrans[5] = {0,0,0,0,0};

/* MessageTrans bits to look up errors and tokens */

_kernel_oserror *report_error(const compresspng_errorcode errnum, const char *token, ...)
{
  static _kernel_oserror _err; /* Our error block to hold returned messages once decoded */
  va_list ap;
  _kernel_swi_regs r;
  _kernel_oserror *e;
  size_t i;

  va_start (ap, token);

  r.r[0] = (int) messagetrans;
  r.r[1] = (int) token;
  r.r[2] = (int) &_err.errmess;
  r.r[3] = sizeof(_err.errmess);
  r.r[4] = 0;
  r.r[5] = 0;
  r.r[6] = 0;
  r.r[7] = 0;

  for (i = 4; i < 8; i++)
  { r.r[i] = (int) va_arg (ap, char *);
    if (r.r[i] == 0) break;
  }

  va_end (ap);

  _err.errnum = errnum + ErrorBase_CompressPNG;

  e = _kernel_swi (MessageTrans_Lookup, &r, &r);
  if (e) sprintf (_err.errmess, "%s (token %s)", e->errmess, token);

  return &_err;
}

_kernel_oserror *messagetrans_lookup(const char *token, char *buffer, const int length)
{
  return _swix (MessageTrans_Lookup, _INR(0,7), messagetrans, token, buffer, length, 0, 0, 0, 0);
}

/* Main module entry points */

_kernel_oserror *compresspng_init(const char *cmd_tail, int podule_base, void *pw)
{
  _kernel_oserror *e;

  IGNORE(cmd_tail);
  IGNORE(podule_base);
  IGNORE(pw);

#ifndef ROM
  e = _swix (ResourceFS_RegisterFiles, _IN(0), Resources());
  if (e) return e;
#endif

  if (messagetrans[4] == 0)
  { e = _swix (MessageTrans_OpenFile, _INR(0,2), messagetrans, Module_MessagesFile, 0);
    if (e)
    {
#ifndef ROM
      _swix (ResourceFS_DeregisterFiles, _IN(0), Resources());
#endif
      return e;
    }
    messagetrans[4] = 1;
  }

  return NULL;
}

void compresspng_service(int service_number, _kernel_swi_regs *r, void *pw)
{
  IGNORE(pw);

  switch (service_number)
  {
    case Service_WimpCloseDown:
      if (r->r[0] == 0) cpngmem_free_task (r->r[2]);
      break;
#ifndef ROM
    case Service_ResourceFSStarting:
      (*(void (*)(void *, void *, void *, void *))r->r[2])(Resources(), 0, 0, (void *)r->r[3]);
      break;
#endif
  }
}

_kernel_oserror *compresspng_final(int fatal, int podule_base, void *pw)
{
  IGNORE(fatal);
  IGNORE(podule_base);
  IGNORE(pw);

  if (messagetrans[4])
  { _swix (MessageTrans_CloseFile, _IN(0), messagetrans);
    messagetrans[4] = 0;
  }
#ifndef ROM
  _swix (ResourceFS_DeregisterFiles, _IN(0), Resources());
#endif

  cpngmem_free_all();

  return NULL;
}

_kernel_oserror *compresspng_swis(int swi_offset, _kernel_swi_regs *r, void *pw)
{
  IGNORE(pw);

  if (swi_offset != CompressPNG_Start - CompressPNG_00)
  { _kernel_oserror *e;
    if ((e = compresspng_tag_valid (r->r[0])) != NULL) return e;
  }

  switch (swi_offset)
  { case CompressPNG_Start - CompressPNG_00:
      return compresspng_start (r);

    case CompressPNG_Comment - CompressPNG_00:
      return compresspng_comment (r);

    case CompressPNG_WriteLine - CompressPNG_00:
      return compresspng_writeline (r);

    case CompressPNG_Finish - CompressPNG_00:
      return compresspng_finish (r);
  }

  return error_BAD_SWI;
}
