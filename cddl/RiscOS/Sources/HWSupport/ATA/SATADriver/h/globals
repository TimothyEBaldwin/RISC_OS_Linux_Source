/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "Licence").
 * You may not use this file except in compliance with the Licence.
 *
 * You can obtain a copy of the licence at
 * cddl/RiscOS/Sources/HWSupport/ATA/SATADriver/LICENCE.
 * See the Licence for the specific language governing permissions
 * and limitations under the Licence.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the Licence file. If applicable, add the
 * following below this CDDL HEADER, with the fields enclosed by
 * brackets "[]" replaced with your own identifying information:
 * Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */
/*
 * Copyright 2015 Ben Avison.  All rights reserved.
 * Portions Copyright 2017 Jeffrey Lee
 * Use is subject to license terms.
 */

#ifndef GLOBALS_H
#define GLOBALS_H

#include <stdint.h>
#include "kernel.h"

#include "Global/HALDevice.h"
#include "Interface/AHCIDevice.h"
#include "SyncLib/synclib.h"

#include "coroutine.h"
#include "register.h"

#ifdef DEBUG_ENABLED
#ifdef DEBUGLIB
#include "DebugLib/DebugLib.h"
#undef dprintf
#define dprintf(...)    _dprintf("", __VA_ARGS__)
#else
#include <stdio.h>
#define dprintf printf
#endif
#else
#define dprintf(...) do; while(0)
#endif

#ifdef __GNUC__
#define PACKED(x) x __attribute__((packed))
#else
#define PACKED(x) __packed x
#endif

/* Defines */

/* A quick macro to silence compiler warnings about unused parameters */
#define IGNORE(x) do { (void)(x); } while(0)

#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))

/* If we support background transfers in future then this would need
 * to be arranged somewhat differently. Without serialising being
 * performed in the foreground, you'd want to be able to take advantage
 * of multiple command slots, although the variable length of the PRDT
 * associated with command header/table would probably be best allocated
 * from a form of heap since to allocate a maximum length PRDT for each
 * of 32 command slots for each of 32 ports would consume a lot of
 * memory. It would make sense to queue at least 32 operations in the
 * driver's data structures so that an AHCI controller that supported
 * 32 command slots could be fully utilised. In the meantime though, one
 * command slot will suffice for foreground-only operations.
 */
#define MAX_COMMAND_SLOTS 1

/* Because we can't guarantee that PIO operations will always be
 * available, we need to use a bounce buffer scheme to support misaligned
 * transfers. The minimum size of the bounce buffer is the largest common
 * addressing granularity of any ATA/ATAPI commands we might be asked to
 * issue - here we need to rely upon the knowledge that the largest sector
 * size in use at the time of writing is 4KiB. This would also consume a
 * lot of RAM if one were allocated per command slot, so it is likely
 * that we will continue to only allocate one per port even though it
 * complicates the order in which software-queued operations would be
 * handed across to the hardware command slots if more than one queued
 * operation is misaligned.
 */
#define BOUNCE_BUFFER_SIZE 4096

/* The Received FIS structure is nice and simple by contrast - just one
 * per port. Unless you support FIS-based switching, which we don't yet.
 */
#define MAX_RECEIVED_FIS_SLOTS 1

/** FileCore scatter list threshold */
#define SCATTER_THRESHOLD (0xFFFF0000u)

/* Types */

/** Physical address as defined by RISC OS APIs. */
typedef uint32_t paddr_t; /* Possibly not for much longer though */

/** Scatter list entry */
typedef struct
{
  uint8_t *address;
  size_t   length;
}
scatter_t;

/** State variable for an ongoing operation */
enum op_state
{
  /** Operation never had, or no longer has a slot in the command list.
   *  The registered callback has already been issued (may have been following
   *  either successful or unsuccessful completion). This is used to mark an
   *  op block in the middle of the circular queue as inactive due to
   *  out-of-order completion. */
  CMD_STATE_RETIRED,
  /** Operation has not yet been assigned a slot in the command list.
   *  (Note, it may remain in this state after later operations are queued due
   *  to contention for use of the bounce buffer) */
  CMD_STATE_READY,

  /* States below here have a corresponding bitmask in order of command slot */

  /** The command header and command table for the corresponding slot have been
   *  initialised and software has issued the command (via PxCI) but as far as
   *  the software is aware, it has not yet finished */
  CMD_STATE_ISSUED,
  /** Software has detected a 1-to-0 transition in PxCI for this command (other
   *  than as a result of halting command list processing) indicating successful
   *  command completion, but the registered callback has not yet been issued */
  CMD_STATE_COMPLETED,
  /** The controller has detected a fatal error for this operation */
  CMD_STATE_ERRORED,
  /** Abort was requested on operation after issuing to the command list but
   *  before it reached the current command slot. If we aren't able to de-issue
   *  the command (as a result of an error, or an abort of the command which
   *  *is* in the current command slot) we have no option but to wait until it
   *  becomes the current command slot and then halt command list processing -
   *  although it's also possible it will generate an error or complete
   *  successfully before we can abort it! */
  CMD_STATE_ABORT_PENDING,
  /** Operation was aborted when it was the current command slot - need to check
   *  for device acknowledge and possibly issue reset, similar to error case. */
  CMD_STATE_ABORTED,
};

/** Which type of operation this is. Keep in order of increasing size of parameter block */
enum op_type
{
  OP_ATAPI,
  OP_DEVICE_CONTROL,
  OP_28BIT_LBA,
  OP_48BIT_LBA,
  OP_WIDE_FEATURES,
};

/** Details of an ongoing operation */
typedef struct
{
  bool              nodrdy;                      /**< don't wait for DRDY */
  uint32_t          description_info;            /**< value to go in first word of command header - also used to store whether it's a read or write operation */
  enum op_type      op_type;                     /**< remember this so we know how to update the parameter block afterwards */
  bool              atapi_errors;                /**< interpret task file error register with ATAPI semantics */
  volatile uint32_t state;                       /**< actually holds an enum op_state, forced to uint32 to allow atomic operations */
  int32_t           timeout;                     /**< monotonic time at which current state times out */
  void             *response;                    /**< pointer to parameter/response buffer */
  scatter_t         surrogate;                   /**< surrogate scatter list when caller didn't provide one */
  size_t            total_length;                /**< length of data transfer remaining, bytes */
  size_t            length_done;                 /**< length of data transfer done, bytes */
  _kernel_oserror  *e;                           /**< error pointer to pass to callback */
  void            (*callback)(void);             /**< completion callback routine */
  void             *callback_r5;                 /**< R5 to pass to completion callback */
  void             *callback_r12;                /**< R12 to pass to completion callback */
  uint32_t          slot;                        /**< corresponding slot in command list, or -1 if not yet assigned */
  register_fis_t    cfis;                        /**< command FIS */
  uint8_t           acmd[16];                    /**< ATAPI Command */
#ifndef OSMEM19
  size_t            scatter_offset;              /**< current byte index into current block on scatter list */
  scatter_t        *list;                        /**< current block in scatter list for data transfer */
  bool              use_bounce_buffer;           /**< go via bounce buffer because AHCI isn't flexible enough */
  ahci_prdt_entry_t prdt[AHCI_MAX_PRDT_ENTRIES]; /**< copy of PRDT in cacheable RAM - note once background transfers are implemented, probably want to be a bit smarter about allocating this since it's only needed until it's copied over to uncached memory */
#else
  scatter_t        *list;                        /**< original scatter list */
  bool              use_bounce_buffer;           /**< true if bounce buffer has been used */
  bool              force_bounce;                /**< true if we're forcing the entire transfer via the bounce buffer (OS_Memory 19 not used) */ 
  ahci_prdt_entry_t prdt[AHCI_MAX_PRDT_ENTRIES]; /**< copy of PRDT in cacheable RAM - note once background transfers are implemented, probably want to be a bit smarter about allocating this since it's only needed until it's copied over to uncached memory */
#endif
}
ahciop_t;

/** State for a device connected to a port (may be a drive or a port multiplier) */
typedef struct
{
  bool       valid;           /**< if not, indicates that reset failed */
  uint8_t    tfd;             /**< last known task file status register returned from this device */
  sata_sig_t sig;
  mutex_t    busy;
}
satadevice_t;

/** State for one port of an AHCI controller */
typedef struct
{
  bool                    valid;                  /**< this entry in the array of ports is in use */
  bool                    active;                 /**< port has been brought up */
  bool                    support_clo;            /**< does parent controller support command list override? */
  uint32_t                cpid;                   /**< the corresponding controller/port id */
  uint32_t                pmp_ports;              /**< number of ports on a port multiplier, or 1 if other type of device */
  port_regset_t          *pr;                     /**< pointer to port registers */
  ahci_command_hdr_t    (*command_list)[MAX_COMMAND_SLOTS];
  paddr_t                 command_list_phy;
  ahci_command_table_t   *command_table;
  paddr_t                 command_table_phy;
  ahci_received_fis_t   (*received_fis)[MAX_RECEIVED_FIS_SLOTS];
  paddr_t                 received_fis_phy;
  uint8_t               (*bounce_buffer)[BOUNCE_BUFFER_SIZE];
  paddr_t                 bounce_buffer_phy;
  mutex_t                 doing_poll;             /**< ensures only 1 interrupt handler runs at once for this slot */
  bool                    wait_for_halt;          /**< are we in the first step of error recovery? (Includes errors encountered during error recovery itself) */
  bool                    error_recovery;         /**< are we in error-recovery state? */
  satadevice_t            device[16];             /**< array of device state structs; only index 0 used if not a port multiplier */
  spinlock_t              state_lock;             /**< ensure atomicity of state changes to all command slots on this port */
  uint32_t                commands_issued;        /**< slots in command list in state CMD_STATE_ISSUED */
  uint32_t                commands_completed;     /**< slots in command list in state CMD_STATE_COMPLETED */
  uint32_t                commands_errored;       /**< slots in command list in state CMD_STATE_ERRORED */
  uint32_t                commands_pending_abort; /**< slots in command list in state CMD_STATE_ABORT_PENDING */
  uint32_t                commands_aborted;       /**< slots in command list in state CMD_STATE_ABORTED */
  ahciop_t               *op_for_command[32];     /**< to rapidly convert from a physical slot in the command list to an op block pointer */
  coroutine_state_t       recovery_coroutine;     /**< state describing error recovery coroutine */
  ahciop_t                op;                     /**< current operation state (ultimately replace with a circular queue of operations) */
  ahciop_t                error_op;               /**< op block for internal use for error recovery purposes */
}
ahciport_t;

/** State for one AHCI controller */
typedef struct
{
  bool           valid;       /**< this entry in the array (currently of size 1) of controllers is in use - an alternative way to handle multiple controllers would be to use a linked list */
  ahcidevice_t  *dev;         /**< HAL device for this controller */
  uint32_t      *trampoline;  /**< interrupt handler trampoline */
  ahciport_t     port[32];    /**< array of state data for each port on this controller */
}
ahci_t;


/** Parameter blocks for device control commands */
typedef uint8_t ataop_param_device_control_t;

/** Parameter blocks for CHS and 28-bit LBA commands */
typedef struct
{
  uint8_t features;
  uint8_t sector_count;
  uint8_t lba0;
  uint8_t lba1;
  uint8_t lba2;
  uint8_t device;
  uint8_t command;
}
ataop_param_lba28_t;

/** Parameter blocks for 48-bit LBA commands */
typedef struct
{
  uint8_t features;
  uint8_t sector_count0;
  uint8_t sector_count1;
  uint8_t lba0;
  uint8_t lba1;
  uint8_t lba2;
  uint8_t lba3;
  uint8_t lba4;
  uint8_t lba5;
  uint8_t device;
  uint8_t command;
}
ataop_param_lba48_t;

/** Parameter blocks for 48-bit LBA commands with wide Features register */
typedef struct
{
  uint8_t features0;
  uint8_t features1;
  uint8_t sector_count0;
  uint8_t sector_count1;
  uint8_t lba0;
  uint8_t lba1;
  uint8_t lba2;
  uint8_t lba3;
  uint8_t lba4;
  uint8_t lba5;
  uint8_t device;
  uint8_t command;
}
ataop_param_wide_features_t;

/** Control blocks for packet operations */
typedef struct
{
  uint8_t operation_code;
  uint8_t service_action;
  uint8_t lba3;
  uint8_t lba2;
  uint8_t lba1;
  uint8_t lba0;
  uint8_t length3;
  uint8_t length2;
  uint8_t length1;
  uint8_t length0;
  uint8_t reserved;
  uint8_t control;
}
atapacketop_control_t;


/* Global variables */

/** Only support one AHCI controller for now */
extern ahci_t g_ahci;
/** Lock for the AHCI controller (or list/aray of same when multiple are supported) */
extern spinrwlock_t g_ahci_lock;

/** MessageTrans descriptor for our Messages file */
extern uint32_t g_message_fd[4];

/** Module private word pointer */
extern void *g_module_pw;

#endif
