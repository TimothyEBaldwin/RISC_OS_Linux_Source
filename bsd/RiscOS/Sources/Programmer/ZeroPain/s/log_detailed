; 
; Copyright (c) 2015, RISC OS Open Ltd
; All rights reserved.
; 
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met: 
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of RISC OS Open Ltd nor the names of its contributors
;       may be used to endorse or promote products derived from this software
;       without specific prior written permission.
; 
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
; POSSIBILITY OF SUCH DAMAGE.
; 
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Proc
        GET     Hdr:OSMisc

        AREA    |RO$$Code|, CODE, READONLY, PIC

        EXPORT  log_detailed
PVirt   SETA    PVSys
        PVOpsImports

; In: r0 -> context
;     r1 = dest buffer
;     r2 = buffer length
;     r3 -> VecPtrTab
;     ABT mode, IRQs disabled
log_detailed
        Entry   "r1-r10"
        ; Examine the context to see if it's safe to call SWIs
        ; The abort needs to be from a state where IRQs are enabled, and with reasonable space free on the SVC stack (>4K)
        LDR     r4, [r0, #16*4]
        TST     r4, #I32_bit
        BNE     %FT90
        ; Switch to SVC mode to check stack space
        pvMSR   CPSR_c, #SVC32_mode+I32_bit
        MOV     r4, sp, LSR #20
        SUB     r4, sp, r4, LSL #20
        pvMSR   CPSR_c, #ABT32_mode+I32_bit
        CMP     r4, #4096
        BLT     %FT90
        MOV     r4, #1
        STRB    r4, [r1] ; Write marker to buffer so we can tell if it is modified
        ; Detailed dump possible. Call SeriousErrorV_Collect by directly peeking at the vector claimant table (can't call SWI yet!)
        ADR     r1, errorblock
        MOV     r2, #SeriousErrorV_Collect
        ADR     lr, %FT20
        Push    "lr"
        LDR     r10, [r3, #SeriousErrorV*4]
10
        MOV     lr, pc
        LDMIA   r10, {r10, r12, pc}
        TEQ     r10, #0
        BNE     %BT10
        Pull    "lr"
20
        ; Now that collection phase is done we can enable IRQs and switch to SVC mode for the reporting phase
        MOV     r4, sp
        pvMSR   CPSR_c, #SVC32_mode
        Push    "lr"
        ADR     r0, errorblock
        MOV     r1, #SeriousErrorV_CustomReport_Annotated
        MOV     r2, #SeriousErrorV_CustomReport
        ADR     r3, report_callback
        MOV     r9, #SeriousErrorV
        SWI     XOS_CallAVector
        Pull    "lr"
        pvMSR   CPSR_c, #ABT32_mode+I32_bit
        ; Check if anything was written to the buffer
        FRAMLDR r1
        LDRB    r0, [r1] ; Will be the null terminator if the buffer was modified, or 1 if left untouched
        EOR     r0, r0, #1 ; Invert to give response code
        EXIT

90
        ; Can't produce a detailed dump
        MOV     r0, #0
        EXIT

; In: r0 = pointer to dest buffer ptr + length
;     r1 = null-terminated string
; Out: r0-r3, r12 corruptible
report_callback ROUT
        LDMIA   r0, {r2-r3}
        SUB     r3, r3, #1
10
        MOVS    ip, r3
        LDRNEB  ip, [r1], #1
        STRB    ip, [r2]
        TEQNE   ip, #0
        ADDNE   r2, r2, #1
        SUBNE   r3, r3, #1
        BNE     %BT10
        ADD     r3, r3, #1
        STMIA   r0, {r2-r3}
        MOV     pc, lr

errorblock
        DCD     0
        DCB     "Dummy ZeroPain error block", 0
        ALIGN

        END
