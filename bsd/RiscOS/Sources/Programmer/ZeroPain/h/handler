/*
 * Copyright (c) 2015, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef HANDLER_H
#define HANDLER_H

#include "kernel.h"
#include <stdint.h>
#include <stdbool.h>

/* Note - must be kept in sync with handler_asm! */
typedef struct {
	uint32_t r[16];
	uint32_t psr;
	uint32_t dfar;
} context_t;

typedef enum
{
	DomainId,
	MetroGnome,
	VecPtrTab,

	RSI6Count
} rsi6val;

extern uint32_t* rsi6vals[RSI6Count];

/* To ensure references to them get relocated, the following need to be declared
   as data */
extern uint32_t handler_install[];
extern uint32_t handler_remove[];
/* Macros to allow invocation as functions */
#define handler_install(ptr) ((*(_kernel_oserror*(*)(bool(*)(context_t *, uint32_t))) handler_install)(ptr))
#define handler_remove (*(_kernel_oserror*(*)(void)) handler_remove)

extern bool handler_do(context_t *context, uint32_t sctlr);

extern bool log_detailed(const context_t *context, char *buffer, size_t len, void *vecptrtab);

#endif
