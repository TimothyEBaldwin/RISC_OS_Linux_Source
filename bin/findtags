#!/bin/perl -w
# 
# This source code in this file is licensed to You by Castle Technology
# Limited ("Castle") and its licensors on contractual terms and conditions
# ("Licence") which entitle you freely to modify and/or to distribute this
# source code subject to Your compliance with the terms of the Licence.
# 
# This source code has been made available to You without any warranties
# whatsoever. Consequently, Your use, modification and distribution of this
# source code is entirely at Your own risk and neither Castle, its licensors
# nor any other person who has contributed to this source code shall be
# liable to You for any loss or damage which You may suffer as a result of
# Your use, modification or distribution of this source code.
# 
# Full details of Your rights and obligations are set out in the Licence.
# You should have received a copy of the Licence with this source code file.
# If You have not received a copy, the text of the Licence is available
# online at www.castle-technology.co.uk/riscosbaselicence.htm
# 

use strict;
no strict "refs";
use File::Basename;  # basename(), dirname()
use Getopt::Long;
use POSIX "tmpnam";

######################################################################
# CVS Revision control variables
######################################################################
my $mynameis=basename($0);         # The name of this script
my @commandline="$mynameis @ARGV"; # The command line used to call this script
my $cvsrevision = '$Revision: 1.1 $ ';
my $cvsrcsfile = '$RCSfile: findtags,v $ ';
my $cvsdate = '$Date: 2008/06/09 20:35:27 $ ';
my $cvsauthor = '$Author: rool $ ';
my $cvssource = '$Source: /cvsroot/castle/Admin/bin/findtags,v $ ';
$cvsrevision =~  m"Revision: (.+) \$"; $cvsrevision = $1;
$cvsrcsfile =~ m"RCSfile: (.+),v \$"; $cvsrcsfile = $1;
$cvsdate =~ m"Date: (.+) \$"; $cvsdate = $1;
$cvsauthor =~ m"Author: (.+) \$"; $cvsauthor = $1;
$cvssource =~ m"Source: (.+) \$"; $cvssource = $1;


######################################################################
# Some globals
######################################################################
my $statusfile = '';
my $tag = '';
my $debug = -1;
my $verbose = 0;
my $recursive = '';

Getopt::Long::Configure("no_auto_abbrev","no_ignore_case");
GetOptions('statusfile=s' => \$statusfile,
           'debug:i' => \$debug,
           'verbose!' => \$verbose,
           'recursive' => \$recursive,
           'version|v'        => sub { version() },
           'Version|V'        => sub { version("full") },
           'help|?|h' => sub { usage ("pod2text") },
           'man' => sub { usage ("perldoc") },
          ) or usage("pod2text");

usage("pod2text") if ((@ARGV == 0) && (-t STDIN));

$tag = $ARGV[0];
debugprint(0,"Debug is          : $debug\n");
debugprint(0,"Verbosity is      : $verbose\n");
debugprint(0,"Input file is     : $statusfile\n");
debugprint(0,"Tag to search for : $tag\n");
debugprint(0,"Recursive         : $recursive\n");

my $cvsresult = 0;
my $cvsresultstring = "DONE";
my $cvscommand;
if ($recursive) {
   $cvscommand = "cvs.exe -nf status -vR";
} else {
   $cvscommand = "cvs.exe -nf status -vl";
}
unless ($statusfile) {
   debugprint(0,"Performing \"$cvscommand\"...\n");
   $statusfile = tmpnam();
   debugprint(0,"\$statusfile is $statusfile\n");
   $cvsresult = system("$cvscommand > $statusfile");
   if ($cvsresult) {
      unlink $statusfile;
      die("FATAL: \"$cvscommand\" has barfed");
   } else {
      $cvsresult = $cvsresultstring;
   }
}

open(FILE,$statusfile) or die("FATAL:  Cannot open \"$statusfile\" for reading");

my $currentfile = '';
my $checkfortags = 0;
my $foundtag = 0;
my @minstatus = '';
my @statusbuffer = '';
while (<FILE>) {
   my $Line = $_;
   chomp $Line;
   debugprint(8,"$Line\n");
   if ($Line =~ m/={67}/) {
      if ($foundtag) {
         @minstatus = (@minstatus, "$currentfile\n");
         verboseprint("@statusbuffer");
      }
      $foundtag = 0;
      $checkfortags = 0;
      @statusbuffer = '';
      debugprint(2,"Not checking for tags\n");
   } elsif ($Line =~ m/^File:\s+(\S+)\s/) {
      $currentfile = $1;
      debugprint(1,"File is :  $currentfile\n")
   } elsif ($Line =~ m/Existing Tags:/) {
      $checkfortags = 1;
      debugprint(2,"Checking for tags\n");
   } elsif ($checkfortags && $Line =~ m/\s+($tag)\s/) {
      $foundtag = 1;
      debugprint(1,"Found tag $1\n");
   }
   @statusbuffer = (@statusbuffer,"$Line\n");
}
if ($foundtag) {
   @minstatus = (@minstatus, "$currentfile\n");
   verboseprint("@statusbuffer");
}

print "Files which have been tagged with \"$tag\":\n";
print @minstatus;

if ($cvsresult eq $cvsresultstring) {
   debugprint(0,"Reminder -- we had to perform \"$cvscommand\" ourselves\n");
   debugprint(0,"deleting $statusfile\n");
   unlink $statusfile;
} else {
   debugprint(0,"Reminder -- we provided a cvs status file $statusfile\n");
}

exit(!$foundtag);

sub debugprint {
   my $debuglevel = shift (@_);
   my $OutputLine = shift (@_);
   if ($debug >= $debuglevel) { print STDERR "DEBUG$debuglevel:  $OutputLine" }
}
sub verboseprint {
   my $OutputLine = shift (@_);
   if ($verbose) { print "$OutputLine" }
}

sub usage {
  ######################################################################
  # Print usage / help using perldoc or similar
  ######################################################################
  my $arg;
  $arg = shift(@_) or $arg = "pod2text";
  exec("$arg $0");
  die("Shouldn't get here");
}

sub version {
  ######################################################################
  # Print version information
  # examples:
  #   version(); print version number to STDOUT
  #   version("anything"); print version number and CVS info to STDOUT
  ######################################################################
  if (@_) {
    print("Scriptname        : $mynameis\n");
    print("Known to CVS as   : $cvsrcsfile\n");
    print("Version           : $cvsrevision\n");
    print("Date              : $cvsdate\n");
    print("Author            : $cvsauthor\n");
    print("Repository source : $cvssource\n");
  } else {
    print("$cvsrevision\n");
  }
  exit(0);
}

__END__

=head1 NAME

findtags - Find files in current directory with specified CVS tags. (CCG)

=head1 SYNOPSIS

B<findtags> I<tag> [ --verbose ] [ --recursive ] [ --statusfile I<filename> ]
[ --help ] [ --man ] [ --version ]

Find files in current directory with specified CVS tag or branch.

=head1 OPTIONS

=over 4

=item B<--statusfile> I<filename> (optional)

Instead of performing I<cvs status -v> on all files in current directory
(the default behaviour), supply the output from a previous I<cvs status
-v> command.

=item B<--verbose> (optional)

By default I<findtags> will list the files which have been tagged with
I<tag>.  The I<--verbose> option will also print the I<cvs status>
information for each file tagged with I<tag>.

=item B<--recursive> (optional)

By default I<findtags> operates in the current directory only.  The
I<--recursive> option forces recursion into subdirectories.

Not terribly useful, because the output gives no indictation of which
directory the file is in.

=item B<--help> (optional)

Display this help message and exit.

Also B<-h>.

=item B<--man> (optional)

Display manual page and exit.

=back

=head1 DESCRIPTION

Finds all the files in the current directory which have at any
point in their history been given a specified tag.

The tag may be specified as a Regular Expression.


=cut



