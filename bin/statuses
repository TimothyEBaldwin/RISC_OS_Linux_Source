#!/bin/perl -w
# 
# This source code in this file is licensed to You by Castle Technology
# Limited ("Castle") and its licensors on contractual terms and conditions
# ("Licence") which entitle you freely to modify and/or to distribute this
# source code subject to Your compliance with the terms of the Licence.
# 
# This source code has been made available to You without any warranties
# whatsoever. Consequently, Your use, modification and distribution of this
# source code is entirely at Your own risk and neither Castle, its licensors
# nor any other person who has contributed to this source code shall be
# liable to You for any loss or damage which You may suffer as a result of
# Your use, modification or distribution of this source code.
# 
# Full details of Your rights and obligations are set out in the Licence.
# You should have received a copy of the Licence with this source code file.
# If You have not received a copy, the text of the Licence is available
# online at www.castle-technology.co.uk/riscosbaselicence.htm
# 

use strict;
use File::Basename;  # basename(), dirname()
use Getopt::Long;


######################################################################
# Some globals
######################################################################
my $mynameis=basename($0);         # The name of this script
my $debug = 0;         # 0 : off / 1 : on
my $verbose = 1;       # 0 : quiet / 1 : normal / 2 : verbose
my $cvsopts = "";      # default options to cvs
my $statopt = "";      # default option to cvs status
my $logopt = "";       # default option to cvs log
my $directory = "";    # initial directory
my $showlocalrev = 1;  # show revision of local files
my $showremoterev = 1; # show revision of repository files
my $showtag = 0;       # show sticky tag
my $showdate = 0;      # show sticky date
my $showkopts = 0;     # show sticky "-k" options
my $showuptodate = 1;  # show 'Up-to-date' files
my $showunknown = 1;   # show 'Unknown' files
my $showdeadinrepos = 0;# show dead (removed) files in the repository
my $showlatest = 0;    # show latest trunk / branch in the repos
my $showbranchonly = 0;# Show files which are only on a branch
my $showoutofdateonly = 0;# Only show files if they are NOT the latest revision
my $ignorevendor = 0; # Ignore vendor branches

Getopt::Long::Configure("no_auto_abbrev","no_ignore_case");
GetOptions('debug!'             => \$debug,
           'quiet|q'            => sub { $verbose = 0 },
           'verbose|v'          => sub { $verbose = 2 },
           'l'                  => sub { $statopt = "-l"; $logopt = "-l"; },
           'R'                  => sub { $statopt = "-R" },
           'local!'             => \$showlocalrev,
           'dead'                => \$showdeadinrepos,
           'latest!'            => \$showlatest,
           'remote!'            => \$showremoterev,
           'st!'                => \$showtag,
           'sd!'                => \$showdate,
           'sk|so!'             => \$showkopts,
           'uptodate|utd!'      => \$showuptodate,
           'unknown|uk!'        => \$showunknown,
           'branchonly|br!'     => \$showbranchonly,
           'ignorevendor|iv!'   => \$ignorevendor,
           'outofdateonly|od'  => sub {
                                         $showoutofdateonly = 1;
                                         $showlatest = 1;
                                                           },
           'all'                => sub {
                                         $showlocalrev = 1;
                                         $showremoterev = 1;
                                         $showtag = 1;
                                         $showdate = 1;
                                         $showkopts = 1; },
           'none'               => sub {
                                         $showlocalrev = 0;
                                         $showremoterev = 0;
                                         $showtag = 0;
                                         $showdate = 0;
                                         $showkopts = 0;
                                       },
           'cvs=s'              => \$cvsopts,
           'version'            => sub { version(); exit(0); },
           'Version'            => sub { version("full"); exit(0); },
           'help|?|h'           => sub { usage ("pod2text") },
           'man'                => sub { usage ("perldoc") },
          ) or die("$mynameis -h for help\n");

foreach my $param (@ARGV) {
  $param =~ s:/$::;
  die ("$param is not a directory\n") unless (-d $param);
  $directory = "$directory $param";
}

version("full") if ($debug);
debugprint("\$debug         : $debug\n");
debugprint("\$verbose       : $verbose\n");
debugprint("\$cvsopts       : $cvsopts\n");
debugprint("\$statopt       : $statopt\n");
debugprint("\$directory     : $directory\n");
debugprint("\$showlocalrev  : $showlocalrev\n");
debugprint("\$showremoterev : $showremoterev\n");
debugprint("\$showtag       : $showtag\n");
debugprint("\$showdate      : $showdate\n");
debugprint("\$showkopts     : $showkopts\n");
debugprint("\$showuptodate  : $showuptodate\n");
debugprint("\$showunknown   : $showunknown\n");


# What we are going to do is this: 
# Run a 'cvs status' command on the specified DIRECTORY (not
# individual files -- sorry).  Collate the information into a hash
# named %status().  We place the header information (titles of
# columns) into %header(). We also do some jiggerry pokery to make the
# columns line up, which means we need to read the whole lot into the
# hash before printing it out.  Therefore we also have a list @len()
# of the max lengths of each column.




# open the 'cvs status' command
unless (open (CVSSTAT, "cvs $cvsopts stat -v $statopt $directory 2>&1 |")){
  die("Cannot obtain cvs status\n");
}

# initialise things...
my $LatestDir = "UNKNOWNDIR";
my $LatestFile = "UNKNOWNFILE";

my $StatusIndex = 0;
my $WorkIndex = 1;
my $ReposIndex = 2;
my $TagIndex = 3;
my $DateIndex = 4;
my $OptionsIndex = 5;
my $NameIndex = 6;
my $MaxValueHeadIndex = 7;
my $MaxValueBranchIndex = 8;
my $OnBranchIndex = 9;

my %status = ();
my @header = ();
$header[$NameIndex] = "FILENAME";
$header[$StatusIndex] = "STATUS";
$header[$WorkIndex] = "LOCAL";
$header[$ReposIndex] = "AVAILABLE";
$header[$TagIndex] = "STICKY TAG";
$header[$DateIndex] = "STICKY DATE";
$header[$OptionsIndex] = "KOPTS";
$header[$MaxValueHeadIndex] = "LATEST HEAD";
$header[$MaxValueBranchIndex] = "LATEST BRANCH";
$header[$OnBranchIndex] = "DUMMY";


my @len = ();
for (0 .. 9) {
  $len[$_] = length($header[$_]);
}

# read and parse the cvs status output.  Complicated, because cvs
# stat does NOT print the whole path to the file being reported.
# Instead, something like

# cvs server: Examining e:/ccg/usr/local/bin
# ===================================================================
# File: statuses          Status: Locally Modified
#    Working revision:    1.13
#    Repository revision: 1.13    /home/sources/cvsroot/tools/toolchains/i386/Windows/ccg/cygwin/usr/local/bin/statuses,v
#    Sticky Tag:          (none)
#    Sticky Date:         (none)
#    Sticky Options:      (none)

# More complicated, because the 'cvs server: Examining...' line comes
# out on STDERR while the rest comes out on STDOUT

while (<CVSSTAT>) {
  my $line = $_;
  $line =~ tr/\012\015//d;

  for ($line) {
    # Directory
    /^cvs server\:\s+Examining\s+(.+)\s*$/
      and do {
        $LatestDir = $1;
        print STDERR ("Examining $LatestDir\n") if $verbose;
        last;
      };
    # File and Status
    /^File\:\s+(.+\S)\s+Status\:\s+(.+)\s*$/ and do {
      $LatestFile = $1;
#      print "Stat: File is $LatestDir/$LatestFile\n";
      my $stat = $2;
      if ($stat =~ /Needs Checkout/) {
        $LatestFile =~ s/^no file //;
      }
      print STDERR ("Examining $LatestDir/$LatestFile\n") if ($verbose > 1);
      $status{"$LatestDir/$LatestFile"} = [ $stat, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
      my $ln = length "$LatestDir/$LatestFile";
      my $ls = length($stat);
      $len[$NameIndex] = $ln if ($ln > $len[$NameIndex]);
      $len[$StatusIndex] = $ls if ($ls > $len[$StatusIndex]);
      last;
    };
    # Unknown Files
    /^\? (.+)$/ and do {
      my $file = "./$1";
      my $ln = length($file);
      $status{"$file"} = [ 'Unknown', '', '', '', '', '', '', '', '', ''] ;
      $len[$NameIndex] = $ln if ($ln > $len[$NameIndex]);
      last;
    };
    # Working Version
    /^\s+Working revision\:\s+([0-9\.]+)\s*$/ and do {
      $status{"$LatestDir/$LatestFile"}[$WorkIndex] = $1;
      my $ThisWorking = $1;
      my $ln = length($1);
      $len[$WorkIndex] = $ln if ($ln > $len[$WorkIndex]);

      if ($ThisWorking =~ m/^\d+\.\d+\./) {
        $status{"$LatestDir/$LatestFile"}[$OnBranchIndex] = 1;
      }

      #yyyy
      last;
    };
    # Repository Version
    /^\s+Repository revision\:\s+([0-9\.]+)\s+.*$/ and do {
      $status{"$LatestDir/$LatestFile"}[$ReposIndex] = $1;
      my $ln = length($1);
      $len[$ReposIndex] = $ln if ($ln > $len[$ReposIndex]);
      last;
    };
    # Sticky Tag
    /^\s+Sticky Tag\:\s+(.+)\s*$/ and do {
      my $ThisTag = $1;

      if ($ThisTag =~ m/^\S+\s+\(branch\:\s+([0123456789.]+)\)\s*$/) {
        $status{"$LatestDir/$LatestFile"}[$OnBranchIndex] = 1;
      }

      if ($ThisTag =~ m/^(\S+?)\s+.+$/) {
        $ThisTag = $1;
      }
      $status{"$LatestDir/$LatestFile"}[$TagIndex] = $ThisTag;
      my $ln = length($ThisTag);
      $len[$TagIndex] = $ln if ($ln > $len[$TagIndex]);


      last;
    };
    # Sticky Date
    /^\s+Sticky Date\:\s+(.+)\s*$/ and do {
      $status{"$LatestDir/$LatestFile"}[$DateIndex] = $1;
      my $ln = length($1);
      $len[$DateIndex] = $ln if ($ln > $len[$DateIndex]);
      last;
    };
    # Sticky Options
    /^\s+Sticky Options\:\s+(.+)\s*$/ and do {
      $status{"$LatestDir/$LatestFile"}[$OptionsIndex] = $1;
      my $ln = length($1);
      $len[$OptionsIndex] = $ln if ($ln > $len[$OptionsIndex]);
      last;
    };

  }
}
close (CVSSTAT);

if ($showlatest==1) {

  # open the 'cvs up' command
  unless (open (CVSUP, "cvs log $logopt -N $directory |")){
    die("Cannot obtain cvs log information\n");
  }

  while (<CVSUP>) {
    my $line = $_;
    $line =~ tr/\012\015//d;

    if ($line =~ m/^Working file\:\s+(.+)$/) {
      my $FileName = $1;
      if ($FileName !~ m/\//) {
        $FileName = "./$FileName";
      }
#      print "File is $FileName\n";
      my %TagList=();
      while(<CVSUP>) {
        my $This = $_;
        $This =~ tr/\012\015//d;
        last if ($This =~ m/^=============================================================================\s*$/);
        next if ($This !~ m/^----------------------------\s*$/);
        $This=<CVSUP>;
        $This =~ tr/\012\015//d;
         my ($CurrentState, $CurrentRevision);
         if ($This =~ m/^revision\s+([0123456789.]+)\s*$/) {
           $CurrentRevision = $1;
           $This =<CVSUP>;
           if ($This =~ m/^date\:.+author\:.+state\:\s+(\S+)\;\s+lines\:.+$/) {
             $CurrentState = $1;
           } else {
             $CurrentState = "unknown";
           }
           # print "Revision: $CurrentRevision : State : $CurrentState\n";
           $TagList{$CurrentRevision} = $CurrentState;
         } else { # if
           print "Revision does not match $This\n";
         } # if

        my @AllRevs = keys %TagList;

        # We are on the head, so we need the highest revision number containing
        # only a single decimal point.
        my $Max = 0;
        my $MaxFull = 0;
        foreach (@AllRevs) {
          my $in = $_;
          if ( $in =~ m/^\d+\.\d+$/) {
            my $infull = $in;
            $infull =~ tr/\.//d;
            if ( $infull > $MaxFull) {
              $MaxFull = $infull;
              $Max = $in;
            }
          }
        }
        # if it is zero, there are no (matching) tags on the file, so we will
        # use the ReposIndex one.
        if ($Max == 0) {
          $Max = $status{"$FileName"}[$ReposIndex];
        }
        #      print "Max value(HEAD) is $Max\n";
        $status{"$FileName"}[$MaxValueHeadIndex] = $Max;

        if ((defined $status{"$FileName"}[$WorkIndex]) && ( $status{"$FileName"}[$WorkIndex] =~ m/^(\d+)((\.\d+)+)\.(\d+)$/ )) {
          my $ThisBranchRev = "$1$2";
          # Now we can find the highest revision number on this branch
          #This time Max is only one number, so we don't need all that maxfull gubbins
          my $Max = 0;
          foreach (@AllRevs) {
            my $This = $_;
            if ( $_ =~ m/^$ThisBranchRev\.(\d+)$/) {
              if ($1 > $Max) {
                $Max = $1;
              }
            }
          }                     # foreach
          #         print "Max value(BRANCH) is $Max\n";
          if ($Max != 0) {
            $status{"$FileName"}[$MaxValueBranchIndex] = "$ThisBranchRev.$Max";
          } else {
            $status{"$FileName"}[$MaxValueBranchIndex] = "(n/a)";
          }
        } else {
          $status{"$FileName"}[$MaxValueBranchIndex] = " ";
        }

        if (! defined $status{"$FileName"}[$WorkIndex]) {
#          print "$FileName does not exist\n";
          $status{"$FileName"}[$NameIndex] = "$FileName";
          my $ln = length($FileName);
          $len[$NameIndex] = $ln if ($ln > $len[$NameIndex]);
          $status{"$FileName"}[$StatusIndex] = " -NEW- ";
          my $ls = length($status{"$FileName"}[$StatusIndex]);
          $len[$StatusIndex] = $ls if ($ls > $len[$StatusIndex]);

          $status{"$FileName"}[$WorkIndex] = " ";
          $status{"$FileName"}[$ReposIndex] = " ";
          $status{"$FileName"}[$TagIndex] = " ";
          $status{"$FileName"}[$DateIndex] = " ";
          $status{"$FileName"}[$OptionsIndex] = " ";
        }

        $Max = $status{"$FileName"}[$MaxValueHeadIndex];
        if ((defined $TagList{$Max}) && ($TagList{$Max} eq "dead")) {
          if ($showdeadinrepos == 0) {
              delete $status{"$FileName"};
          } else {
            $status{"$FileName"}[$StatusIndex] = "dead";
            my $ls = length($status{"$FileName"}[$StatusIndex]);
            $len[$StatusIndex] = $ls if ($ls > $len[$StatusIndex]);
          }
        }


      } # while




    } #if

#     print "Line is : $line\n";
#     if (! exists $status{"$line"}[$WorkIndex]) {
#       print ".... does not exist\n";
#       $status{"$line"}[$NameIndex] = "$line";
#       my $ln = length($line);
#       $len[$NameIndex] = $ln if ($ln > $len[$NameIndex]);
#       $status{"$line"}[$StatusIndex] = " -NEW- ";
#       my $ls = length($status{"$line"}[$StatusIndex]);
#       $len[$StatusIndex] = $ls if ($ls > $len[$StatusIndex]);

#       $status{"$line"}[$WorkIndex] = " ";
#       $status{"$line"}[$ReposIndex] = " ";
#       $status{"$line"}[$TagIndex] = " ";
#       $status{"$line"}[$DateIndex] = " ";
#       $status{"$line"}[$OptionsIndex] = " ";
#       $status{"$line"}[$MaxValueHeadIndex] = " ";
#       $status{"$line"}[$MaxValueBranchIndex] = " ";
#     }


  } # while CVSUP

  close (CVSUP);

} # endif

# Print header
print "\n";
printf ("%-$len[$NameIndex]s", $header[$NameIndex]);
printf (" : %-$len[$StatusIndex]s", $header[$StatusIndex]);
printf (" : %$len[$WorkIndex]s", $header[$WorkIndex]) if $showlocalrev;
printf (" : %$len[$ReposIndex]s", $header[$ReposIndex]) if $showremoterev;
printf (" : %-$len[$TagIndex]s", $header[$TagIndex]) if $showtag;
printf (" : %-$len[$DateIndex]s", $header[$DateIndex]) if $showdate;
printf (" : %-$len[$OptionsIndex]s", $header[$OptionsIndex]) if $showkopts;
printf (" : %-$len[$MaxValueHeadIndex]s", $header[$MaxValueHeadIndex]) if $showlatest;
printf (" : %-$len[$MaxValueBranchIndex]s", $header[$MaxValueBranchIndex]) if $showlatest;

print  "\n\n";

# Print body
foreach my $file (sort keys %status) {
  if (
      ( ($status{$file}[$StatusIndex] ne "Up-to-date") or $showuptodate)
      and
      ( ($status{$file}[$StatusIndex] ne "Unknown") or $showunknown)
     ) {

      if ($showbranchonly) {
        if ((!defined $status{$file}[$OnBranchIndex]) || ($status{$file}[$OnBranchIndex] ne "1")) {
          next;
        }
     }

      if ($status{$file}[$StatusIndex] eq "Up-to-date") {
        if ($showoutofdateonly) {
          if ( (defined $status{$file}[$WorkIndex]) && (defined $status{$file}[$MaxValueHeadIndex])
               && (defined $status{$file}[$MaxValueBranchIndex]) &&

               (($status{$file}[$WorkIndex] eq $status{$file}[$MaxValueHeadIndex]) ||
                ($status{$file}[$WorkIndex] eq $status{$file}[$MaxValueBranchIndex]))) {
            next;
          }
        }

      }

      if (($ignorevendor == 1) && ($status{$file}[$WorkIndex] =~ m/^1\.1\.1/)) {
        next;
      }

    printf ("%-$len[$NameIndex]s", $file);
    printf (" : %-$len[$StatusIndex]s", $status{$file}[$StatusIndex]);
    printf (" : %$len[$WorkIndex]s", $status{$file}[$WorkIndex]) if $showlocalrev;
    printf (" : %$len[$ReposIndex]s", $status{$file}[$ReposIndex]) if $showremoterev;
    printf (" : %-$len[$TagIndex]s", $status{$file}[$TagIndex]) if $showtag;
    printf (" : %-$len[$DateIndex]s", $status{$file}[$DateIndex]) if $showdate;
    printf (" : %-$len[$OptionsIndex]s", $status{$file}[$OptionsIndex]) if $showkopts;
    printf (" : %-$len[$MaxValueHeadIndex]s", $status{$file}[$MaxValueHeadIndex]) if $showlatest;
    printf (" : %-$len[$MaxValueBranchIndex]s", $status{$file}[$MaxValueBranchIndex]) if $showlatest;
    print "\n";
  }
}


exit 0;



sub debugprint {
   my $OutputLine = shift (@_);
   if ($debug) { print STDERR "DEBUG:  $OutputLine" }
}

sub usage {
  ######################################################################
  # Print usage / help using perldoc or similar
  ######################################################################
  my $arg;
  $arg = shift(@_) or $arg = "pod2text";
  exec("$arg $0");
  die("Shouldn't get here");
}

sub version {
  ######################################################################
  # Print version information
  # examples:
  #   version(); print version number to STDOUT
  #   version("anything"); print version number and CVS info to STDOUT
  ######################################################################

  ######################################################################
  # CVS Revision control variables
  ######################################################################
  my @commandline="$mynameis @ARGV"; # The command line used to call this script
  my $cvsrevision = '$Revision: 1.1 $ ';
  my $cvsrcsfile = '$RCSfile: statuses,v $ ';
  my $cvsdate = '$Date: 2008/06/09 20:35:27 $ ';
  my $cvsauthor = '$Author: rool $ ';
  my $cvssource = '$Source: /cvsroot/castle/Admin/bin/statuses,v $ ';
  $cvsrevision =~  m"Revision: (.+) \$"; $cvsrevision = $1;
  $cvsrcsfile =~ m"RCSfile: (.+),v \$"; $cvsrcsfile = $1;
  $cvsdate =~ m"Date: (.+) \$"; $cvsdate = $1;
  $cvsauthor =~ m"Author: (.+) \$"; $cvsauthor = $1;
  $cvssource =~ m"Source: (.+) \$"; $cvssource = $1;

  if (@_) {
    print STDERR ("Scriptname        : $mynameis\n");
    print STDERR ("Known to CVS as   : $cvsrcsfile\n");
    print STDERR ("Version           : $cvsrevision\n");
    print STDERR ("Date              : $cvsdate\n");
    print STDERR ("Author            : $cvsauthor\n");
    print STDERR ("Repository source : $cvssource\n");
  } else {
    print("$cvsrevision\n");
  }
}

__END__

=head1 NAME

statuses - report the CVS status of files in the directory specified

=head1 SYNOPSIS

B<statuses>
[B<-R> | B<-l>]
[B<-q> | B<-v>]
[B<-(no)uptodate>]
[B<-(no)unknown>]
[B<-(no)local>]
[B<-(no)remote>]
[B<-(no)st>]
[B<-(no)sd>]
[B<-(no)so>]
[B<-(no)branchonly>]
[B<-(no)br>]
[B<-(no)ignorevendor>]
[B<-(no)iv>]
[B<-outofdateonly>]
[B<-(no)od>]
[B<-(no)latest>]
[B<-dead>]
[B<-all> | B<-none>]
[B<-cvs> I<"cvs options">]
I<directory>

B<statuses> [B<-h> | B<-man>]

B<statuses> [B<-version> | B<-Version>]

=head1 DESCRIPTION

B<statuses> is a wrapper for C<cvs status>, which is performed in
I<directory>, if specified, or in the current directory otherwise.
The output from C<cvs status> is a bit naff, so this script parses it
into a neater format.

The output from B<statuses> shows, for each file present in the
directory:

=over 4

=item Filename

Err...

=item Status

The CVS status of the file (see below)

=item Local Revision

The revision that the file in the working directory derives from

=item Available Revision

The latest revision in the repository (for the branch in use)

=item Sticky Tag

The sticky tag that the file has been checked out against

=item Sticky Date

The sticky date that the file has been checked out against

=item 'K' Options

The CVS keyword-expansion option for the file, for example C<-kb> for
a binary file

=back

=head2 What the status means...

Based on what operations you have performed on a checked out file, and
what operations others have performed to that file in the repository,
one can classify a file in a number of states.  The states, as
reported by the B<statuses> command, are:

=over 8

=item B<Up-to-date>

The file is identical with the latest revision in the repository for
the branch in use.

=item B<Locally Modified>

You have edited the file, and not yet committed your changes.

=item B<Locally Added>

You have added the file with C<cvs add>, and not yet committed your
changes.

=item B<Locally Removed>

You have removed the file with C<cvs remove>, and not yet committed
your changes.

=item B<Needs Checkout>

Someone else has committed a newer revision to the repository.  The
name is slightly misleading; you will ordinarily use C<cvs update>
rather than C<cvs checkout> to get that newer revision.

=item B<Needs Patch>

Like I<Needs Checkout>, but the CVS server will send a patch rather
than the entire file.  Sending a patch or sending an entire file
accomplishes the same thing.

=item B<Needs Merge>

B<Someone else has committed a newer revision to the repository, and
you have also made modifications to the file.>

=item B<File had conflicts on merge>

This is like I<Locally Modified>, except that a previous C<cvs update>
command gave a conflict.  If you have not already done so, you need to
resolve the conflict.

=item B<Unknown>

CVS doesn't know anything about this file.  For example, you have
created a new file and have not run C<cvs add>.

=back

=head1 OPTIONS

=head2 Directory Options

=over 4

=item B<-l>

Process this directory only (not recursive).

=item B<-R> (default)

Process directories recursively.

=back

=head2 Display Options

=over 4

=item B<-uptodate>, B<-nouptodate> (also B<-utd>, B<-noutd>)

Show/hide information for files which are "Up-to-date".

On by default.

=item B<-unknown>, B<-nounknown> (also B<-uk>, B<-nouk>)

Show/hide information for files which are unknown to CVS.

On by default.

=item B<-local>, B<-nolocal>

Show/hide the revision number of the file in the working directory.

On by default.

=item B<-remote>, B<-noremote>

Show/hide the latest revision number of the file in the repository.

On by default.

=item B<-st>, B<-nost>

Show/hide the sticky tag the file is checked out against.
(e.g., C<A191_stable>)

Off by default.

=item B<-sd>, B<-nosd>

Show/hide the sticky date the file is checked out against.

Off by default.

=item B<-so>, B<-noso>

Show/hide the sticky options the file is checked out against.
(e.g., C<-kb> indicates a binary file).  Also B<-sk>, B<-nosk>.

Off by default.

=item B<-branchonly> (also B<-br>)
Only show files which are currently on a branch.

=item [B<-ignorevendor>] (also B<-iv>, B<-noignorevendor>, B<-noiv>)
Do not show files which are on the vendor branch

=item B<-outofdateonly> (also B<-od>)
Only show files for which the current revision in the working
directory is not the same as the head of the trunk or the tip
of the branch.  Implies B<-latest>.

=item B<-latest>
Display the head revision of the file.  If the file is on a
branch, the branch tip revision is also displayed.

=item B<-dead>

Shows files which are now dead. (i.e. have been cvs removed)

=item B<-all>

All of B<-local -remote -st -sd -so>.

=item B<-none>

All of B<-nolocal -noremote -nost -nosd -noso>.

=back

=head2 Help Options

=over 4

=item B<-version>

Display version number.

=item B<-Version>

Display full CVS control details.

=item B<-h>, B<-?>, B<-help>

Display this help message and exit.

=item B<-man>

Display manual page and exit.

=back

=head2 Misc Options

=over 4

=item B<-q>, B<-quiet>

Cause B<statuses> to be somewhat quiet.

=item B<-v>, B<-verbose>

Cause B<statuses> to be somewhat verbose.

=item B<-cvs> I<cvs_options>

Call like C<cvs I<cvs_options> status>.  For example,
B<statuses -cvs "-f -z9" ...> will call
C<cvs -f -z9 status ...>

=back

=head2 DEFAULT OPTIONS

B<statuses> with no options will behave as

   statuses -local -remote -uptodate -unknown .

=head1 WARNING

B<statuses> operates on the I<directory> specified.  It does I<not> 
operate on indovidual files.

=head1 VERSION

$Id: statuses,v 1.1 2008/06/09 20:35:27 rool Exp $

=cut
