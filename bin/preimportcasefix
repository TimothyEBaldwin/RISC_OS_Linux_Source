#!/bin/perl -w
# 
# This source code in this file is licensed to You by Castle Technology
# Limited ("Castle") and its licensors on contractual terms and conditions
# ("Licence") which entitle you freely to modify and/or to distribute this
# source code subject to Your compliance with the terms of the Licence.
# 
# This source code has been made available to You without any warranties
# whatsoever. Consequently, Your use, modification and distribution of this
# source code is entirely at Your own risk and neither Castle, its licensors
# nor any other person who has contributed to this source code shall be
# liable to You for any loss or damage which You may suffer as a result of
# Your use, modification or distribution of this source code.
# 
# Full details of Your rights and obligations are set out in the Licence.
# You should have received a copy of the Licence with this source code file.
# If You have not received a copy, the text of the Licence is available
# online at www.castle-technology.co.uk/riscosbaselicence.htm
# 
#     eval 'exec /bin/perl -S $0 ${1+"$@"}'
#         if 0; #$running_under_some_shell

BEGIN { $0 = $1."\\".$2.$3 if ($0 =~ /^([A-Za-z]:)([^\\])(.*)$/); }
if ($^O eq "MSWin32") {
  die ("Will not run under $^O\n")
}

# Set the variable $File::Find::dont_use_nlink if you're using AFS,
# since AFS cheats.

# for the convenience of &wanted calls, including -eval statements:
use vars qw/*name *dir *prune/;
*name   = *File::Find::name;
*dir    = *File::Find::dir;
*prune  = *File::Find::prune;

########## END OF FIND2PERL GENERATED CODE ##########


use strict;
use POSIX "tmpnam";
use File::Find ();
use File::Copy "mv","cp";
use File::Path;
use File::Basename;
use Cwd;
use FindBin;
use lib "$FindBin::Bin/perllib";
use Pace::CvsDirectory;
use Getopt::Long;

my $TRUE=1;
my $FALSE=0;

my $tmpdir = "./".basename(tmpnam());
my $initialdir=cwd();
my $conflict=$FALSE;

my $importdirectory = ".";
my @importfiles;

my $cvsrepository;
my $cvsroot;

my $sandboxdirectory = ".";
my @reposfiles;
my @reposdirs;

my @shouldbe;

my $dofix=$FALSE;
my $verbose=$FALSE;
my $debug=$FALSE;


Getopt::Long::Configure("no_ignore_case");
GetOptions('h|?'     => sub { usage("pod2usage") },
           'help'    => sub { usage("pod2text") },
           'man'     => sub { usage("perldoc") },
           'old=s'   => \$sandboxdirectory,
           'new=s'   => \$importdirectory,
           'fix!'    => \$dofix,
           'verbose' => \$verbose,
           'debug'   => sub { $debug = $TRUE; $verbose = $TRUE },
           'version' => sub { version(); exit(0); },
          ) or usage("pod2usage");

usage("pod2usage") if ($sandboxdirectory eq $importdirectory);
unless (-d $sandboxdirectory) {
  print "No such sandbox directory '$sandboxdirectory'\n";
  usage("pod2usage");
}
unless (-d $importdirectory){
  print "No such import directory '$importdirectory'\n";
  usage("pod2usage");
}

$sandboxdirectory =~ s:[/\\]+$::g;
$importdirectory =~ s:[/\\]+$::g;

# Find files in import directory
chdir $importdirectory or die("No such directory $importdirectory");
File::Find::find({wanted => \&wantedfiles}, ".");
chdir $initialdir;


# Find files in repository
chdir $sandboxdirectory or die("No such directory $sandboxdirectory");
$cvsrepository = directory_repository();

$cvsroot = directory_root();
$cvsroot =~ s/^:.+:.+://g;

open (PIPE, "cvs -Q log -R |");
while (<PIPE>) {
  my $line = $_;
  $line =~ s/[\015\012]//g;
  $line =~ s/,v$//g;
  $line =~ s:$cvsroot/$cvsrepository:.:g;
  $line =~ s:Attic/::g;
  push (@reposfiles,$line) if ($line =~ /\./);
}
close (PIPE);
chdir $initialdir;

my $len=0;
foreach my $i (@importfiles) {
  $i =~ s/^\./$importdirectory/g;
  $len = length($i) if (length($i) > $len);
  print "LOCALFILE $i\n" if ($debug);
}

print "\n" if ($debug);

foreach my $i (@reposfiles) {
  $i =~ s/^\./$importdirectory/g;
  print "REPOSFILE $i\n" if ($debug);
  my $dir = dirname($i);
  my $present = $FALSE;
  foreach my $j (@reposdirs) {
    $present = $TRUE if ($dir eq $j);
  }
  push (@reposdirs, $dir) unless ($present);
}

print "\n" if ($debug);

my @sortedreposdirs = sort { length($b) <=> length($a) } @reposdirs;

@shouldbe = @importfiles;
foreach my $i (@shouldbe) {
  my $OK = $TRUE;
  my $lci = lc($i);
  foreach my $j (@reposfiles) {
    my $lcj = lc($j);
    if (($lci eq $lcj) and ($i ne $j) and (basename($i) ne basename($j))) {
      printf ("%-".$len."s should be '$j'\n",$i);
      $i =~ s/^$j/$j/ig;
      $OK = $FALSE;
      $conflict = $TRUE;
      last;
    }
  }
  foreach my $j (@reposdirs) {
    my $lcj = lc($j);
    if (($lci =~ /^$lcj/) and ($i !~ /^$j/)) {
      printf ("%-".$len."s should be '$j/...'\n",$i);
      $i =~ s/^$j/$j/ig;
      $OK = $FALSE;
      $conflict = $TRUE;
      last;
    }
  }
  printf ("%-".$len."s OK\n",$i) if ($OK and $verbose);
}

if ($dofix and $conflict) {
  print "\nFIXING...\n\n";

  # Copy import directory to temp location with correct filenames
  print "Creating correct filenames in $tmpdir...\n" if ($verbose);
  for (my $i = 0; $i <= $#shouldbe; $i++) {
    my $path = dirname($shouldbe[$i]);
    mkpath ("$tmpdir/$path", $debug);
    cp ("$importfiles[$i]", "$tmpdir/$shouldbe[$i]") or
      die("Error: $!\n when copying $importfiles[$i]");
  }
  print "...OK\n" if ($verbose);

  # Delete import directory
  my $backup = "$importdirectory.".basename($tmpdir);
  print "Backing up originals into $backup...\n" if ($verbose);
  mv ($importdirectory, "$backup") or
    cleanupanddie("$! while backing up '$importdirectory' to '$backup'\n");
  print "...OK\n" if ($verbose);

  print "Deleting originals...\n" if ($verbose);
  rmtree ($importdirectory, $debug);
  print "...OK\n" if ($verbose);

  # Move corrected filenames back into import directory.
  print "Reverting correct filenames from $tmpdir into $importdirectory...\n" if ($verbose);
  mv ("$tmpdir/$importdirectory", $importdirectory) or
    cleanupanddie("$! while moving $tmpdir/$importdirectory\n");
  print "...OK\n" if ($verbose);

  # Delete temp tree
  print "Cleaning up...\n" if ($verbose);
  rmtree ($tmpdir, $debug);
  rmtree ("$backup", $debug);
  print "OK\n" if ($verbose);
}

exit;

sub cleanupanddie {
  rmtree ($tmpdir, $debug);
  print @_;
  exit 1;
}

sub usage {
  ######################################################################
  # Print usage / help using perldoc or similar
  ######################################################################
  my $arg;
  $arg = shift(@_) or $arg = "pod2text";
  exec("$arg $0");
  die("Shouldn't get here");
}


sub wantedfiles {
  my ($dev,$ino,$mode,$nlink,$uid,$gid);

  (($dev,$ino,$mode,$nlink,$uid,$gid) = lstat($_)) && -f _ && do {
    push(@importfiles,$name) unless ($name =~ /CVS/);
  }
}

sub version {
  ######################################################################
  # Print version information
  ######################################################################

  ######################################################################
  # CVS Revision control variables
  ######################################################################
  my $mynameis=basename($0);
  my @commandline="$mynameis @ARGV"; # The command line used to call this script
  my $cvsrevision = '$Revision: 1.1 $ ';
  my $cvsrcsfile = '$RCSfile: preimportcasefix,v $ ';
  my $cvsdate = '$Date: 2008/06/09 20:35:27 $ ';
  my $cvsauthor = '$Author: rool $ ';
  my $cvssource = '$Source: /cvsroot/castle/Admin/bin/preimportcasefix,v $ ';
  $cvsrevision =~  m"Revision: (.+) \$"; $cvsrevision = $1;
  $cvsrcsfile =~ m"RCSfile: (.+),v \$"; $cvsrcsfile = $1;
  $cvsdate =~ m"Date: (.+) \$"; $cvsdate = $1;
  $cvsauthor =~ m"Author: (.+) \$"; $cvsauthor = $1;
  $cvssource =~ m"Source: (.+) \$"; $cvssource = $1;

  if ($verbose) {
    print STDERR ("Scriptname        : $mynameis\n");
    print STDERR ("Known to CVS as   : $cvsrcsfile\n");
    print STDERR ("Version           : $cvsrevision\n");
    print STDERR ("Date              : $cvsdate\n");
    print STDERR ("Author            : $cvsauthor\n");
    print STDERR ("Repository source : $cvssource\n");
  } else {
    print("$cvsrevision\n");
  }
}



__END__

=head1 NAME

preimportcasefix - fix filename cases prior to import.

=head1 SYNOPSIS

B<preimportcasefix>
B<-old>
F<sandbox_directory>
B<-new>
F<directory_to_import>
B<-(no)fix>
[ B<-verbose> ]

B<preimportcasefix> [ B<-verbose> ] B<-version>

B<preimportcasefix> B<-h> | B<-help> | B<-man>

Options may be abbreviated to uniqueness.

=head1 DESCRIPTION

=head2 Why use 'preimportcasefix'

When performing a CVS import I<it is abslolutely vital> that the case
of the filenames being imported matches those filename already
existing in the repository.  Unfortunately, due to the half-assed way
in which MS Windows manages filenames, this is not guaranteed to be
the case -- when checking out a file from the repository, MS Windows
will honour the filename case, but will not consider it to be a
different file from that with a different case.  Result: loads of
horrible "Move aside XXX: it is in the way" error messages, or worse,
"Conflicts in XXX".  It can alse result in a strange "assertion
failed" errors.

Note also that some of the files in the repository may have been
removed -- that is, they will not be checked out into a local
directory and are in the special CVS "Attic" directory.  We must
ensure that there are no conflicts with these files either.

This script, B<preimportcasefix>, attempts to rectify these problems.

=head2 How to use 'preimportcasefix'

=over 4

=item *

You must have a checked out copy of the repository directory.  We will
call this the F<sandbox_directory>

=item *

You must have the new drop of code in some directory.  We will call
this the F<import_directory>

=item *

You I<must not> run B<preimportcasefix> from the F<import_directory>.

=back

From some directory, type

   preimportcasefix -old sandbox_directory -new import_directory -fix

This will do the following:

=over 4

=item 1

C<chdir> to F<import_directory>; gather all files (using C<find2perl>).

=item 2

C<chdir> to F<sandbox_directory>; gather all files in repository
(using C<cvs log -R>); parse out any C<Attic> files and C<,v>
extensions.

=item 3

Compare the two lists and display a summary of conflicting filenames.

=item 4

Copy the F<import_directory> to a temporary location, fixing
conflicting filenames.

=item 5

Back up and delete F<import_directory>.  Backup is in current working
directory.

=item 6

Copy files back from temporary location to F<import_directory>, with
fixed conflicts.

=item 7

If all the preceding worked OK, then delete temporary and backup
directories.

=back

=head1 OPTIONS

=over 4

=item B<-old> F<sandbox_directory>

B<MANDATORY>. Specify the location of the existing CVS controlled
directory.

=item B<-new> F<import_directory>

B<MANDATORY>. Specify the location of the new code to import.

=item B<-fix> | B<-nofix>

Either rename conflicting filename or just display them.  Default is
B<-nofix>.

=item B<-verbose>

Explain a bit more fully what is going on; display filenames which do
not conflict.

=item B<-version>

Display the version number of B<preimportcasefix>.  If called as
B<preimportcasefix -verbose -version>, then display a load of CVS
related information.

=item B<-debug>

Be even more verbose.

=item B<-h> | B<-?>

Brief help.

=item B<-help>

Full help.

=item B<-man>

Full help via B<perldoc>.

=back

=head1 VERSION

$Revision: 1.1 $

See B<preimportcasefix -verbose -version> for full version details.

=cut
