#!/bin/perl -w
# 
# This source code in this file is licensed to You by Castle Technology
# Limited ("Castle") and its licensors on contractual terms and conditions
# ("Licence") which entitle you freely to modify and/or to distribute this
# source code subject to Your compliance with the terms of the Licence.
# 
# This source code has been made available to You without any warranties
# whatsoever. Consequently, Your use, modification and distribution of this
# source code is entirely at Your own risk and neither Castle, its licensors
# nor any other person who has contributed to this source code shall be
# liable to You for any loss or damage which You may suffer as a result of
# Your use, modification or distribution of this source code.
# 
# Full details of Your rights and obligations are set out in the Licence.
# You should have received a copy of the Licence with this source code file.
# If You have not received a copy, the text of the Licence is available
# online at www.castle-technology.co.uk/riscosbaselicence.htm
# 

# for the convenience of &wanted calls, including -eval statements:
use vars qw/*name *dir *prune/;
*name   = *File::Find::name;
*dir    = *File::Find::dir;
*prune  = *File::Find::prune;


use strict;
use POSIX "tmpnam";
use File::Find ();
use File::Copy "mv","cp";
use File::Basename;
use Getopt::Long;
use Cwd;


my @allfiles;
my $yestoall = 0;
my @workingdirectories;
my $verbose;


Getopt::Long::Configure("no_ignore_case");
GetOptions('h|?'     => sub { usage("pod2usage") },
           'help'    => sub { usage("pod2text") },
           'man'     => sub { usage("perldoc") },
           'yes|all' => \$yestoall,
           'version' => sub { version(); exit(0); },
           'Version' => sub { $verbose = 1; version(); exit(0); },
          ) or usage("pod2usage");

@workingdirectories = @ARGV or @workingdirectories = (".");
foreach my $workingdirectory (@workingdirectories) {
  die("No such directory $workingdirectory") unless (-d $workingdirectory);

  chdir $workingdirectory;

  # Traverse desired filesystems
  print "Scanning in ".cwd()."...\n";
  File::Find::finddepth({wanted => \&findall}, '.');

  foreach my $i (@allfiles) {
    my ($name, $path) = fileparse($i);
    my $type = ((-d $i) ? "directory" : "file");
    #  printf ("%-10s $i\n", $type);
    if ($name =~ /[A-Z]/) {
      my $lcname = lc($name);
      print "\nRename $i to $path$lcname?\n";
      if ($yestoall or ask()) {
        my $tmpnam = "$path".basename(tmpnam());
        mv ($i, $tmpnam) or die("$! while renaming $i to $tmpnam");
        mv ($tmpnam, "$path$lcname") or die("$! while renaming $tmpnam to $path$lcname");
        print "Done\n";
      }
    }
  }
}
exit;

sub ask {
  my $response;
  my $retval = 0;
  do {
    print "(y)es (n)o (a)ll (q)uit\n(default no)";
  } while (($response = <STDIN>) !~ /^[yYnNaAqQ\n]/);

  foreach ($response) {
    /[yY]/ and do {
      $retval = 1;
      last;
    };
    /[nN]/ and do {
      $retval = 0;
      last;
    };
    /[aA]/ and do {
      $retval = 1;
      $yestoall = 1;
      last;
    };
    /[qQ]/ and do {
      $retval = 0;
      exit 1;
      last;
    };
  }
  return $retval;
}


sub findall {
  push (@allfiles,$name) unless (($name =~ m:/CVS/:) or ($name =~ m:/CVS$:));
}

sub usage {
  ######################################################################
  # Print usage / help using perldoc or similar
  ######################################################################
  my $arg;
  $arg = shift(@_) or $arg = "pod2text";
  exec("$arg $0");
  die("Shouldn't get here");
}

sub version {
  ######################################################################
  # Print version information
  ######################################################################

  ######################################################################
  # CVS Revision control variables
  ######################################################################
  my $mynameis=basename($0);
  my @commandline="$mynameis @ARGV"; # The command line used to call this script
  my $cvsrevision = '$Revision: 1.1 $ ';
  my $cvsrcsfile = '$RCSfile: downcase,v $ ';
  my $cvsdate = '$Date: 2008/06/09 20:35:27 $ ';
  my $cvsauthor = '$Author: rool $ ';
  my $cvssource = '$Source: /cvsroot/castle/Admin/bin/downcase,v $ ';
  $cvsrevision =~  m"Revision: (.+) \$"; $cvsrevision = $1;
  $cvsrcsfile =~ m"RCSfile: (.+),v \$"; $cvsrcsfile = $1;
  $cvsdate =~ m"Date: (.+) \$"; $cvsdate = $1;
  $cvsauthor =~ m"Author: (.+) \$"; $cvsauthor = $1;
  $cvssource =~ m"Source: (.+) \$"; $cvssource = $1;

  if ($verbose) {
    print STDERR ("Scriptname        : $mynameis\n");
    print STDERR ("Known to CVS as   : $cvsrcsfile\n");
    print STDERR ("Version           : $cvsrevision\n");
    print STDERR ("Date              : $cvsdate\n");
    print STDERR ("Author            : $cvsauthor\n");
    print STDERR ("Repository source : $cvssource\n");
  } else {
    print("$cvsrevision\n");
  }
}




__END__

=head1 NAME

=pod

downcase - Rename files and directories with lowercase version.

=head1 SYNOPSIS

B<downcase>
[ B<-all> ]
[ F<path/to/directory> ]


B<downcase> B<-h> | B<-help> | B<-man>

B<downcase> B<-version> | B<-Version>

Options may be abbreviated to uniqueness.

=head1 DESCRIPTION

B<downcase> renames all files and directories in and under the
directory F<path/to/directory> (or the current working directory, if
not specified) with the lowercase version of the filename.

The user is prompted as to whether they want to downcase each filename.

=head1 OPTIONS

Options may be abbreviated to uniqueness.

=over 4

=item B<-all>, B<-yes>

Do not prompt; downcase all files and directories.

=item B<-h>

Brief help.

=item B<-help>

Full help.

=item B<-man>

Full help via B<perldoc>.

=item B<-version>, B<-Version>

Display version number of B<downcase>; B<-Version> displays CVS
repository information also.

=back

=head1 VERSION

$Revision: 1.1 $

See B<downcase -Version> for full version details.

=cut
