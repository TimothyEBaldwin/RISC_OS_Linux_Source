From a38d7d8523042d0c6edbb91ec20ac199ec9db207 Mon Sep 17 00:00:00 2001
From: Timothy E Baldwin <T.E.Baldwin99@members.leeds.ac.uk>
Date: Wed, 22 Feb 2017 23:04:39 +0000
Subject: [PATCH 4/5] Srcbuild: Parallel builds

---
 castle/RiscOS/Utilities/Release/srcbuild/c/build   | 56 +++++++++--------
 castle/RiscOS/Utilities/Release/srcbuild/c/riscos  | 70 ++++++++++++++++++----
 .../RiscOS/Utilities/Release/srcbuild/c/srcbuild   |  1 +
 castle/RiscOS/Utilities/Release/srcbuild/h/riscos  | 13 +++-
 4 files changed, 100 insertions(+), 40 deletions(-)

diff --git a/castle/RiscOS/Utilities/Release/srcbuild/c/build b/castle/RiscOS/Utilities/Release/srcbuild/c/build
index 1682a1ae..828d9f76 100644
--- a/castle/RiscOS/Utilities/Release/srcbuild/c/build
+++ b/castle/RiscOS/Utilities/Release/srcbuild/c/build
@@ -35,9 +35,10 @@
  *
  */
 
-/* ANSI Includes */
+/* ISO Includes */
 #include <stdio.h>
 #include <stdarg.h>
+#include <stdbool.h>
 #include <stdlib.h>
 #include <string.h>
 #include <ctype.h>
@@ -167,24 +168,10 @@ amu_machinef(char *format, ...)
 #pragma -v0
 #endif
 
-/* Prints out that a component is about to be processed, and changes the current directory
- * to be that of the module specified.  Returns 0 on failure, 1 on success.
- */
-static int build_select_module_directory(component_entry_t *component, module_entry_t *module)
+static int build_ensure_depends_file(void)
 {
-  int result;
   char buffer[BUFFER_LEN];
-  FILE *depends;
-
-  sb_printf("\n%s (%s)...\n", component->name, module->path);
-  sb_buildfilename(BUFFER_LEN, buffer, build_dir, module->path, NULL);
-  result = sb_chdir(buffer);
-  if (result) {
-    error(0, "cannot locate '%s'", buffer);
-    return 0;
-  }
-
-  depends = fopen("Depends", "a");
+  FILE *depends = fopen("Depends", "a");
   if (!depends) {
     error(0, "error opening '%s.Depends'", buffer);
     return 0;
@@ -208,6 +195,25 @@ static int build_select_module_directory(component_entry_t *component, module_en
 }
 
 
+/* Prints out that a component is about to be processed, and changes the current directory
+ * to be that of the module specified.  Returns 0 on failure, 1 on success.
+ */
+static int build_select_module_directory(component_entry_t *component, module_entry_t *module)
+{
+  int result;
+  char buffer[BUFFER_LEN];
+
+  sb_printf("\n%s (%s)...\n", component->name, module->path);
+  sb_buildfilename(BUFFER_LEN, buffer, build_dir, module->path, NULL);
+  result = sb_chdir(buffer);
+  if (result) {
+    error(0, "cannot locate '%s'", buffer);
+    return 0;
+  }
+  return build_ensure_depends_file();
+}
+
+
 /* Sets up Resource$Dir and Locale environment variables for the given locale,
  * and re-initialises the amu_machine alias to reflect the new values.
  */
@@ -502,7 +508,7 @@ int build_clean_all(void)
 /* This routine handles both export_hdrs and export_libs.  It invokes the export
  * rule with PHASE set appropriately.
  */
-static int build_export(const char *phase)
+static int build_export(const char *phase, bool parallel_ok)
 {
   component_entry_t *component;
   module_entry_t *module;
@@ -528,7 +534,7 @@ static int build_export(const char *phase)
         case HAL:
         case DATA:
         case EXP:
-          if (build_select_module_directory(component, module)) {
+          PARALLEL(parallel_ok) if (build_select_module_directory(component, module)) {
             if (amu_machinef("-k export PHASE=%s COMPONENT=%s %s%s %s",
               phase,
               component->name,
@@ -554,12 +560,12 @@ static int build_export(const char *phase)
 
 int build_export_hdrs(void)
 {
-  return build_export("hdrs");
+  return build_export("hdrs", false);
 }
 
 int build_export_libs(void)
 {
-  return build_export("libs");
+  return build_export("libs", true);
 }
 
 
@@ -602,6 +608,7 @@ static int build_resources_(build_resources_reason_code reason_code)
       error(0, "cannot locate '%s'", buffer);
     else
     {
+      build_ensure_depends_file();
       sprintf(buffer,"-k clean COMPONENT=Messages TARGET=Messages NUMLOCALE=%s", locale);
       if (amu_machinef(buffer) != 0)
         error(0, "running make clean on module 'Messages'.");
@@ -637,7 +644,7 @@ static int build_resources_(build_resources_reason_code reason_code)
       case HAL:
       case DATA:
       case RES:
-        if (build_select_module_directory(component, module))
+        PARALLEL(1) if (build_select_module_directory(component, module))
         {
           /* We have been given a list of territories - iterate down them. */
           unsigned int loop;
@@ -1191,8 +1198,9 @@ int build_rom(void)
   	   * do we want to force a clean build due to changes
   	   */
   	  if (component->force_clean) {
+  	    sb_parallel_start(false);
             sb_printf("Forcing a clean build due to switch/option changes...\n");
-  	    if (amu_machinef("-k clean COMPONENT=%s %s%s %s",
+	    if (amu_machinef("-k clean COMPONENT=%s %s%s %s",
   		component->name,
   		module->filename?"TARGET=":"",
   		module->filename?module->filename:"",
@@ -1219,7 +1227,7 @@ int build_rom(void)
   	    fprintf(fh_shadow, "\n");
   	  }
 
-  	  if (amu_machinef("-k rom COMPONENT=%s %s%s %s",
+	  PARALLEL(true) if (amu_machinef("-k rom COMPONENT=%s %s%s %s",
   		component->name,
   		module->filename?"TARGET=":"",
   		module->filename?module->filename:"",
diff --git a/castle/RiscOS/Utilities/Release/srcbuild/c/riscos b/castle/RiscOS/Utilities/Release/srcbuild/c/riscos
index a2b8d54e..ad519bbc 100644
--- a/castle/RiscOS/Utilities/Release/srcbuild/c/riscos
+++ b/castle/RiscOS/Utilities/Release/srcbuild/c/riscos
@@ -2,14 +2,14 @@
  * Limited ("Castle") and its licensors on contractual terms and conditions
  * ("Licence") which entitle you freely to modify and/or to distribute this
  * source code subject to Your compliance with the terms of the Licence.
- * 
+ *
  * This source code has been made available to You without any warranties
  * whatsoever. Consequently, Your use, modification and distribution of this
  * source code is entirely at Your own risk and neither Castle, its licensors
  * nor any other person who has contributed to this source code shall be
  * liable to You for any loss or damage which You may suffer as a result of
  * Your use, modification or distribution of this source code.
- * 
+ *
  * Full details of Your rights and obligations are set out in the Licence.
  * You should have received a copy of the Licence with this source code file.
  * If You have not received a copy, the text of the Licence is available
@@ -40,7 +40,9 @@
 #  include "swis.h"
 #  include "Global/Services.h"
 #else
-#  include "sys/wait.h"
+#  include <unistd.h>
+#  include <sys/types.h>
+#  include <sys/wait.h>
 #endif
 
 #include "srcbuild.h"
@@ -55,6 +57,8 @@
  * globals
  */
 static int spooling = FALSE;
+static int children;
+static int max_children;
 
 
 #ifdef RISCOS
@@ -68,6 +72,27 @@ static int env_hwm = 0;
 static FILE *logfile;
 #endif
 
+#ifdef RISCOS
+/*
+ * Linux system calls on RISC OS
+ */
+static int IXSupport_LinuxSyscall;
+
+static inline int fork(void) {
+  return _swi(IXSupport_LinuxSyscall, _RETURN(0) | _IN(7), 2);
+}
+
+static inline int wait(int *status) {
+  return _swi(IXSupport_LinuxSyscall, _RETURN(0) | _INR(0, 3) | _IN(7), -1, status, 0, 0, 114);
+}
+
+static inline void _exit(int code) {
+  _swi(IXSupport_LinuxSyscall, _RETURN(0) | _IN(0) | _IN(7), code, 1);
+}
+#endif
+
+
+
 /*
  * change working directory
  */
@@ -500,6 +525,14 @@ void sb_init(void)
 #endif
   sb_preload_env();
   sb_init_territories();
+
+  const char *c = sb_getenv("ROOL$MaxJobs");
+  if (c) max_children = atoi(c);
+  if (max_children) {
+#ifdef RISCOS
+    _swi(OS_SWINumberFromString, _IN(1) | _OUT(0), "IXSupport_LinuxSyscall", &IXSupport_LinuxSyscall);
+#endif
+  }
 }
 
 #ifndef RISCOS
@@ -626,16 +659,6 @@ int sb_system(char *command)
 #endif
 }
 
-void sb_system_sync(void)
-{
-#ifndef RISCOS
-  /* Nothing to do.  If we allow sb_system to fork and leave the task running in
-   * the background, we need to wait() for all the child processes to terminate
-   * here before returning.
-   */
-#endif
-}
-
 /* Function to duplicate a string (allocate memory and copy bytewise)
  *
  * Originally: sbrodie
@@ -703,3 +726,24 @@ int sb_fprintf(FILE *f, const char *fmt, ...)
 
   return result;
 }
+
+int sb_parallel_start(bool ok) {
+  while(children >= (ok ? max_children : 1)) {
+    wait(0);
+    --children;
+  }
+
+  if (ok && max_children) {
+    int pid = fork();
+    if (pid == 0) return 2;
+    if (pid > 0) {
+      ++children;
+      return 0;
+    }
+  }
+  return 1;
+}
+
+void sb_parallel_end(int flag) {
+  if (flag > 1) _exit(0);
+}
diff --git a/castle/RiscOS/Utilities/Release/srcbuild/c/srcbuild b/castle/RiscOS/Utilities/Release/srcbuild/c/srcbuild
index 5b62b3ee..61ae7b50 100644
--- a/castle/RiscOS/Utilities/Release/srcbuild/c/srcbuild
+++ b/castle/RiscOS/Utilities/Release/srcbuild/c/srcbuild
@@ -1113,6 +1113,7 @@ int main(int argc, char *argv[])
     }
     sb_printf("Starting phase %s ...\n", action->name);
     (*(action->call)) ();
+    sb_system_sync();
     banner('=');
   }
 
diff --git a/castle/RiscOS/Utilities/Release/srcbuild/h/riscos b/castle/RiscOS/Utilities/Release/srcbuild/h/riscos
index 04e8a7a1..28bf6a73 100644
--- a/castle/RiscOS/Utilities/Release/srcbuild/h/riscos
+++ b/castle/RiscOS/Utilities/Release/srcbuild/h/riscos
@@ -2,14 +2,14 @@
  * Limited ("Castle") and its licensors on contractual terms and conditions
  * ("Licence") which entitle you freely to modify and/or to distribute this
  * source code subject to Your compliance with the terms of the Licence.
- * 
+ *
  * This source code has been made available to You without any warranties
  * whatsoever. Consequently, Your use, modification and distribution of this
  * source code is entirely at Your own risk and neither Castle, its licensors
  * nor any other person who has contributed to this source code shall be
  * liable to You for any loss or damage which You may suffer as a result of
  * Your use, modification or distribution of this source code.
- * 
+ *
  * Full details of Your rights and obligations are set out in the Licence.
  * You should have received a copy of the Licence with this source code file.
  * If You have not received a copy, the text of the Licence is available
@@ -27,6 +27,7 @@
 
 #ifndef srcbuild_riscos_h
 #define srcbuild_riscos_h
+#include <stdbool.h>
 
 extern int  sb_chdir(const char *dir);
 extern int  sb_mkdir(const char *dir, const int mode);
@@ -44,8 +45,11 @@ extern char *sb_getenv(const char *name);
 extern char **sb_putenv(void);
 extern char *sb_strdup(const char *str);
 
+extern int  sb_parallel_start(bool ok);
+extern void sb_parallel_end(int flag);
+
 extern int  sb_system(char *command);
-extern void sb_system_sync(void);
+static inline void sb_system_sync(void) { sb_parallel_start(0); }
 
 extern void sb_init(void);
 
@@ -59,4 +63,7 @@ extern int sb_fprintf(FILE *, const char *, ...);
 #endif
 
 
+#define PARALLEL(OK) for(int sb_parallel_flag = sb_parallel_start(OK); sb_parallel_flag; sb_parallel_end(sb_parallel_flag), sb_parallel_flag = 0)
+
+
 #endif
-- 
2.11.0

